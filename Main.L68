00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/3/2016 11:40:20 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :Disassembler.Main
00000000                             3  * Written by :Blake Hashimoto
00000000                             4  * Date       :4/29/2016
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00000000                             7      
00000000                             8  *--------------------------------------------*
00000000                             9  * Program Input. Read user input start and   *
00000000                            10  * ending values                              *
00000000                            11  *--------------------------------------------*
00000000                            12  
00000000                            13  *----Display input message for mem start-----*
00000000                            14  INPUT_START
00000000                            15  *    BRA         TEST
Line 16 ERROR: Undefined symbol
00000000  43F9 004DBB8E             16      LEA         M_INPUT_START,A1      *load message
00000006  103C 000E                 17      MOVE.B      #14,D0          *display string
0000000A  4E4F                      18      TRAP        #15             *output string
0000000C                            19  *----Receive User Input ------
0000000C  227C 00000300             20      MOVE.L      #$0300,A1       *set address of register A1 for string
00000012  103C 0002                 21      MOVE.B      #2,D0           *input string into A1 Trap
00000016  4E4F                      22      TRAP        #15             *input string from user
00000018  6100 0040                 23      BSR         READ_CHAR       *check for valid input
Line 24 ERROR: Undefined symbol
0000001C  23C3 00544498             24      MOVE.L      D3,MEM_START    *put the starting address in memory
00000022  B87C 0000                 25      CMP         #0,D4           *check the result register (D4)
00000026  6700 0004                 26      BEQ         INPUT_END       *valid value. read the ending value
0000002A  60D4                      27      BRA         INPUT_START     *invalid value. try inputting start value again    
0000002C                            28      
0000002C                            29  *----Display input message for mem end-----*
0000002C                            30  INPUT_END
Line 31 ERROR: Undefined symbol
0000002C  43F9 004DBB8E             31      LEA         M_INPUT_END,A1  *load message
00000032  103C 000E                 32      MOVE.B      #14,D0          *display string
00000036  4E4F                      33      TRAP        #15             *output string
00000038                            34  *----Receive User Input ------*
00000038  227C 00000300             35      MOVE.L      #$0300,A1       *set address of register A1 for string
0000003E  103C 0002                 36      MOVE.B      #2,D0           *input string into A1 Trap
00000042  4E4F                      37      TRAP        #15             *input string from user
00000044  6100 0014                 38      BSR         READ_CHAR       *check for valid input
Line 39 ERROR: Undefined symbol
00000048  23C3 00544494             39      MOVE.L      D3,MEM_END      *put ending address into memory
0000004E  B87C 0000                 40      CMP         #0,D4           *check the result register (D4)
00000052  6700 00BE                 41      BEQ         READ_MEMORY     *valid value. read the ending value
00000056  60D4                      42      BRA         INPUT_END       *invalid value. try inputting start value again    
00000058                            43      
00000058                            44  GET_NEXT_INPUT
00000058  4E75                      45      RTS
0000005A                            46  
0000005A                            47  *----make sure that start value is valid----*
0000005A                            48  READ_CHAR                       *verify that string is valid (all hexadecimal digits)
0000005A  4243                      49      CLR         D3              *D3 will act as the total result
0000005C  2849                      50      MOVE.L      A1,A4           *the stop address
0000005E  143C 0006                 51      MOVE.B      #6,D2           *put 6 in D2
00000062  D8C2                      52      ADD.W       D2,A4           *A4 is now the stop address(A4)
00000064                            53      
00000064                            54  REMOVE_ZEROES
00000064  4281                      55      CLR.L       D1              *D1 will act as the temporary value
00000066  1211                      56      MOVE.B      (A1),D1         *read the byte from string
00000068  143C 0030                 57      MOVE.B      #$30,D2         *put ascii zero in D2
0000006C  B202                      58      CMP.B       D2,D1           *compare ascii zero and value of D1
0000006E  6700 0006                 59      BEQ         REMOVE_ZERO     *skip over that character   
00000072  6000 0008                 60      BRA         READ_CHAR_LOOP  *begin converting characters to numerical values
00000076                            61  REMOVE_ZERO
00000076  5289                      62      ADD.L       #1,A1           *increment string start address
00000078  528C                      63      ADD.L       #1,A4           *increment string end address
0000007A  60E8                      64      BRA         REMOVE_ZEROES   *loop back and keep removing zeroes
0000007C                            65  *----Convert String To Hex-----*
0000007C                            66  READ_CHAR_LOOP     
0000007C  4281                      67      CLR.L       D1              *D1 will act as the temporary value
0000007E  1211                      68      MOVE.B      (A1),D1         *read the byte from string
00000080                            69  *----check if the value is exaclty 00 (NULL)
00000080  B27C 0000                 70      CMP         #0,D1           *compare 00 (NULL) and the byte ascii value in D1
00000084  67D2                      71      BEQ         GET_NEXT_INPUT    *if you reached the end of the string, end loop
00000086                            72      
00000086  143C 0030                 73      MOVE.B      #$30,D2         *put ascii zero in D2
0000008A  B202                      74      CMP.B       D2,D1           *compare ascii zero and value of D1
0000008C  6D00 0036                 75      BLT         INVALID_CHAR_ERROR *branch on invalid (too small) ascii value   
00000090                            76  *------Result is greater than ascii 0--------*
00000090  143C 0066                 77      MOVE.B      #$66,D2         *put ascii f in D2
00000094  B202                      78      CMP.B       D2,D1           *compare ascii f and value of D1
00000096  6E2C                      79      BGT.B       INVALID_CHAR_ERROR *branch on invalid ascii value
00000098                            80  *------Result is between ascii 0 and f---------*
00000098  143C 0061                 81      MOVE.B      #$61,D2         *put ascii a in D2
0000009C  B202                      82      CMP.B       D2,D1           *compare ascii a and value of D1
0000009E  6C00 0046                 83      BGE         VALID_LETTER_LC *value is between a and f. Loop back.
000000A2                            84      
000000A2  143C 0039                 85      MOVE.B      #$39,D2         *put ascii 9 in D2
000000A6  B202                      86      CMP.B       D2,D1           *compare ascii 9 and value of D1
000000A8  6F00 002C                 87      BLE         VALID_NUMBER    *value between 0 and 9. Loop back.
000000AC                            88  
000000AC  143C 0041                 89      MOVE.B      #$41,D2         *put ascii A into D2
000000B0  B202                      90      CMP.B       D2,D1           *compare ascii A and value of D1
000000B2  6D00 0010                 91      BLT         INVALID_CHAR_ERROR    *value between 9 and A (Invalid)
000000B6                            92      
000000B6  143C 0046                 93      MOVE.B      #$46,D2         *put ascii F into D2
000000BA  B202                      94      CMP.B       D2,D1           *compare ascii F and value of D1
000000BC  6E00 0006                 95      BGT         INVALID_CHAR_ERROR    *value between F and a (Invalid)
000000C0                            96           
000000C0  6000 001C                 97      BRA         VALID_LETTER_UC *value is between A and F        
000000C4                            98  INVALID_CHAR_ERROR   
Line 99 ERROR: Undefined symbol
000000C4  43F9 004DBB8E             99      LEA         M_INVALID,A1    *load error message
000000CA  103C 000E                100      MOVE.B      #14,D0          *display string trap
000000CE  4E4F                     101      TRAP        #15             *output error message
000000D0  183C 0001                102      MOVE.B      #1,D4           *put invalid output in result register
000000D4  4E75                     103      RTS
000000D6                           104  VALID_NUMBER
000000D6  0401 0030                105      SUB.B       #$30,D1         *get actual value from ascii value
000000DA  6000 0012                106      BRA         VALID_CHAR      *read the next char in string
000000DE                           107  VALID_LETTER_UC
000000DE  0401 0037                108      SUB.B       #$37,D1         *get actual value from ascii value
000000E2  6000 000A                109      BRA         VALID_CHAR      *read the next char in string    
000000E6                           110  VALID_LETTER_LC
000000E6  0401 0057                111      SUB.B       #$57,D1         *get actual value from ascii value
000000EA  6000 0002                112      BRA         VALID_CHAR      *read the next char in string   
000000EE                           113  VALID_CHAR
000000EE  183C 0000                114      MOVE.B      #0,D4           *return valid value entry in D4    
000000F2  E98B                     115      LSL.L       #4,D3           *put hex digit in proper place
000000F4  D681                     116      ADD.L       D1,D3           *put new total in D3
000000F6  5289                     117      ADD.L       #1,A1           *increment address
000000F8  B8C9                     118      CMP         A1,A4           *if A1 > A4
000000FA  6E80                     119      BGT         READ_CHAR_LOOP  *begin converting to float    
000000FC  4E75                     120      RTS                         *loop back to INPUT_START || INPUT_END   
000000FE                           121     
000000FE                           122  TEST
Line 123 ERROR: Undefined symbol
000000FE  23FC 00003000 00544480   123      MOVE.L      #$3000,MEM_START
Line 124 ERROR: Undefined symbol
00000108  23FC 00003300 00544480   124      MOVE.L      #$3300,MEM_END
00000112                           125  READ_MEMORY   
Line 126 ERROR: Undefined symbol
00000112  2479 004DBB8E            126      MOVEA.L     MEM_START,A2    *A2 will be the starting/current address
Line 127 ERROR: Undefined symbol
00000118  2679 004DBB8E            127      MOVEA.L     MEM_END,A3      *A3 will act as the ending address
0000011E                           128      
0000011E                           129  VALIDATE_START_END
0000011E  220A                     130      MOVE.L      A2,D1           *copy start address into D1
00000120  240B                     131      MOVE.L      A3,D2           *copy end address into D2
00000122  B441                     132      CMP         D1,D2           *compare start and end values
00000124  6700 0006                133      BEQ         EQUAL_ERROR     *Start address is equal to end address
Line 134 ERROR: Invalid opcode
00000128                           134      BM         SWAP_VALUES     *Start address is larger than end address
00000128  6000 002E                135      BRA         PRE_READ_MEMORY *begin reading memory
0000012C                           136      
0000012C                           137  EQUAL_ERROR
Line 138 ERROR: Undefined symbol
0000012C  43F9 004DBB8E            138      LEA         M_EQUAL,A1      *load error message
00000132  103C 000E                139      MOVE.B      #14,D0          *display string trap
00000136  4E4F                     140      TRAP        #15             *output error message
00000138  6000 FEC6                141      BRA         INPUT_START     *restart program (request ui again)
0000013C                           142      
0000013C                           143  SWAP_VALUES
Line 144 ERROR: Undefined symbol
0000013C  2239 004DBB8E            144      MOVE.L      MEM_START,D1    *put starting address in D1
Line 145 ERROR: Undefined symbol
00000142  2439 004DBB8E            145      MOVE.L      MEM_END,D2      *put ending address in D2
Line 146 ERROR: Undefined symbol
00000148  23C2 00544498            146      MOVE.L      D2,MEM_START    *swap the two values in memory
Line 147 ERROR: Undefined symbol
0000014E  23C1 00544480            147      MOVE.L      D1,MEM_END
00000154  2442                     148      MOVEA.L     D2,A2           *A2 will be the starting/current address
00000156  2641                     149      MOVEA.L     D1,A3           *A3 will act as the ending address
00000158                           150  PRE_READ_MEMORY
00000158  2C4A                     151      MOVE.L      A2,A6           *A6 will act as the current address for Data               
0000015A                           152  READ_MEMORY_LOOP
Line 153 ERROR: Undefined symbol
0000015A  2679 004DBB8E            153      MOVE.L      MEM_END,A3        *put ending address in A3
00000160  B6CA                     154      CMP         A2,A3             *compare the incrementing address and the end address
00000162  6D00 0020                155      BLT         CONTINUE_YN       *stop if the end address is reached
00000166                           156      
00000166  E05E                     157      ROR         #8,D6               *select correct byte
00000168  BC3C 001E                158      CMP.B       #30,D6              *see if maximum lines printed
0000016C  6C00 0048                159      BGE         PRESS_TO_CONTINUE
00000170  E15E                     160      ROL         #8,D6   
00000172                           161  READ_MEMORY_CONT                    *continue reading memory (if branched)  
00000172  101A                     162      MOVE.B      (A2)+,D0          *get the value from incrementing address 
00000174  E148                     163      LSL.W       #8,D0             *make room for the next byte of A2
00000176  1012                     164      MOVE.B      (A2),D0          *copy the rest of A2 to D0  
00000178  538A                     165      SUB.L       #1, A2
Line 166 ERROR: Undefined symbol
0000017A  47F9 004DBB8E            166      LEA         STRING_START,A3   *A3 will act as the string address  
Line 167 ERROR: Undefined symbol
00000180  6000 BA0C                167      BRA         VERIFY_OPCODE
00000184                           168      
00000184                           169      
00000184                           170          
00000184                           171  *VERIFY_OPCODE
00000184                           172  *-------------------------------------*
00000184                           173  *BEGIN
00000184                           174  *D0 will contain word with decodable opcode
00000184                           175  *A2 will act as the current address
00000184                           176  *if at any time the result is not an opcode,
00000184                           177  *branch to "INVALID_OPCODE"
00000184                           178  *-----Put opcode decode here----------*
00000184                           179  *END
00000184                           180  *A7 will be the address of the string that opcode is saved to
00000184                           181  *A6 will be the start of the DATA address
00000184                           182  *-------------------------------------*
00000184                           183  
00000184                           184  EFFECTIVE_ADDRESSING
00000184                           185  *-------------------------------------*
00000184                           186  *BEGIN
00000184                           187  *D0 will contain word with decodable opcode
00000184                           188  *A2 will act as the current address
00000184                           189  *if at any time the result is not an opcode,
00000184                           190  *branch to "INVALID_OPCODE"
00000184                           191  *-----Put opcode decode here----------*
00000184                           192  *END
00000184                           193  *A7 will be the address of the string that opcode is saved to 
00000184                           194  *A5 will be the start of the DATA address
00000184                           195  *-------------------------------------*
00000184                           196  
00000184                           197  
00000184                           198  CONTINUE_YN
Line 199 ERROR: Undefined symbol
00000184  43F9 004DBB8E            199      LEA         M_FINISHED,A1       *print out finished reading address
0000018A  103C 000E                200      MOVE.B      #14,D0
0000018E  4E4F                     201      TRAP        #15
Line 202 ERROR: Undefined symbol
00000190  43F9 004DBB8E            202      LEA         M_CONTINUE,A1        *ask the user if they want to read again
00000196  103C 000E                203      MOVE.B      #14,D0
0000019A  4E4F                     204      TRAP        #15
0000019C                           205     
0000019C  103C 0005                206      MOVE.B      #5,D0               *get user input
000001A0  4E4F                     207      TRAP        #15
000001A2  B23C 0059                208      CMP.B       #89,D1              *compare user input and ascii 'Y'
000001A6  6700 00F8                209      BEQ         RESTART             *
000001AA  B23C 0079                210      CMP.B       #121,D1             *compare user input with ascii 'y'
000001AE  6700 00F0                211      BEQ         RESTART         
Line 212 ERROR: Undefined symbol
000001B2  6000 B9DA                212      BRA         END
000001B6                           213      
000001B6                           214  PRESS_TO_CONTINUE
000001B6  1C3C 0000                215      MOVE.B      #00,D6              *reset counter
000001BA  E19E                     216      ROL.L       #8,D6               *put byte back in place
Line 217 ERROR: Undefined symbol
000001BC  43F9 004DBB8E            217      LEA         M_PRESS_CONT,A1     *load press key to continue messageu
000001C2  103C 000E                218      MOVE.B      #14,D0              *load into D0
000001C6  4E4F                     219      TRAP        #15                 *display message
000001C8  103C 0005                220      MOVE.B      #5,D0               *read single character from keyboard
000001CC  4E4F                     221      TRAP        #15    
000001CE  6100 0122                222      BSR         IM_NEW_LINE            *add new line
000001D2  6086                     223      BRA         READ_MEMORY_LOOP    *continue reading loop
000001D4                           224      
000001D4                           225  INCREMENT_LINE
000001D4  E09E                     226      ROR.L       #8,D6               *select correct byte
000001D6  5206                     227      ADD.B       #1,D6               *increment counter
000001D8  E19E                     228      ROL.L       #8,D6               *put byte back in place
000001DA  4E75                     229      RTS 
000001DC                           230      
000001DC                           231  *word != opcode
000001DC                           232  INVALID_OPCODE
000001DC  BC3C 0008                233      CMP.B       #8,D6               *check the loop increment counter
000001E0  6D00 000A                234      BLT         INVALID_OPCODE_CONT *less than long length. continue       
000001E4  6100 000E                235      BSR         PRINT_DATA          *long amount of data. print it.
000001E8  6000 FF70                236      BRA         READ_MEMORY_LOOP    *read the next byte
000001EC                           237  INVALID_OPCODE_CONT  
000001EC  528A                     238      ADD.L       #1,A2               *increment current address  
000001EE  5206                     239      ADD.B       #1,D6               *increment counter
000001F0  6000 FF68                240      BRA         READ_MEMORY_LOOP    *data cap not reached. read next byte.    
000001F4                           241      
000001F4                           242  PRINT_DATA
000001F4  1C3C 0000                243      MOVE.B      #00,D6              *reset the increment counter
000001F8  6100 0012                244      BSR         PRINT_DATA_ADDRESS       *print the data address
000001FC  6100 010E                245      BSR         TAB                 *insert a space
00000200  6100 0118                246      BSR         DATA                *print 'DATA'       
00000204  6100 0028                247      BSR         PRINT_DATA_LOOP     *print the data
00000208  61CA                     248      BSR         INCREMENT_LINE      *increment line counter (line was printed)
0000020A  4E75                     249      RTS
0000020C                           250  
0000020C                           251  PRINT_DATA_ADDRESS
0000020C  280E                     252      MOVE.L      A6,D4               *put the address in D4
0000020E  4243                     253      CLR         D3                  *counter for long
00000210  6000 0008                254      BRA         PRINT_ADDRESS_LOOP
00000214                           255  *print whatever's in D1
00000214                           256  PRINT_ADDRESS
00000214  280E                     257      MOVE.L      A6,D4               *put the address in D4
00000216  4243                     258      CLR         D3                  *counter for long
00000218  2C4A                     259      MOVE.L      A2, A6
0000021A                           260      
0000021A                           261  PRINT_ADDRESS_LOOP
0000021A  B67C 0004                262      CMP         #4,D3               *if long reached
0000021E  6C00 00B0                263      BGE         RETURN_TO_SUBROUTINE *exit loop
00000222  E19C                     264      ROL.L       #8,D4               *put ending byte at beginning
00000224  1204                     265      MOVE.B      D4,D1               *put byte in D1 for printing
00000226  6100 0022                266      BSR         OUTPUT_D1B          *print the first byte of D1
0000022A  5203                     267      ADD.B       #1,D3               *increment D3 (loop counter)
0000022C  60EC                     268      BRA         PRINT_ADDRESS_LOOP  *repeat loop         
0000022E                           269           
0000022E                           270  PRINT_DATA_LOOP
0000022E  121E                     271      MOVE.B      (A6)+,D1            *get the data
00000230  1401                     272      MOVE.B      D1,D2               *copy the data to D2
00000232  BDCA                     273      CMP.L       A2,A6               *if current address reached
00000234  6E00 000C                274      BGT         END_PRINT_DATA_LOOP *continue reading addresses 
00000238                           275                                      *otherwise keep printing the data
00000238  6100 0010                276      BSR         OUTPUT_D1B          *print byte in D1 in hex
0000023C                           277      *---print a space----*
0000023C  6100 00C2                278      BSR         IM_SPACE               *print a space                                
00000240  60EC                     279      BRA         PRINT_DATA_LOOP     *repeat loop
00000242                           280  
00000242                           281  END_PRINT_DATA_LOOP
00000242  2C4A                     282      MOVE.L      A2,A6               *set new address for data/opcode
00000244  6100 00AC                283      BSR         IM_NEW_LINE            *end line
00000248  4E75                     284      RTS                             *repeat loop   
0000024A                           285   
0000024A                           286  OUTPUT_D1B
0000024A                           287      *print the left character
0000024A  1401                     288      MOVE.B      D1,D2               *copy D1 to D2
0000024C  E809                     289      LSR.B       #4,D1               *get rid of right nibble  
0000024E  6100 0082                290      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
00000252  6100 0096                291      BSR         OUTPUT_CHAR         *print the char in D1
00000256                           292      *print the right character
00000256  E90A                     293      LSL.B       #4,D2               *get rid of left nibble
00000258  E80A                     294      LSR.B       #4,D2               *put right nibble in place
0000025A  1202                     295      MOVE.B      D2,D1               *put right nibble in D1
0000025C  6100 0074                296      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
00000260  6100 0088                297      BSR         OUTPUT_CHAR         *print the char in D1
00000264  4E75                     298      RTS
00000266                           299  VALID_OPCODE
00000266  BC3C 0000                300      CMP.B       #00,D6              *if leftover data not printed
0000026A  6700 0004                301      BEQ         PRINT_OPCODE_EA     *print just the opcode
0000026E  6184                     302      BSR         PRINT_DATA          *print unreadable data
00000270                           303                                      *and the opcode
00000270                           304  PRINT_OPCODE_EA    
00000270  548A                     305      ADD.L       #02,A2              *increment the current address because word is valid
00000272                           306  
00000272  1C3C 0000                307      MOVE.B      #00,D6              *reset the increment counter
00000276  619C                     308      BSR         PRINT_ADDRESS       *print the data address
00000278  6100 0092                309      BSR         TAB                 *insert a space
0000027C  6100 000E                310      BSR         PRINT_OPCODE        *print out hte opcode and eA
00000280  6100 FF52                311      BSR         INCREMENT_LINE      *increment line counter (line was printed)
00000284  6100 006C                312      BSR         IM_NEW_LINE
00000288  6000 FED0                313      BRA         READ_MEMORY_LOOP    *read next byte.
0000028C                           314      
0000028C                           315  
0000028C                           316  PRINT_OPCODE
Line 317 ERROR: Undefined symbol
0000028C  43F9 004DBB8E            317      LEA         STRING_START,A1     *put the starting address of the string into A1
00000292  103C 000E                318      MOVE.B      #14,D0              *print null terminated string into A
00000296  4E4F                     319      TRAP        #15                 *output to terminal
Line 320 ERROR: Undefined symbol
00000298  47F9 004DBB8E            320      LEA         STRING_START,A3     *reset the current string pointer
0000029E  4E75                     321      RTS
000002A0                           322      
000002A0                           323  RESTART
Line 324 ERROR: Undefined symbol
000002A0  43F9 004DBB8E            324      LEA         M_NEW_LINE,A1
000002A6  103C 000E                325      MOVE.B      #14,D0
000002AA  4E4F                     326      TRAP        #15
000002AC                           327  *Clear all the data registers
000002AC  4280                     328      CLR.L       D0
000002AE  4281                     329      CLR.L       D1
000002B0  4282                     330      CLR.L       D2
000002B2  4283                     331      CLR.L       D3
000002B4  4284                     332      CLR.L       D4
000002B6  4285                     333      CLR.L       D5
000002B8  4286                     334      CLR.L       D6
000002BA  4287                     335      CLR.L       D7
000002BC                           336  *clear all the address registers
000002BC  2040                     337      MOVE.L      D0,A0
000002BE  2240                     338      MOVE.L      D0,A1
000002C0  2440                     339      MOVE.L      D0,A2
000002C2  2640                     340      MOVE.L      D0,A3
000002C4  2840                     341      MOVE.L      D0,A4
000002C6  2A40                     342      MOVE.L      D0,A5
000002C8  2C40                     343      MOVE.L      D0,A6
000002CA  2E40                     344      MOVE.L      D0,A7
000002CC  6000 FD32                345      BRA         INPUT_START
000002D0                           346      
000002D0                           347  *-------------Return to subroutine----------------*    
000002D0                           348  RETURN_TO_SUBROUTINE
000002D0  4E75                     349      RTS
000002D2                           350    
000002D2                           351  *------Convert Number in D1 to ASCII------*
000002D2                           352  CONVERT_TO_ASCII
000002D2  B23C 0009                353      CMP.B       #9,D1           *compare value with 9
000002D6  6E00 000C                354      BGT         ALPH_CHAR       *convert to numeric ascii
000002DA  6000 0002                355      BRA         NUMERIC_CHAR    *convert to alphabetical ascii
000002DE                           356  NUMERIC_CHAR        
000002DE  0601 0030                357      ADD.B       #48,D1          *convert to ascii value
000002E2  4E75                     358      RTS                         *continue converting
000002E4                           359  ALPH_CHAR
000002E4  0601 0037                360      ADD.B       #55,D1          *convert to ascii value
000002E8  4E75                     361      RTS                         *continue converting            
000002EA                           362  OUTPUT_CHAR
000002EA  103C 0006                363      MOVE.B      #6,D0           *output whatever's in D1
000002EE  4E4F                     364      TRAP        #15
000002F0  4E75                     365      RTS
000002F2                           366  
000002F2                           367  
000002F2                           368  IM_NEW_LINE
Line 369 ERROR: Undefined symbol
000002F2  43F9 004DBB8E            369      LEA         M_NEW_LINE,A1      *load new line
000002F8  103C 000E                370      MOVE.B      #14,D0          *load message
000002FC  4E4F                     371      TRAP        #15             *display message
000002FE  4E75                     372      RTS
00000300                           373  IM_SPACE
00000300  123C 0020                374      MOVE.B      #32,D1
00000304  103C 0006                375      MOVE.B      #6,D0
00000308  4E4F                     376      TRAP        #15
0000030A  4E75                     377      RTS
0000030C                           378  TAB
Line 379 ERROR: Undefined symbol
0000030C  43F9 004DBB8E            379      LEA         M_TAB,A1
00000312  103C 000E                380      MOVE.B      #14,D0
00000316  4E4F                     381      TRAP        #15
00000318  4E75                     382      RTS
0000031A                           383  DATA
Line 384 ERROR: Undefined symbol
0000031A  43F9 004DBB8E            384      LEA         M_DATA,A1
00000320  103C 000E                385      MOVE.B      #14,D0
00000324  4E4F                     386      TRAP        #15
00000326  4E75                     387      RTS
00000328                           388      
00000328                           389  
00000328                           390  
00000328                           391  *    SIMHALT             ; halt simulator
00000328                           392  
00000328                           393  *CR          EQU     $0D
00000328                           394  *LF          EQU     $0A
00000328                           395  *
00000328                           396  *M_INPUT_START DC.B 'Please enter starting memory address in hexadecimal:',CR,LF,0
00000328                           397  *M_INPUT_END   DC.B 'Please enter ending memory address in hexadecimal:',CR,LF,0
00000328                           398  *M_INVALID     DC.B 'Invalid value. Please enter a valid value: ',CR,LF,0
00000328                           399  *M_EQUAL       DC.B 'Equal values. No memory read. Please enter new values',CR,LF,0
00000328                           400  *M_DATA        DC.B 'DATA    ',0
00000328                           401  *M_TAB         DC.B '    ',0
00000328                           402  *M_PRESS_CONT  DC.B 'Press any key to continue',0
00000328                           403  *M_FINISHED    DC.B 'Finished Reading Memory',0
00000328                           404  *M_CONTINUE    DC.B 'Would you like to read memory again? (Y/N)',0
00000328                           405  *
00000328                           406  *STRING_START    EQU     $0500
00000328                           407  *DATA_START      EQU     $0400
00000328                           408  *
00000328                           409  *MEM_START       EQU     $0100
00000328                           410  *MEM_END         EQU     $0200
00000328                           411  *
00000328                           412  *M_SPACE       DC.B  ' ',0
00000328                           413  *M_NEW_LINE    DC.B  '',CR,LF,0
00000328                           414  
00000328                           415  
00000328                           416  
00000328                           417  
00000328                           418  
00000328                           419  
00000328                           420  
00000328                           421  
00000328                           422  
00000328                           423  
00000328                           424  
00000328                           425  
00000328                           426  
00000328                           427  
00000328                           428  
00000328                           429  
00000328                           430  
00000328                           431  
00000328                           432  
00000328                           433  
00000328                           434  
00000328                           435  
00000328                           436  
00000328                           437  
00000328                           438  
00000328                           439  
00000328                           440  
00000328                           441  
Line 442 WARNING: END directive missing, starting address not set

28 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ALPH_CHAR           2E4
CONTINUE_YN         184
CONVERT_TO_ASCII    2D2
DATA                31A
EFFECTIVE_ADDRESSING  184
END_PRINT_DATA_LOOP  242
EQUAL_ERROR         12C
GET_NEXT_INPUT      58
IM_NEW_LINE         2F2
IM_SPACE            300
INCREMENT_LINE      1D4
INPUT_END           2C
INPUT_START         0
INVALID_CHAR_ERROR  C4
INVALID_OPCODE      1DC
INVALID_OPCODE_CONT  1EC
NUMERIC_CHAR        2DE
OUTPUT_CHAR         2EA
OUTPUT_D1B          24A
PRESS_TO_CONTINUE   1B6
PRE_READ_MEMORY     158
PRINT_ADDRESS       214
PRINT_ADDRESS_LOOP  21A
PRINT_DATA          1F4
PRINT_DATA_ADDRESS  20C
PRINT_DATA_LOOP     22E
PRINT_OPCODE        28C
PRINT_OPCODE_EA     270
READ_CHAR           5A
READ_CHAR_LOOP      7C
READ_MEMORY         112
READ_MEMORY_CONT    172
READ_MEMORY_LOOP    15A
REMOVE_ZERO         76
REMOVE_ZEROES       64
RESTART             2A0
RETURN_TO_SUBROUTINE  2D0
SWAP_VALUES         13C
TAB                 30C
TEST                FE
VALIDATE_START_END  11E
VALID_CHAR          EE
VALID_LETTER_LC     E6
VALID_LETTER_UC     DE
VALID_NUMBER        D6
VALID_OPCODE        266
