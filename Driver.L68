00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/3/2016 12:07:31 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  MAIN:                  ; first instruction of program
00001000  1401                       9      MOVE.B          D1, D2
00001002  6000 0002                 10      BRA             INPUT_START
00001006                            11      
00001006                            12      INCLUDE         'Main.X68'
00001006                            13      
00001006                            14  
00001006                            15  INPUT_START
00001006  43F9 0000210A             16      LEA         M_INPUT_START,A1      *load message
0000100C  103C 000E                 17      MOVE.B      #14,D0          *display string
00001010  4E4F                      18      TRAP        #15             *output string
00001012  227C 00000300             19      MOVE.L      #$0300,A1       *set address of register A1 for string
00001018  103C 0002                 20      MOVE.B      #2,D0           *input string into A1 Trap
0000101C  4E4F                      21      TRAP        #15             *input string from user
0000101E  6100 0040                 22      BSR         READ_CHAR       *check for valid input
00001022  23C3 00000100             23      MOVE.L      D3,MEM_START    *put the starting address in memory
00001028  B87C 0000                 24      CMP         #0,D4           *check the result register (D4)
0000102C  6700 0004                 25      BEQ         INPUT_END       *valid value. read the ending value
00001030  60D4                      26      BRA         INPUT_START     *invalid value. try inputting start value again    
00001032                            27      
00001032                            28  INPUT_END
00001032  43F9 00002141             29      LEA         M_INPUT_END,A1  *load message
00001038  103C 000E                 30      MOVE.B      #14,D0          *display string
0000103C  4E4F                      31      TRAP        #15             *output string
0000103E  227C 00000300             32      MOVE.L      #$0300,A1       *set address of register A1 for string
00001044  103C 0002                 33      MOVE.B      #2,D0           *input string into A1 Trap
00001048  4E4F                      34      TRAP        #15             *input string from user
0000104A  6100 0014                 35      BSR         READ_CHAR       *check for valid input
0000104E  23C3 00000200             36      MOVE.L      D3,MEM_END      *put ending address into memory
00001054  B87C 0000                 37      CMP         #0,D4           *check the result register (D4)
00001058  6700 00BE                 38      BEQ         READ_MEMORY     *valid value. read the ending value
0000105C  60D4                      39      BRA         INPUT_END       *invalid value. try inputting start value again    
0000105E                            40      
0000105E                            41  GET_NEXT_INPUT
0000105E  4E75                      42      RTS
00001060                            43  
00001060                            44  READ_CHAR                       *verify that string is valid (all hexadecimal digits)
00001060  4243                      45      CLR         D3              *D3 will act as the total result
00001062  2849                      46      MOVE.L      A1,A4           *the stop address
00001064  143C 0006                 47      MOVE.B      #6,D2           *put 6 in D2
00001068  D8C2                      48      ADD.W       D2,A4           *A4 is now the stop address(A4)
0000106A                            49      
0000106A                            50  REMOVE_ZEROES
0000106A  4281                      51      CLR.L       D1              *D1 will act as the temporary value
0000106C  1211                      52      MOVE.B      (A1),D1         *read the byte from string
0000106E  143C 0030                 53      MOVE.B      #$30,D2         *put ascii zero in D2
00001072  B202                      54      CMP.B       D2,D1           *compare ascii zero and value of D1
00001074  6700 0006                 55      BEQ         REMOVE_ZERO     *skip over that character   
00001078  6000 0008                 56      BRA         READ_CHAR_LOOP  *begin converting characters to numerical values
0000107C                            57  REMOVE_ZERO
0000107C  5289                      58      ADD.L       #1,A1           *increment string start address
0000107E  528C                      59      ADD.L       #1,A4           *increment string end address
00001080  60E8                      60      BRA         REMOVE_ZEROES   *loop back and keep removing zeroes
00001082                            61  READ_CHAR_LOOP     
00001082  4281                      62      CLR.L       D1              *D1 will act as the temporary value
00001084  1211                      63      MOVE.B      (A1),D1         *read the byte from string
00001086  B27C 0000                 64      CMP         #0,D1           *compare 00 (NULL) and the byte ascii value in D1
0000108A  67D2                      65      BEQ         GET_NEXT_INPUT    *if you reached the end of the string, end loop
0000108C                            66      
0000108C  143C 0030                 67      MOVE.B      #$30,D2         *put ascii zero in D2
00001090  B202                      68      CMP.B       D2,D1           *compare ascii zero and value of D1
00001092  6D00 0036                 69      BLT         INVALID_CHAR_ERROR *branch on invalid (too small) ascii value   
00001096  143C 0066                 70      MOVE.B      #$66,D2         *put ascii f in D2
0000109A  B202                      71      CMP.B       D2,D1           *compare ascii f and value of D1
0000109C  6E2C                      72      BGT.B       INVALID_CHAR_ERROR *branch on invalid ascii value
0000109E  143C 0061                 73      MOVE.B      #$61,D2         *put ascii a in D2
000010A2  B202                      74      CMP.B       D2,D1           *compare ascii a and value of D1
000010A4  6C00 0046                 75      BGE         VALID_LETTER_LC *value is between a and f. Loop back.
000010A8                            76      
000010A8  143C 0039                 77      MOVE.B      #$39,D2         *put ascii 9 in D2
000010AC  B202                      78      CMP.B       D2,D1           *compare ascii 9 and value of D1
000010AE  6F00 002C                 79      BLE         VALID_NUMBER    *value between 0 and 9. Loop back.
000010B2                            80  
000010B2  143C 0041                 81      MOVE.B      #$41,D2         *put ascii A into D2
000010B6  B202                      82      CMP.B       D2,D1           *compare ascii A and value of D1
000010B8  6D00 0010                 83      BLT         INVALID_CHAR_ERROR    *value between 9 and A (Invalid)
000010BC                            84      
000010BC  143C 0046                 85      MOVE.B      #$46,D2         *put ascii F into D2
000010C0  B202                      86      CMP.B       D2,D1           *compare ascii F and value of D1
000010C2  6E00 0006                 87      BGT         INVALID_CHAR_ERROR    *value between F and a (Invalid)
000010C6                            88           
000010C6  6000 001C                 89      BRA         VALID_LETTER_UC *value is between A and F        
000010CA                            90  INVALID_CHAR_ERROR   
000010CA  43F9 00002176             91      LEA         M_INVALID,A1    *load error message
000010D0  103C 000E                 92      MOVE.B      #14,D0          *display string trap
000010D4  4E4F                      93      TRAP        #15             *output error message
000010D6  183C 0001                 94      MOVE.B      #1,D4           *put invalid output in result register
000010DA  4E75                      95      RTS
000010DC                            96  VALID_NUMBER
000010DC  0401 0030                 97      SUB.B       #$30,D1         *get actual value from ascii value
000010E0  6000 0012                 98      BRA         VALID_CHAR      *read the next char in string
000010E4                            99  VALID_LETTER_UC
000010E4  0401 0037                100      SUB.B       #$37,D1         *get actual value from ascii value
000010E8  6000 000A                101      BRA         VALID_CHAR      *read the next char in string    
000010EC                           102  VALID_LETTER_LC
000010EC  0401 0057                103      SUB.B       #$57,D1         *get actual value from ascii value
000010F0  6000 0002                104      BRA         VALID_CHAR      *read the next char in string   
000010F4                           105  VALID_CHAR
000010F4  183C 0000                106      MOVE.B      #0,D4           *return valid value entry in D4    
000010F8  E98B                     107      LSL.L       #4,D3           *put hex digit in proper place
000010FA  D681                     108      ADD.L       D1,D3           *put new total in D3
000010FC  5289                     109      ADD.L       #1,A1           *increment address
000010FE  B8C9                     110      CMP         A1,A4           *if A1 > A4
00001100  6E80                     111      BGT         READ_CHAR_LOOP  *begin converting to float    
00001102  4E75                     112      RTS                         *loop back to INPUT_START || INPUT_END   
00001104                           113     
00001104                           114  TEST
00001104  23FC 00003000 00000100   115      MOVE.L      #$3000,MEM_START
0000110E  23FC 00003300 00000200   116      MOVE.L      #$3300,MEM_END
00001118                           117  READ_MEMORY   
00001118  2479 00000100            118      MOVEA.L     MEM_START,A2    *A2 will be the starting/current address
0000111E  2679 00000200            119      MOVEA.L     MEM_END,A3      *A3 will act as the ending address
00001124                           120      
00001124                           121  VALIDATE_START_END
00001124  220A                     122      MOVE.L      A2,D1           *copy start address into D1
00001126  240B                     123      MOVE.L      A3,D2           *copy end address into D2
00001128  B441                     124      CMP         D1,D2           *compare start and end values
0000112A  6700 000A                125      BEQ         EQUAL_ERROR     *Start address is equal to end address
0000112E  6B00 0016                126      BMI         SWAP_VALUES     *Start address is larger than end address
00001132  6000 002E                127      BRA         PRE_READ_MEMORY *begin reading memory
00001136                           128      
00001136                           129  EQUAL_ERROR
00001136  43F9 000021A4            130      LEA         M_EQUAL,A1      *load error message
0000113C  103C 000E                131      MOVE.B      #14,D0          *display string trap
00001140  4E4F                     132      TRAP        #15             *output error message
00001142  6000 FEC2                133      BRA         INPUT_START     *restart program (request ui again)
00001146                           134      
00001146                           135  SWAP_VALUES
00001146  2239 00000100            136      MOVE.L      MEM_START,D1    *put starting address in D1
0000114C  2439 00000200            137      MOVE.L      MEM_END,D2      *put ending address in D2
00001152  23C2 00000100            138      MOVE.L      D2,MEM_START    *swap the two values in memory
00001158  23C1 00000200            139      MOVE.L      D1,MEM_END
0000115E  2442                     140      MOVEA.L     D2,A2           *A2 will be the starting/current address
00001160  2641                     141      MOVEA.L     D1,A3           *A3 will act as the ending address
00001162                           142  PRE_READ_MEMORY
00001162  2C4A                     143      MOVE.L      A2,A6           *A6 will act as the current address for Data               
00001164                           144  READ_MEMORY_LOOP
00001164  2679 00000200            145      MOVE.L      MEM_END,A3        *put ending address in A3
0000116A  B7CA                     146      CMP.L       A2,A3             *compare the incrementing address and the end address
0000116C  6D00 0020                147      BLT         CONTINUE_YN       *stop if the end address is reached
00001170                           148      
00001170  E05E                     149      ROR         #8,D6               *select correct byte
00001172  BC3C 001E                150      CMP.B       #30,D6              *see if maximum lines printed
00001176  6C00 0048                151      BGE         PRESS_TO_CONTINUE
0000117A  E15E                     152      ROL         #8,D6   
0000117C                           153  READ_MEMORY_CONT                    *continue reading memory (if branched)  
0000117C  101A                     154      MOVE.B      (A2)+,D0          *get the value from incrementing address 
0000117E  E148                     155      LSL.W       #8,D0             *make room for the next byte of A2
00001180  1012                     156      MOVE.B      (A2),D0          *copy the rest of A2 to D0  
00001182  538A                     157      SUB.L       #1, A2
00001184  47F9 00000500            158      LEA         STRING_START,A3   *A3 will act as the string address  
0000118A  6000 01A6                159      BRA         VERIFY_OPCODE
0000118E                           160      
0000118E                           161      
0000118E                           162          
0000118E                           163  
0000118E                           164  EFFECTIVE_ADDRESSING
0000118E                           165  
0000118E                           166  
0000118E                           167  CONTINUE_YN
0000118E  43F9 00002204            168      LEA         M_FINISHED,A1       *print out finished reading address
00001194  103C 000E                169      MOVE.B      #14,D0
00001198  4E4F                     170      TRAP        #15
0000119A  43F9 0000221E            171      LEA         M_CONTINUE,A1        *ask the user if they want to read again
000011A0  103C 000E                172      MOVE.B      #14,D0
000011A4  4E4F                     173      TRAP        #15
000011A6                           174     
000011A6  103C 0005                175      MOVE.B      #5,D0               *get user input
000011AA  4E4F                     176      TRAP        #15
000011AC  B23C 0059                177      CMP.B       #89,D1              *compare user input and ascii 'Y'
000011B0  6700 00F8                178      BEQ         RESTART             *
000011B4  B23C 0079                179      CMP.B       #121,D1             *compare user input with ascii 'y'
000011B8  6700 00F0                180      BEQ         RESTART         
000011BC  6000 0F38                181      BRA         END
000011C0                           182      
000011C0                           183  PRESS_TO_CONTINUE
000011C0  1C3C 0000                184      MOVE.B      #00,D6              *reset counter
000011C4  E19E                     185      ROL.L       #8,D6               *put byte back in place
000011C6  43F9 000021EA            186      LEA         M_PRESS_CONT,A1     *load press key to continue messageu
000011CC  103C 000E                187      MOVE.B      #14,D0              *load into D0
000011D0  4E4F                     188      TRAP        #15                 *display message
000011D2  103C 0005                189      MOVE.B      #5,D0               *read single character from keyboard
000011D6  4E4F                     190      TRAP        #15    
000011D8  6100 0122                191      BSR         IM_NEW_LINE            *add new line
000011DC  6086                     192      BRA         READ_MEMORY_LOOP    *continue reading loop
000011DE                           193      
000011DE                           194  INCREMENT_LINE
000011DE  E09E                     195      ROR.L       #8,D6               *select correct byte
000011E0  5206                     196      ADD.B       #1,D6               *increment counter
000011E2  E19E                     197      ROL.L       #8,D6               *put byte back in place
000011E4  4E75                     198      RTS 
000011E6                           199      
000011E6                           200  INVALID_OPCODE
000011E6  BC3C 0008                201      CMP.B       #8,D6               *check the loop increment counter
000011EA  6D00 000A                202      BLT         INVALID_OPCODE_CONT *less than long length. continue       
000011EE  6100 000E                203      BSR         PRINT_DATA          *long amount of data. print it.
000011F2  6000 FF70                204      BRA         READ_MEMORY_LOOP    *read the next byte
000011F6                           205  INVALID_OPCODE_CONT  
000011F6  528A                     206      ADD.L       #1,A2               *increment current address  
000011F8  5206                     207      ADD.B       #1,D6               *increment counter
000011FA  6000 FF68                208      BRA         READ_MEMORY_LOOP    *data cap not reached. read next byte.    
000011FE                           209      
000011FE                           210  PRINT_DATA
000011FE  1C3C 0000                211      MOVE.B      #00,D6              *reset the increment counter
00001202  6100 0012                212      BSR         PRINT_DATA_ADDRESS       *print the data address
00001206  6100 010E                213      BSR         TAB                 *insert a space
0000120A  6100 0118                214      BSR         DATA                *print 'DATA'       
0000120E  6100 0028                215      BSR         PRINT_DATA_LOOP     *print the data
00001212  61CA                     216      BSR         INCREMENT_LINE      *increment line counter (line was printed)
00001214  4E75                     217      RTS
00001216                           218  
00001216                           219  PRINT_DATA_ADDRESS
00001216  280E                     220      MOVE.L      A6,D4               *put the address in D4
00001218  4243                     221      CLR         D3                  *counter for long
0000121A  6000 0008                222      BRA         PRINT_ADDRESS_LOOP
0000121E                           223  PRINT_ADDRESS
0000121E  280E                     224      MOVE.L      A6,D4               *put the address in D4
00001220  4243                     225      CLR         D3                  *counter for long
00001222  2C4A                     226      MOVE.L      A2, A6
00001224                           227      
00001224                           228  PRINT_ADDRESS_LOOP
00001224  B67C 0004                229      CMP         #4,D3               *if long reached
00001228  6C00 00B0                230      BGE         RETURN_TO_SUBROUTINE *exit loop
0000122C  E19C                     231      ROL.L       #8,D4               *put ending byte at beginning
0000122E  1204                     232      MOVE.B      D4,D1               *put byte in D1 for printing
00001230  6100 0022                233      BSR         OUTPUT_D1B          *print the first byte of D1
00001234  5203                     234      ADD.B       #1,D3               *increment D3 (loop counter)
00001236  60EC                     235      BRA         PRINT_ADDRESS_LOOP  *repeat loop         
00001238                           236           
00001238                           237  PRINT_DATA_LOOP
00001238  121E                     238      MOVE.B      (A6)+,D1            *get the data
0000123A  1401                     239      MOVE.B      D1,D2               *copy the data to D2
0000123C  BDCA                     240      CMP.L       A2,A6               *if current address reached
0000123E  6E00 000C                241      BGT         END_PRINT_DATA_LOOP *continue reading addresses 
00001242                           242                                      *otherwise keep printing the data
00001242  6100 0010                243      BSR         OUTPUT_D1B          *print byte in D1 in hex
00001246                           244      *---print a space----*
00001246  6100 00C2                245      BSR         IM_SPACE               *print a space                                
0000124A  60EC                     246      BRA         PRINT_DATA_LOOP     *repeat loop
0000124C                           247  
0000124C                           248  END_PRINT_DATA_LOOP
0000124C  2C4A                     249      MOVE.L      A2,A6               *set new address for data/opcode
0000124E  6100 00AC                250      BSR         IM_NEW_LINE            *end line
00001252  4E75                     251      RTS                             *repeat loop   
00001254                           252   
00001254                           253  OUTPUT_D1B
00001254                           254      *print the left character
00001254  1401                     255      MOVE.B      D1,D2               *copy D1 to D2
00001256  E809                     256      LSR.B       #4,D1               *get rid of right nibble  
00001258  6100 0082                257      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
0000125C  6100 0096                258      BSR         OUTPUT_CHAR         *print the char in D1
00001260                           259      *print the right character
00001260  E90A                     260      LSL.B       #4,D2               *get rid of left nibble
00001262  E80A                     261      LSR.B       #4,D2               *put right nibble in place
00001264  1202                     262      MOVE.B      D2,D1               *put right nibble in D1
00001266  6100 0074                263      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
0000126A  6100 0088                264      BSR         OUTPUT_CHAR         *print the char in D1
0000126E  4E75                     265      RTS
00001270                           266  VALID_OPCODE
00001270  BC3C 0000                267      CMP.B       #00,D6              *if leftover data not printed
00001274  6700 0004                268      BEQ         PRINT_OPCODE_EA     *print just the opcode
00001278  6184                     269      BSR         PRINT_DATA          *print unreadable data
0000127A                           270                                      *and the opcode
0000127A                           271  PRINT_OPCODE_EA    
0000127A  548A                     272      ADD.L       #02,A2              *increment the current address because word is valid
0000127C                           273  
0000127C  1C3C 0000                274      MOVE.B      #00,D6              *reset the increment counter
00001280  619C                     275      BSR         PRINT_ADDRESS       *print the data address
00001282  6100 0092                276      BSR         TAB                 *insert a space
00001286  6100 000E                277      BSR         PRINT_OPCODE        *print out hte opcode and eA
0000128A  6100 FF52                278      BSR         INCREMENT_LINE      *increment line counter (line was printed)
0000128E  6100 006C                279      BSR         IM_NEW_LINE
00001292  6000 FED0                280      BRA         READ_MEMORY_LOOP    *read next byte.
00001296                           281      
00001296                           282  
00001296                           283  PRINT_OPCODE
00001296  43F9 00000500            284      LEA         STRING_START,A1     *put the starting address of the string into A1
0000129C  103C 000E                285      MOVE.B      #14,D0              *print null terminated string into A
000012A0  4E4F                     286      TRAP        #15                 *output to terminal
000012A2  47F9 00000500            287      LEA         STRING_START,A3     *reset the current string pointer
000012A8  4E75                     288      RTS
000012AA                           289      
000012AA                           290  RESTART
000012AA  43F9 0000225A            291      LEA         M_NEW_LINE,A1
000012B0  103C 000E                292      MOVE.B      #14,D0
000012B4  4E4F                     293      TRAP        #15
000012B6  4280                     294      CLR.L       D0
000012B8  4281                     295      CLR.L       D1
000012BA  4282                     296      CLR.L       D2
000012BC  4283                     297      CLR.L       D3
000012BE  4284                     298      CLR.L       D4
000012C0  4285                     299      CLR.L       D5
000012C2  4286                     300      CLR.L       D6
000012C4  4287                     301      CLR.L       D7
000012C6  2040                     302      MOVE.L      D0,A0
000012C8  2240                     303      MOVE.L      D0,A1
000012CA  2440                     304      MOVE.L      D0,A2
000012CC  2640                     305      MOVE.L      D0,A3
000012CE  2840                     306      MOVE.L      D0,A4
000012D0  2A40                     307      MOVE.L      D0,A5
000012D2  2C40                     308      MOVE.L      D0,A6
000012D4  2E40                     309      MOVE.L      D0,A7
000012D6  6000 FD2E                310      BRA         INPUT_START
000012DA                           311      
000012DA                           312  RETURN_TO_SUBROUTINE
000012DA  4E75                     313      RTS
000012DC                           314    
000012DC                           315  CONVERT_TO_ASCII
000012DC  B23C 0009                316      CMP.B       #9,D1           *compare value with 9
000012E0  6E00 000C                317      BGT         ALPH_CHAR       *convert to numeric ascii
000012E4  6000 0002                318      BRA         NUMERIC_CHAR    *convert to alphabetical ascii
000012E8                           319  NUMERIC_CHAR        
000012E8  0601 0030                320      ADD.B       #48,D1          *convert to ascii value
000012EC  4E75                     321      RTS                         *continue converting
000012EE                           322  ALPH_CHAR
000012EE  0601 0037                323      ADD.B       #55,D1          *convert to ascii value
000012F2  4E75                     324      RTS                         *continue converting            
000012F4                           325  OUTPUT_CHAR
000012F4  103C 0006                326      MOVE.B      #6,D0           *output whatever's in D1
000012F8  4E4F                     327      TRAP        #15
000012FA  4E75                     328      RTS
000012FC                           329  
000012FC                           330  
000012FC                           331  IM_NEW_LINE
000012FC  43F9 0000225A            332      LEA         M_NEW_LINE,A1      *load new line
00001302  103C 000E                333      MOVE.B      #14,D0          *load message
00001306  4E4F                     334      TRAP        #15             *display message
00001308  4E75                     335      RTS
0000130A                           336  IM_SPACE
0000130A  123C 0020                337      MOVE.B      #32,D1
0000130E  103C 0006                338      MOVE.B      #6,D0
00001312  4E4F                     339      TRAP        #15
00001314  4E75                     340      RTS
00001316                           341  TAB
00001316  43F9 000021E5            342      LEA         M_TAB,A1
0000131C  103C 000E                343      MOVE.B      #14,D0
00001320  4E4F                     344      TRAP        #15
00001322  4E75                     345      RTS
00001324                           346  DATA
00001324  43F9 000021DC            347      LEA         M_DATA,A1
0000132A  103C 000E                348      MOVE.B      #14,D0
0000132E  4E4F                     349      TRAP        #15
00001330  4E75                     350      RTS
00001332                           351      
00001332                           352  
00001332                           353  
00001332                           354  
00001332                           355  
00001332                           356  
00001332                           357  
00001332                           358  
00001332                           359  
00001332                           360  
00001332                           361  
00001332                           362  
00001332                           363  
00001332                           364  
00001332                           365  
00001332                           366  
00001332                           367  
00001332                           368  
00001332                           369  
00001332                           370  
00001332                           371  
00001332                           372  
00001332                           373  
00001332                           374  
00001332                           375  
00001332                           376  
00001332                           377  
00001332                           378  
00001332                           379  
00001332                           380  
00001332                           381  
00001332                           382  
00001332                           383  
00001332                           384  -------------------- end include --------------------
00001332                           385      INCLUDE         'OP_jumpTable.X68'
00001332                           386  VERIFY_OPCODE
00001332  3200                     387      MOVE.W  D0,D1   *Copy instruction for modification
00001334                           388      
00001334                           389      **ISOLATE BITS F-C**                                             
00001334  E849                     390      LSR.W   #4,D1       *Shift right four bits
00001336  E049                     391      LSR.W   #8,D1       *Shift right again (12 shifts total)
00001338                           392      
00001338  4242                     393      CLR     D2
0000133A  1401                     394      MOVE.B  D1,D2       *Copy bits to jump table instruction register(D2)
0000133C                           395      
0000133C  41F9 0000134A            396      LEA     OP_JTAB,A0  *Load the jump table 
00001342  C5FC 0006                397      MULS    #6, D2      *Get the offset
00001346  4EB0 2000                398      JSR     0(A0,D2)    *Go to jump table address
0000134A                           399  
0000134A                           400  
0000134A                           401  
0000134A  4EF9 000013AE            402  OP_JTAB     JMP     OP0000       *ADDI
00001350  4EF9 000013BE            403              JMP     OP0001              *MOVE.B
00001356  4EF9 000013CE            404              JMP     OP0010              *MOVE.W, MOVEA(WORD)
0000135C  4EF9 000013D2            405              JMP     OP0011              *MOVE.L, MOVEA(LONG) 
00001362  4EF9 0000140A            406              JMP     OP0100              *NOP, MOVEM, LEA, CLR, JSR, RTS
00001368  4EF9 000014BA            407              JMP     OP0101              *ADDQ
0000136E  4EF9 000014CA            408              JMP     OP0110              *Bcc
00001374  4EF9 000014E4            409              JMP     OP0111              *MOVEQ
0000137A  4EF9 000014F4            410              JMP     OP1000              *DIVU, OR
00001380  4EF9 0000152A            411              JMP     OP1001              *SUB
00001386  4EF9 0000153A            412              JMP     OP1010              *this is necessary for the jump table 
0000138C  4EF9 0000153E            413              JMP     OP1011              *CMP
00001392  4EF9 0000154E            414              JMP     OP1100              *MULS, AND
00001398  4EF9 00001586            415              JMP     OP1101              *ADD, ADDA
0000139E  4EF9 000015BE            416              JMP     OP1110              *LSR, LSL, ASR, ASL, ROL, ROR
000013A4  4EF8 11E6                417              JMP     INVALID_OPCODE      *No required opcodes
000013A8                           418  
000013A8                           419  
000013A8  4EF8 11E6                420      JMP    INVALID_OPCODE     *If you're reading this line, it's invalid.
000013AC  4E75                     421      RTS
000013AE                           422  
000013AE                           423  OP0000
000013AE                           424      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000013AE                           425      *BEGIN OUTPUT
000013AE                           426      
000013AE                           427      *MOVE.W  ADDI,(A3)+     *Load 'ADDI' to Add Reg 1 and then increment
000013AE  49F9 0000225D            428      LEA     ADDI, A4        *Load output string to A4
000013B4  4EB9 000016AC            429      JSR     PASTE_4
000013BA  6000 04E4                430      BRA     EA_ADDI         *Branch to EA analysis of the command
000013BE                           431  
000013BE                           432  OP0001  *SINGLE CODE, DO NOT NEED FURTHER CHECKING 
000013BE                           433          *BEGIN OUTPUT
000013BE                           434      
000013BE                           435      *MOVE.L  MOVE,(A3)+     *Load 'MOVE.B' to Add Reg 1 and then increment
000013BE  49F9 00002262            436      LEA     MOVE, A4        *Load output string to A4
000013C4  4EB9 000016AC            437      JSR     PASTE_4
000013CA  6000 02FA                438      BRA     EA_MOVE         *Branch to EA analysis of the command
000013CE                           439  
000013CE                           440  OP0010
000013CE                           441      *Identical to OP0011 for these purposes, branch there
000013CE  6000 0002                442      BRA OP0011
000013D2                           443  
000013D2                           444  OP0011
000013D2                           445      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000013D2                           446  
000013D2                           447      **ISOLATE NEXT BITS TO CHECK**
000013D2  3200                     448      MOVE.W  D0,D1           *Copy instruction for modification
000013D4  EF49                     449      LSL.W   #7,D1           *Shift left 7 bits 
000013D6  EA49                     450      LSR.W   #5,D1           *Rotate right 5 bits
000013D8  E049                     451      LSR.W   #8,D1           *Shift right again (13 shifts total)
000013DA  0241 000F                452      ANDI.W  #$00F,D1        *Keep 3 bits
000013DE                           453      
000013DE  B27C 0001                454      CMP     #%001,D1      *Check for 0010 to eliminate CLR
000013E2  6700 0016                455      BEQ     _MOVEA          *If equal, branch to CLR
000013E6                           456      
000013E6  6000 0002                457      BRA     _MOVE
000013EA                           458      
000013EA                           459  _MOVE
000013EA                           460      *MOVE.L  MOVE,(A3)+     *Load 'MOVE.L' to Add Reg 1 and then increment  
000013EA  49F9 00002262            461      LEA     MOVE, A4        *Load output string to A4
000013F0  4EB9 000016AC            462      JSR     PASTE_4
000013F6  6000 02CE                463      BRA     EA_MOVE        *Branch to EA analysis of the command
000013FA                           464  
000013FA                           465  _MOVEA
000013FA                           466      *MOVE.L  MOVEA,(A3)+    *Load 'MOVEA.L' to Add Reg 1 and then increment
000013FA  49F9 00002267            467      LEA     MOVEA, A4        *Load output string to A4
00001400  4EB9 000016B6            468      JSR     PASTE_5
00001406  6000 0336                469      BRA     EA_MOVEA       *Branch to EA analysis of the command
0000140A                           470  
0000140A                           471  OP0100
0000140A                           472      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
0000140A  3200                     473       MOVE.W  D0,D1           *Copy instruction for modification
0000140C                           474      
0000140C  B27C 4E71                475      CMP     #%0100111001110001,D1   *Check to eliminate NOP
00001410  6700 0070                476      BEQ     _NOP
00001414  B27C 4E75                477      CMP     #%0100111001110101,D1   *Check to eliminate RTS
00001418  6700 007C                478      BEQ     _RTS
0000141C                           479      
0000141C  EC49                     480      LSR.W   #6,D1                   *Shift right 6 bits
0000141E  B27C 013A                481      CMP     #%0000000100111010,D1   *Check to eliminate RTS
00001422  6700 004E                482      BEQ     _JSR
00001426                           483      
00001426                           484      **ISOLATE 4 BITS TO CHECK CLR**    
00001426  3200                     485      MOVE.W  D0,D1           *Copy instruction for modification
00001428  E949                     486      LSL.W   #4,D1           *Shift left 7 bits 
0000142A  E849                     487      LSR.W   #4,D1           *Rotate right 5 bits
0000142C  E049                     488      LSR.W   #8,D1           *Shift right again (13 shifts total)
0000142E  0241 000F                489      ANDI.W  #$000F,D1       *Keep 4 bits
00001432                           490      
00001432  B27C 0002                491      CMP     #%0010,D1       *Check for 0010 to eliminate CLR
00001436  6700 001A                492      BEQ     _CLR            *If equal, branch to CLR
0000143A                           493  
0000143A                           494      **ISOLATE 3 BITS TO CHECK MOVEM**
0000143A  3200                     495      MOVE.W  D0,D1           *Copy instruction for modification
0000143C  ED49                     496      LSL.W   #6,D1           *Shift left 6 bits 
0000143E  EA49                     497      LSR.W   #5,D1           *Shift right 5 bits
00001440  E049                     498      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001442  0241 000F                499      ANDI.W  #$00F,D1        *Keep 3 bits
00001446                           500      
00001446  B27C 0001                501      CMP     #%001,D1
0000144A  6700 005E                502      BEQ     _MOVEM
0000144E                           503      
0000144E  6000 0012                504      BRA     _LEA            *Else by process of elimination it must be LEA   
00001452                           505      
00001452                           506  _CLR
00001452                           507      *MOVE.W  OPCLR,(A3)+     *Load 'CLR' to Add Reg 1 and then increment
00001452  49F9 0000226D            508      LEA     OPCLR, A4        *Load output string to A4
00001458  4EB9 000016A4            509      JSR     PASTE_3
0000145E  6000 0606                510      BRA     EA_CLR          *Branch to EA analysis of the command
00001462                           511  
00001462                           512  _LEA
00001462                           513      *MOVE.W  OPLEA,(A3)+     *Load 'LEA' to Add Reg 1 and then increment
00001462  49F9 00002271            514      LEA     OPLEA, A4        *Load output string to A4
00001468  4EB9 000016A4            515      JSR     PASTE_3
0000146E  6000 059C                516      BRA     EA_LEA          *Branch to EA analysis of the command
00001472                           517  
00001472                           518  _JSR
00001472                           519      *MOVE.W  OPJSR,(A3)+     *Load 'JSR' to Add Reg 1 and then increment
00001472  49F9 00002275            520      LEA     OPJSR, A4        *Load output string to A4
00001478  4EB9 000016A4            521      JSR     PASTE_3
0000147E  6000 077C                522      BRA     EA_JSR          *Branch to EA analysis of the command
00001482                           523  
00001482                           524  _NOP
00001482                           525      *MOVE.W  OPNOP,(A3)+     *Load 'NOP' to Add Reg 1 and then increment
00001482  49F9 00002279            526      LEA     OPNOP, A4        *Load output string to A4
00001488  4EB9 000016A4            527      JSR     PASTE_3
0000148E  16FC 0000                528      MOVE.B  #00,(A3)+
00001492  6000 FDDC                529      BRA     VALID_OPCODE          *Branch to EA analysis of the command      
00001496                           530  
00001496                           531  _RTS
00001496                           532      *MOVE.W  OPRTS,(A3)+     *Load 'RTS' to Add Reg 1 and then increment
00001496  49F9 0000227D            533      LEA     OPRTS, A4        *Load output string to A4
0000149C  4EB9 000016A4            534      JSR     PASTE_3
000014A2  16FC 0000                535          MOVE.B  #00,(A3)+
000014A6  6000 FDC8                536      BRA     VALID_OPCODE          *Branch to EA analysis of the command      
000014AA                           537  
000014AA                           538  _MOVEM
000014AA                           539      *MOVE.W  MOVEM,(A3)+     *Load 'MOVEM' to Add Reg 1 and then increment
000014AA  49F9 00002281            540      LEA     MOVEM, A4        *Load output string to A4
000014B0  4EB9 000016B6            541      JSR     PASTE_5
000014B6  6000 0784                542      BRA     EA_MOVEM        *Branch to EA analysis of the command
000014BA                           543      
000014BA                           544  OP0101
000014BA                           545      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014BA                           546      *BEGIN OUTPUT
000014BA                           547      
000014BA                           548      *MOVE.W  ADDQ,(A3)+      *Load 'AddQ' to Add Reg 1 and then increment
000014BA  49F9 00002287            549      LEA     ADDQ, A4        *Load output string to A4
000014C0  4EB9 000016AC            550      JSR     PASTE_4
000014C6  6000 0434                551      BRA     EA_ADDQ         *Branch to EA analysis of the command
000014CA                           552      
000014CA                           553  OP0110
000014CA                           554      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014CA                           555      *BEGIN OUTPUT
000014CA  3200                     556      MOVE.W  D0,D1
000014CC  E949                     557      LSL.W   #4,D1
000014CE  E849                     558      LSR.W   #4,D1
000014D0  E049                     559      LSR.W   #8,D1
000014D2  B23C 0000                560      CMP.B   #0,D1
000014D6  6700 FD0E                561      BEQ     INVALID_OPCODE
000014DA                           562      
000014DA  16F9 0000228C            563      MOVE.B  Bcc,(A3)+       *Load 'Bcc' to Add Reg 1 and then increment 
000014E0  6000 06C8                564      BRA     EA_BCC          *Branch to EA analysis of the command
000014E4                           565  
000014E4                           566  OP0111
000014E4                           567      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014E4                           568      *BEGIN OUTPUT
000014E4                           569      
000014E4                           570      *MOVE.W  MOVEQ,(A3)+     *Load 'MOVEQ' to Add Reg 1 and then increment
000014E4  49F9 0000228E            571      LEA     MOVEQ, A4        *Load output string to A4
000014EA  4EB9 000016B6            572      JSR     PASTE_5
000014F0  6000 02A8                573      BRA     EA_MOVEQ        *Branch to EA analysis of the command
000014F4                           574      
000014F4                           575  OP1000
000014F4                           576      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000014F4                           577      
000014F4                           578      **ISOLATE NEXT BITS TO CHECK**
000014F4  3200                     579      MOVE.W  D0,D1           *Copy instruction for modification
000014F6  EF49                     580      LSL.W   #7,D1           *Shift left 7 bits 
000014F8  EA49                     581      LSR.W   #5,D1           *Rotate right 5 bits
000014FA  E049                     582      LSR.W   #8,D1           *Shift right again (13 shifts total)
000014FC  0241 000F                583      ANDI.W  #$00F,D1        *Keep 3 bits
00001500                           584            
00001500  B27C 0003                585      CMP     #%011,D1    *Check for 011 to eliminate DIVU
00001504  6700 0006                586      BEQ     _DIVU        *If equal, branch to DIVU
00001508  6000 0012                587      BRA     _OR          *Else must be OR, branch
0000150C                           588      
0000150C                           589  _DIVU
0000150C                           590      *MOVE.W  DIVU,(A3)+      *Load 'DIVU' to Add Reg 1 and then increment
0000150C  49F9 00002294            591      LEA     DIVU, A4        *Load output string to A4
00001512  4EB9 000016AC            592      JSR     PASTE_4
00001518  6000 049E                593      BRA     EA_MULS         *Branch to EA analysis of the command
0000151C                           594  
0000151C                           595  _OR
0000151C                           596      *MOVE.W  OR,(A3)+        *Load 'OR' to Add Reg 1 and then increment
0000151C  49F9 00002299            597      LEA     OR, A4        *Load output string to A4
00001522  16DC                     598      MOVE.B  (A4)+, (A3)+
00001524  16DC                     599      MOVE.B  (A4)+, (A3)+
00001526  6000 02B8                600      BRA     EA_ADD           *Branch to EA analysis of the command
0000152A                           601  
0000152A                           602  OP1001
0000152A                           603      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
0000152A                           604      *BEGIN OUTPUT
0000152A                           605      
0000152A                           606      *MOVE.W  OPSUB,(A3)+     *Load 'SUB' to Add Reg 1 and then increment
0000152A  49F9 0000229C            607      LEA     OPSUB, A4        *Load output string to A4
00001530  4EB9 000016A4            608      JSR     PASTE_3
00001536  6000 02A8                609      BRA     EA_ADD          *Branch to EA analysis of the command
0000153A                           610      
0000153A                           611      
0000153A                           612  OP1010 *DO NOT DELETE THIS, HAS TO BE HERE FOR THE JUMP TABLE TO WORK
0000153A  6000 FCAA                613      BRA     INVALID_OPCODE
0000153E                           614      
0000153E                           615  
0000153E                           616  OP1011
0000153E                           617      
0000153E  49F9 000022A0            618      LEA     CMP, A4        *Load output string to A4
00001544  4EB9 000016A4            619      JSR     PASTE_3
0000154A  6000 0600                620      BRA     EA_CMP          *Branch to EA analysis of the command
0000154E                           621  
0000154E                           622  OP1100
0000154E                           623      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
0000154E                           624  
0000154E  3200                     625      MOVE.W  D0,D1           *Copy instruction for modification
00001550  EF49                     626      LSL.W   #7,D1           *Shift left 7 bits 
00001552  EA49                     627      LSR.W   #5,D1           *Rotate right 5 bits
00001554  E049                     628      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001556  0241 000F                629      ANDI.W  #$00F,D1        *Keep 3 bits
0000155A                           630           
0000155A  B27C 0007                631      CMP     #%111,D1       *Check for 111 to eliminate MULS
0000155E  6700 0006                632      BEQ     _MULS           *If equal, branch to MULS
00001562  6000 0012                633      BRA     _AND            *Else must be AND, branch
00001566                           634      
00001566                           635  _MULS
00001566                           636      *MOVE.W  MULS,(A3)+      *Load 'MULS' to Add Reg 1 and then increment
00001566  49F9 000022A4            637      LEA     MULS, A4        *Load output string to A4
0000156C  4EB9 000016AC            638      JSR     PASTE_4
00001572  6000 0444                639      BRA     EA_MULS         *Branch to EA analysis of the command
00001576                           640  
00001576                           641  _AND
00001576                           642      *MOVE.W  AND,(A3)+       *Load 'AND' to Add Reg 1 and then increment
00001576  49F9 000022A9            643      LEA     AND, A4        *Load output string to A4
0000157C  4EB9 000016A4            644      JSR     PASTE_3
00001582  6000 025C                645      BRA     EA_ADD          *Branch to EA analysis of the command
00001586                           646      
00001586                           647  OP1101
00001586                           648      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS  
00001586                           649  
00001586  3200                     650      MOVE.W  D0,D1           *Copy instruction for modification
00001588  E149                     651      LSL.W   #8,D1           *Shift left 7 bits 
0000158A  EC49                     652      LSR.W   #6,D1           *Rotate left 5 bits
0000158C  E049                     653      LSR.W   #8,D1           *Shift left again (13 shifts total)
0000158E  0241 000F                654      ANDI.W  #$0F,D1         *Keep 3 bits
00001592                           655                
00001592  B27C 0003                656      CMP     #%11,D1         *Check for 011 to eliminate ADDA (Size dependant)
00001596  6700 0016                657      BEQ     _ADDA           *If equal, branch to ADDA
0000159A  6000 0002                658      BRA     _ADD            *Else must be ADD, branch
0000159E                           659      
0000159E                           660  _ADD
0000159E                           661      *MOVE.W  ADD,(A3)+       *Load 'ADD' to Add Reg 1 and then increment
0000159E  49F9 000022AD            662      LEA     ADD, A4        *Load output string to A4
000015A4  4EB9 000016A4            663      JSR     PASTE_3
000015AA  6000 0234                664      BRA     EA_ADD          *Branch to EA analysis of the command
000015AE                           665  
000015AE                           666  _ADDA
000015AE                           667      *MOVE.W  ADDA,(A3)+      *Load 'ADDA' to Add Reg 1 and then increment
000015AE  49F9 000022B1            668      LEA     ADDA, A4        *Load output string to A4
000015B4  4EB9 000016AC            669      JSR     PASTE_4
000015BA  6000 039E                670      BRA     EA_ADDA         *Branch to EA analysis of the command
000015BE                           671      
000015BE                           672  OP1110
000015BE  3200                     673      MOVE.W  D0, D1           *iso bits 7, 6 to determine shift type
000015C0  E149                     674      LSL.W   #8, D1          
000015C2  E049                     675      LSR.W   #8, D1           
000015C4  EC49                     676      LSR.W   #6, D1           * d1 = shift type
000015C6  B23C 0003                677      CMP.B   #3, D1
000015CA  6700 0006                678      BEQ     MEM_SHIFT
000015CE  6600 000E                679      BNE     REG_SHIFT
000015D2                           680                 
000015D2                           681  MEM_SHIFT   *BITS 10 AND 9 DECIDE THE OPERATION
000015D2  3200                     682      MOVE.W  D0, D1
000015D4  EB49                     683      LSL.W   #5, D1
000015D6  E049                     684      LSR.W   #8, D1
000015D8  EC49                     685      LSR.W   #6, D1 *D1 = OP CODE
000015DA  6000 0010                686      BRA     GET_OP
000015DE                           687      
000015DE                           688  REG_SHIFT   *BITS 4 AND 3 DECIDE THE OPERATION
000015DE  3200                     689      MOVE.W  D0, D1
000015E0  E149                     690      LSL.W   #8, D1
000015E2  E749                     691      LSL.W   #3, D1
000015E4  E049                     692      LSR.W   #8, D1
000015E6  EC49                     693      LSR.W   #6, D1 *D1 = OP CODE
000015E8  6000 0002                694      BRA     GET_OP
000015EC                           695      
000015EC                           696  GET_OP
000015EC  B23C 0000                697      CMP.B   #0, D1
000015F0  6700 002A                698      BEQ     ARI
000015F4  B23C 0001                699      CMP.B   #1, D1
000015F8  6700 000E                700      BEQ     LOG
000015FC  B23C 0003                701      CMP.B   #3, D1
00001600  6700 002E                702      BEQ     ROT
00001604  6000 FBE0                703      BRA     INVALID_OPCODE
00001608                           704      
00001608                           705  LOG
00001608  3200                     706      MOVE.W  D0, D1
0000160A  EF49                     707      LSL.W   #7, D1
0000160C  EE49                     708      LSR.W   #7, D1
0000160E  E049                     709      LSR.W   #8, D1
00001610  B23C 0000                710      CMP.B   #0, D1
00001614  6700 003E                711      BEQ     _LSR
00001618  6600 002A                712      BNE     _LSL
0000161C                           713      
0000161C                           714  ARI
0000161C  3200                     715      MOVE.W  D0, D1
0000161E  EF49                     716      LSL.W   #7, D1
00001620  EE49                     717      LSR.W   #7, D1
00001622  E049                     718      LSR.W   #8, D1
00001624  B23C 0000                719      CMP.B   #0, D1
00001628  6700 004A                720      BEQ     _ASR
0000162C  6600 0036                721      BNE     _ASL
00001630                           722  
00001630                           723  ROT
00001630  3200                     724      MOVE.W  D0, D1
00001632  EF49                     725      LSL.W   #7, D1
00001634  EE49                     726      LSR.W   #7, D1
00001636  E049                     727      LSR.W   #8, D1
00001638  B23C 0000                728      CMP.B   #0, D1
0000163C  6700 0056                729      BEQ     _ROR
00001640  6600 0042                730      BNE     _ROL
00001644                           731      
00001644                           732  _LSL    
00001644  49F9 000022B6            733      LEA     LSL, A4        *Load output string to A4
0000164A  4EB9 000016A4            734      JSR     PASTE_3
00001650  6000 045E                735      BRA     EA_LSD         *Branch to EA analysis of the command
00001654                           736  
00001654                           737  _LSR
00001654  49F9 000022BA            738      LEA     LSR, A4        *Load output string to A4
0000165A  4EB9 000016A4            739      JSR     PASTE_3
00001660  6000 044E                740      BRA     EA_LSD          *Branch to EA analysis of the command
00001664                           741      
00001664                           742  _ASL    
00001664  49F9 000022BE            743      LEA     ASL, A4        *Load output string to A4
0000166A  4EB9 000016A4            744      JSR     PASTE_3
00001670  6000 043E                745      BRA     EA_LSD          *Branch to EA analysis of the command
00001674                           746  
00001674                           747  _ASR
00001674  49F9 000022C2            748      LEA     ASR, A4        *Load output string to A4
0000167A  4EB9 000016A4            749      JSR     PASTE_3
00001680  6000 042E                750      BRA     EA_LSD          *Branch to EA analysis of the command
00001684                           751      
00001684                           752  _ROL    
00001684  49F9 000022C6            753      LEA     ROL, A4        *Load output string to A4
0000168A  4EB9 000016A4            754      JSR     PASTE_3
00001690  6000 041E                755      BRA     EA_LSD          *Branch to EA analysis of the command
00001694                           756  
00001694                           757  _ROR
00001694  49F9 000022CA            758      LEA     ROR, A4        *Load output string to A4
0000169A  4EB9 000016A4            759      JSR     PASTE_3
000016A0  6000 040E                760      BRA     EA_LSD          *Branch to EA analysis of the command
000016A4                           761      
000016A4                           762  PASTE_3
000016A4  16DC                     763      MOVE.B  (A4)+, (A3)+
000016A6  16DC                     764      MOVE.B  (A4)+, (A3)+
000016A8  16DC                     765      MOVE.B  (A4)+, (A3)+
000016AA  4E75                     766      RTS
000016AC                           767  
000016AC                           768  PASTE_4
000016AC  16DC                     769      MOVE.B  (A4)+, (A3)+
000016AE  16DC                     770      MOVE.B  (A4)+, (A3)+
000016B0  16DC                     771      MOVE.B  (A4)+, (A3)+
000016B2  16DC                     772      MOVE.B  (A4)+, (A3)+
000016B4  4E75                     773      RTS
000016B6                           774  
000016B6                           775  PASTE_5
000016B6  16DC                     776      MOVE.B  (A4)+, (A3)+
000016B8  16DC                     777      MOVE.B  (A4)+, (A3)+
000016BA  16DC                     778      MOVE.B  (A4)+, (A3)+
000016BC  16DC                     779      MOVE.B  (A4)+, (A3)+
000016BE  16DC                     780      MOVE.B  (A4)+, (A3)+
000016C0  4E75                     781      RTS
000016C2                           782  
000016C2  FFFF FFFF                783      SIMHALT
000016C6                           784  
000016C6                           785      **ELSE CONTINUE CHECKING**
000016C6                           786  
000016C6                           787  
000016C6                           788  
000016C6                           789  
000016C6                           790  
000016C6                           791  -------------------- end include --------------------
000016C6                           792      INCLUDE         'EFFECTIVE_ADDRESSES.X68'
000016C6                           793      
000016C6                           794      
000016C6                           795      *MULS IS A SPECIAL CASE BECAUSE I NEVER GET THIS SIZE
000016C6                           796      
000016C6                           797      
000016C6                           798  EA_MOVE      *1 invalid; done 
000016C6  4285                     799      CLR.L         D5
000016C8  3E00                     800      MOVE.W      D0, D7 *DO THIS AT THE BEGGINING OF EVERY EA 
000016CA                           801      
000016CA  3A07                     802      MOVE.W      D7, D5      *
000016CC  E04D                     803      LSR.W       #8, D5      *
000016CE  E84D                     804      LSR.W       #4, D5      *D5 = SIZE 
000016D0  4EB9 00001ECE            805      JSR         GET_SIZE    *D5 = <0000 0000 0000 0000 0000 0000 0000 0010>
000016D6  E09D                     806      ROR.L       #8, D5      *D5 = <0000 0010 0000 0000 0000 0000 0000 0000>
000016D8                           807      
000016D8  3807                     808      MOVE.W      D7, D4      *d5 = <0000 0010 0000 0000 xxx xxxx xxxx xxxX>
000016DA  E14C                     809      LSL.W       #8, D4      *
000016DC  E54C                     810      LSL.W       #2, D4
000016DE  E04C                     811      LSR.W       #8, D4      *
000016E0  EA4C                     812      LSR.W       #5, D4      *D4 = <0000 0000> D4 = SOURCE MODE
000016E2                           813      
000016E2  3A07                     814      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000016E4  E14D                     815      LSL.W       #8, D5  
000016E6  EB4D                     816      LSL.W       #5, D5      *
000016E8  E04D                     817      LSR.W       #8, D5
000016EA  EA4D                     818      LSR.W       #5, D5      *D5 = SOURCE REGISTER
000016EC                           819      
000016EC  4EB9 00001FCE            820      JSR         MODE_CHOOSER
000016F2  41F9 00001DCE            821      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000016F8  C9FC 0006                822      MULS.W      #6, D4          *GET JUMP
000016FC  4EB0 4000                823      JSR         0(A0, D4)       *JUMP
00001700  4EB9 0000204A            824      JSR COMMA
00001706  4EB9 000020AC            825      JSR SPACE
0000170C  3807                     826      MOVE.W      D7, D4      *
0000170E  EF4C                     827      LSL.W       #7, D4      *
00001710  EE4C                     828      LSR.W       #7, D4      *
00001712  EC4C                     829      LSR.W       #6, D4      *D4 = DESTINATION MODE
00001714  4EB9 00001D44            830      JSR         MOVE_ERROR_CHECK 
0000171A                           831      
0000171A  3A07                     832      MOVE.W      D7, D5      *
0000171C  E94D                     833      LSL.W       #4, D5      *
0000171E  E04D                     834      LSR.W       #8, D5      *
00001720  EA4D                     835      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
00001722                           836      
00001722  4EB9 00001FCE            837      JSR         MODE_CHOOSER
00001728  41F9 00001DCE            838      LEA         MODE_JUMP, A0   *LOAD MODE JUMP
0000172E  C9FC 0006                839      MULS        #6, D4          *GET JUMP
00001732  4EB0 4000                840      JSR         0(A0, D4)       *JUMP
00001736  16BC 0000                841      MOVE.B      #00, (A3) 
0000173A  6000 FB34                842      BRA         VALID_OPCODE
0000173E                           843  EA_MOVEA        *0 invalid
0000173E  4285                     844      CLR.L         D5
00001740  3E00                     845      MOVE.W      D0, D7
00001742                           846  
00001742  3A07                     847      MOVE.W      D7, D5      *GETTING SIZE
00001744  E04D                     848      LSR.W       #8, D5      *
00001746  E84D                     849      LSR.W       #4, D5      *SHIFT 12 BITS RIGHT
00001748  4EB9 00001ECE            850      JSR         GET_SIZE    *D4 = SIZE
0000174E  E09D                     851      ROR.L       #8, D5
00001750                           852      
00001750  3807                     853      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001752  E14C                     854      LSL.W       #8, D4      *
00001754  E54C                     855      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
00001756  E04C                     856      LSR.W       #8, D4      *
00001758  EA4C                     857      LSR.W       #5, D4      *D4 = SOURCE MODE
0000175A                           858  
0000175A  3A07                     859      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
0000175C  E14D                     860      LSL.W       #8, D5      *
0000175E  EB4D                     861      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001760  E04D                     862      LSR.W       #8, D5      *
00001762  EA4D                     863      LSR.W       #5, D5      *D5 = SOURCE REGISTER
00001764                           864      
00001764  4EB9 00001FCE            865      JSR         MODE_CHOOSER  *INCASE MODE IS $111
0000176A  41F9 00001DCE            866      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001770  C9FC 0006                867      MULS        #6, D4        *GET JUMP
00001774  4EB0 4000                868      JSR         0(A0, D4)     *JUMP
00001778  4EB9 0000204A            869      JSR         COMMA
0000177E  4EB9 000020AC            870      JSR         SPACE
00001784  3A07                     871      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
00001786  E94D                     872      LSL.W       #4, D5      *
00001788  E04D                     873      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
0000178A  EA4D                     874      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
0000178C                           875      
0000178C  4EB9 00001E0C            876      JSR         ADDR_1
00001792  16BC 0000                877      MOVE.B      #00, (A3)
00001796  6000 FAD8                878      BRA         VALID_OPCODE
0000179A                           879  EA_MOVEQ        *0 invalid
0000179A  4285                     880      CLR.L       D5
0000179C  3E00                     881      MOVE.W      D0, D7
0000179E                           882  
0000179E  4EB9 000020AC            883      JSR SPACE
000017A4  4EB9 00002052            884      JSR POUND
000017AA  4EB9 000020B4            885      JSR CASH
000017B0  3A07                     886      MOVE.W      D7, D5
000017B2  E14D                     887      LSL.W       #8, D5
000017B4  E04D                     888      LSR.W       #8, D5 *PROLLY UNNECESSARY
000017B6  3405                     889      MOVE.W      D5, D2
000017B8  4EB9 0000201E            890      JSR         MOQ
000017BE                           891      
000017BE                           892    
000017BE  4EB9 0000204A            893      JSR COMMA
000017C4  4EB9 000020AC            894      JSR SPACE
000017CA  3A07                     895      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
000017CC  E94D                     896      LSL.W       #4, D5      *
000017CE  E04D                     897      LSR.W       #8, D5      *
000017D0  EA4D                     898      LSR.W       #5, D5      * D5 = DESTINATION REGISTER
000017D2                           899      
000017D2  4EB9 00001DFE            900      JSR         DATA_0
000017D8  16BC 0000                901      MOVE.B      #00, (A3)
000017DC  6000 FA92                902      BRA         VALID_OPCODE
000017E0                           903  EA_ADD          *3 invalid; done
000017E0                           904  
000017E0  4285                     905      CLR.L         D5
000017E2  3E00                     906      MOVE.W      D0, D7
000017E4                           907  
000017E4  3A07                     908      MOVE.W      D7, D5      *GETTING OPMODE AKA SIZE
000017E6  EF4D                     909      LSL.W       #7, D5      * 
000017E8  EE4D                     910      LSR.W       #7, D5      *
000017EA  EC4D                     911      LSR.W       #6, D5      *D4 = OPMODE AKA SIZE
000017EC  4EB9 00001F10            912      JSR         GET_OPMODE_MATH *PRINTS THE SIZE
000017F2                           913  
000017F2  BA3C 0003                914      CMP.B       #3, D5
000017F6  6D00 000A                915      BLT         DN_VERSION
000017FA  BA3C 0003                916      CMP.B       #3, D5
000017FE  6E00 004E                917      BGT         EA_VERSION
00001802                           918  DN_VERSION *EA IS SOURCE, REGISTER IS DESTINATION <EA> + DN -> DN
00001802  E09D                     919      ROR.L       #8, D5
00001804                           920      
00001804  3807                     921      MOVE.W      D7, D4      
00001806  E14C                     922      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001808  E54C                     923      LSL.W       #2, D4
0000180A  E04C                     924      LSR.W       #8, D4      *
0000180C  EA4C                     925      LSR.W       #5, D4      *D4 = EA MODE
0000180E                           926      
0000180E  3A07                     927      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001810  E14D                     928      LSL.W       #8, D5  
00001812  EB4D                     929      LSL.W       #5, D5      *
00001814  E04D                     930      LSR.W       #8, D5
00001816  EA4D                     931      LSR.W       #5, D5      * D5 = EA REGISTER
00001818                           932      
00001818  4EB9 00001FCE            933      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
0000181E  41F9 00001DCE            934      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001824  C9FC 0006                935      MULS        #6, D4          *GET JUMP
00001828  4EB0 4000                936      JSR         0(A0, D4)       *JUMP
0000182C                           937          
0000182C  4EB9 0000204A            938      JSR         COMMA
00001832  4EB9 000020AC            939      JSR         SPACE
00001838                           940      
00001838  3A07                     941      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
0000183A  E94D                     942      LSL.W       #4, D5      *
0000183C  E04D                     943      LSR.W       #8, D5      *
0000183E  EA4D                     944      LSR.W       #5, D5      *D5 DESTINATION REGISTER
00001840                           945      
00001840  4EB9 00001DFE            946      JSR         DATA_0
00001846  16BC 0000                947      MOVE.B      #00, (A3)
0000184A  6000 FA24                948      BRA         VALID_OPCODE
0000184E                           949  EA_VERSION
0000184E  E09D                     950      ROR.L       #8, D5
00001850                           951  
00001850  3A07                     952      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
00001852  E94D                     953      LSL.W       #4, D5      *
00001854  E04D                     954      LSR.W       #8, D5      *
00001856  EA4D                     955      LSR.W       #5, D5      *D5 DESTINATION REGISTER
00001858  4EB9 00001DFE            956      JSR         DATA_0
0000185E                           957      
0000185E  4EB9 0000204A            958      JSR         COMMA
00001864  4EB9 000020AC            959      JSR         SPACE
0000186A                           960      
0000186A  3807                     961      MOVE.W      D7, D4      
0000186C  E14C                     962      LSL.W       #8, D4      *LEFT 10; RIGHT 13
0000186E  E54C                     963      LSL.W       #2, D4
00001870  E04C                     964      LSR.W       #8, D4      *
00001872  EA4C                     965      LSR.W       #5, D4      *D4 = EA MODE
00001874                           966      
00001874  3A07                     967      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001876  E14D                     968      LSL.W       #8, D5  
00001878  EB4D                     969      LSL.W       #5, D5      *
0000187A  E04D                     970      LSR.W       #8, D5
0000187C  EA4D                     971      LSR.W       #5, D5      * D5 = EA REGISTER
0000187E                           972      
0000187E                           973      *the only way there could be an error is if 
0000187E                           974      *we are in THIS addressing mo
0000187E                           975      
0000187E  4EB9 00001FCE            976      JSR         MODE_CHOOSER    *IF A WORD OR LONG 
00001884  4EB9 00001D4E            977      JSR         ADD_ERROR_CHECK
0000188A  41F9 00001DCE            978      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001890  C9FC 0006                979      MULS        #6, D4          *GET JUMP
00001894  4EB0 4000                980      JSR         0(A0, D4)       *JUMP
00001898                           981      
00001898  16BC 0000                982      MOVE.B      #00, (A3)
0000189C  6000 F9D2                983      BRA         VALID_OPCODE
000018A0                           984  EA_ADDI  *2 invalid; DONE
000018A0  4285                     985      CLR.L         D5
000018A2  3E00                     986      MOVE.W      D0, D7
000018A4                           987      
000018A4  3A07                     988      MOVE.W      D7, D5      *
000018A6  E14D                     989      LSL.W       #8, D5      *
000018A8  E04D                     990      LSR.W       #8, D5      *
000018AA  EC4D                     991      LSR.W       #6, D5      *D5 = SIZE
000018AC  4EB9 00001F6C            992      JSR         GET_SIZE_ADDI
000018B2  E09D                     993      ROR.L       #8, D5
000018B4  4EB9 00001E7E            994      JSR         IMME_7
000018BA  4EB9 0000204A            995      JSR         COMMA
000018C0  4EB9 000020AC            996      JSR         SPACE
000018C6  3807                     997      MOVE.W      D7, D4      
000018C8  E14C                     998      LSL.W       #8, D4      *LEFT 10; RIGHT 13
000018CA  E54C                     999      LSL.W       #2, D4
000018CC  E04C                    1000      LSR.W       #8, D4      *
000018CE  EA4C                    1001      LSR.W       #5, D4      *D4 = EA MODE
000018D0                          1002      
000018D0  3A07                    1003      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000018D2  E14D                    1004      LSL.W       #8, D5  
000018D4  EB4D                    1005      LSL.W       #5, D5      *
000018D6  E04D                    1006      LSR.W       #8, D5
000018D8  EA4D                    1007      LSR.W       #5, D5      * D5 = EA REGISTER
000018DA                          1008      
000018DA  4EB9 00001FCE           1009      JSR         MODE_CHOOSER    *IF A WORD OR LONG  
000018E0  4EB9 00001D68           1010      JSR         ADDI_ERROR_CHECK
000018E6  41F9 00001DCE           1011      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000018EC  C9FC 0006               1012      MULS        #6, D4          *GET JUMP
000018F0  4EB0 4000               1013      JSR         0(A0, D4)       *JUMP'
000018F4                          1014      
000018F4  16BC 0000               1015      MOVE.B      #00, (A3)
000018F8  6000 F976               1016      BRA         VALID_OPCODE
000018FC                          1017  EA_ADDQ     *0 INVALID
000018FC  4285                    1018      CLR.L         D5
000018FE  3E00                    1019      MOVE.W      D0, D7
00001900                          1020      
00001900  3A07                    1021      MOVE.W      D7, D5
00001902  E14D                    1022      LSL.W       #8, D5
00001904  E04D                    1023      LSR.W       #8, D5
00001906  EC4D                    1024      LSR.W       #6, D5
00001908  4EB9 00001F6C           1025      JSR         GET_SIZE_ADDI    *PRINT SIZE
0000190E  E09D                    1026      ROR.L       #8, D5
00001910                          1027      
00001910  3A07                    1028      MOVE.W      D7, D5      *GETTING DATA
00001912  E94D                    1029      LSL.W       #4, D5      *SHIFT LEFT 4; RIGHT 13
00001914  E04D                    1030      LSR.W       #8, D5      *
00001916  EA4D                    1031      LSR.W       #5, D5      *D5 = DATA
00001918  4EB9 00001F48           1032      JSR         GET_DATA
0000191E  4EB9 0000204A           1033      JSR COMMA
00001924  4EB9 000020AC           1034      JSR SPACE
0000192A  3807                    1035      MOVE.W      D7, D4      *GETTING EA MODE
0000192C  E14C                    1036      LSL.W       #8, D4      *
0000192E  E54C                    1037      LSL.W       #2, D4      *SHIFT 10 LEFT; 13 RIGHT
00001930  E04C                    1038      LSR.W       #8, D4      *
00001932  EA4C                    1039      LSR.W       #5, D4      *D4 = EA MODE
00001934                          1040      
00001934  3A07                    1041      MOVE.W      D7, D5      *GETTING EA REGISTER
00001936  E14D                    1042      LSL.W       #8, D5      *
00001938  EB4D                    1043      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
0000193A  E04D                    1044      LSR.W       #8, D5      *
0000193C  EA4D                    1045      LSR.W       #5, D5      *D5 = EA REGISTER
0000193E                          1046      
0000193E  4EB9 00001FCE           1047      JSR         MODE_CHOOSER
00001944  41F9 00001DCE           1048      LEA         MODE_JUMP, A0   *LOAD MODE JUMP
0000194A  C9FC 0006               1049      MULS        #6, D4          *GET JUMP
0000194E  4EB0 4000               1050      JSR         0(A0, D4)       *JUMP
00001952                          1051      
00001952  16BC 0000               1052      MOVE.B      #00, (A3)
00001956                          1053      
00001956  6000 F918               1054      BRA         VALID_OPCODE
0000195A                          1055  EA_ADDA         *0 INVALID
0000195A  4285                    1056      CLR.L         D5
0000195C  3E00                    1057      MOVE.W      D0, D7
0000195E                          1058      
0000195E  3A07                    1059      MOVE.W      D7, D5      *GETTING OPMODE AKA SIZE
00001960  EF4D                    1060      LSL.W       #7, D5      * 
00001962  EE4D                    1061      LSR.W       #7, D5      *
00001964  EC4D                    1062      LSR.W       #6, D5      *D4 = OPMODE AKA SIZE
00001966  4EB9 00001EF8           1063      JSR         GET_OPMODE
0000196C  E09D                    1064      ROR.L       #8, D5
0000196E                          1065      
0000196E  3807                    1066      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001970  E14C                    1067      LSL.W       #8, D4      *
00001972  E54C                    1068      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
00001974  E04C                    1069      LSR.W       #8, D4      *
00001976  EA4C                    1070      LSR.W       #5, D4      *D4 = SOURCE MODE
00001978                          1071      
00001978  3A07                    1072      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
0000197A  E14D                    1073      LSL.W       #8, D5      *
0000197C  EB4D                    1074      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
0000197E  E04D                    1075      LSR.W       #8, D5      *
00001980  EA4D                    1076      LSR.W       #5, D5      *D5 = SOURCE REGISTER
00001982                          1077      
00001982  4EB9 00001FCE           1078      JSR         MODE_CHOOSER  *INCASE MODE IS $111
00001988  41F9 00001DCE           1079      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
0000198E  C9FC 0006               1080      MULS        #6, D4        *GET JUMP
00001992  4EB0 4000               1081      JSR         0(A0, D4)     *JUMP
00001996  4EB9 0000204A           1082      JSR COMMA 
0000199C  4EB9 000020AC           1083      JSR SPACE
000019A2  3A07                    1084      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
000019A4  E94D                    1085      LSL.W       #4, D5      *
000019A6  E04D                    1086      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
000019A8  EA4D                    1087      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
000019AA                          1088      
000019AA  4EB9 00001E0C           1089      JSR         ADDR_1
000019B0  16BC 0000               1090      MOVE.B      #00, (A3)
000019B4                          1091      
000019B4  6000 F8BA               1092      BRA         VALID_OPCODE
000019B8                          1093  EA_MULS                *1 INVALID;
000019B8                          1094  
000019B8                          1095  
000019B8  4285                    1096      CLR.L         D5
000019BA  3E00                    1097      MOVE.W      D0, D7
000019BC                          1098      
000019BC  4EB9 000020AC           1099      JSR         SPACE
000019C2  3807                    1100      MOVE.W      D7, D4      
000019C4  E14C                    1101      LSL.W       #8, D4      *LEFT 10; RIGHT 13
000019C6  E54C                    1102      LSL.W       #2, D4
000019C8  E04C                    1103      LSR.W       #8, D4      *
000019CA  EA4C                    1104      LSR.W       #5, D4      *D4 = EA MODE
000019CC                          1105      
000019CC  3A07                    1106      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000019CE  E14D                    1107      LSL.W       #8, D5  
000019D0  EB4D                    1108      LSL.W       #5, D5      *
000019D2  E04D                    1109      LSR.W       #8, D5
000019D4  EA4D                    1110      LSR.W       #5, D5      * D5 = EA REGISTER
000019D6                          1111      
000019D6  4EB9 00001FCE           1112      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
000019DC  41F9 00001DCE           1113      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000019E2  C9FC 0006               1114      MULS        #6, D4          *GET JUMP
000019E6  4EB0 4000               1115      JSR         0(A0, D4)       *JUMP
000019EA  4EB9 0000204A           1116      JSR         COMMA
000019F0  4EB9 000020AC           1117      JSR         SPACE
000019F6  3A07                    1118      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
000019F8  E94D                    1119      LSL.W       #4, D5      *
000019FA  E04D                    1120      LSR.W       #8, D5      *
000019FC  EA4D                    1121      LSR.W       #5, D5      *D5 DESTINATION REGISTER
000019FE                          1122      
000019FE  4EB9 00001DFE           1123      JSR         DATA_0
00001A04  16BC 0000               1124      MOVE.B      #00, (A3)
00001A08                          1125      
00001A08  6000 F866               1126      BRA         VALID_OPCODE
00001A0C                          1127  EA_LEA          *5 INVALIDS; DONE
00001A0C  4285                    1128      CLR.L         D5
00001A0E  3E00                    1129      MOVE.W      D0, D7
00001A10                          1130      
00001A10  4EB9 000020AC           1131      JSR         SPACE
00001A16  3807                    1132      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001A18  E14C                    1133      LSL.W       #8, D4      *
00001A1A  E54C                    1134      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
00001A1C  E04C                    1135      LSR.W       #8, D4      *
00001A1E  EA4C                    1136      LSR.W       #5, D4      *D4 = SOURCE MODE
00001A20                          1137      
00001A20  3A07                    1138      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
00001A22  E14D                    1139      LSL.W       #8, D5      *
00001A24  EB4D                    1140      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001A26  E04D                    1141      LSR.W       #8, D5      *
00001A28  EA4D                    1142      LSR.W       #5, D5      *D5 = SOURCE REGISTER
00001A2A                          1143      
00001A2A  4EB9 00001FCE           1144      JSR         MODE_CHOOSER  *INCASE MODE IS $111
00001A30  4EB9 00001D7A           1145      JSR         LEA_ERROR_CHECK
00001A36  41F9 00001DCE           1146      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001A3C  C9FC 0006               1147      MULS        #6, D4        *GET JUMP
00001A40  4EB0 4000               1148      JSR         0(A0, D4)     *JUMP
00001A44  4EB9 0000204A           1149      JSR COMMA
00001A4A  4EB9 000020AC           1150      JSR SPACE
00001A50  3A07                    1151      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
00001A52  E94D                    1152      LSL.W       #4, D5      *
00001A54  E04D                    1153      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
00001A56  EA4D                    1154      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
00001A58                          1155      
00001A58  4EB9 00001E0C           1156      JSR         ADDR_1
00001A5E  16BC 0000               1157      MOVE.B      #00, (A3)
00001A62                          1158      
00001A62  6000 F80C               1159      BRA         VALID_OPCODE
00001A66                          1160  EA_CLR          *2 INVALID; DONE
00001A66  4285                    1161      CLR.L         D5
00001A68  3E00                    1162      MOVE.W      D0, D7
00001A6A                          1163      
00001A6A  3A07                    1164      MOVE.W      D7, D5
00001A6C  E14D                    1165      LSL.W       #8, D5      *
00001A6E  E04D                    1166      LSR.W       #8, D5      *
00001A70  EC4D                    1167      LSR.W       #6, D5      *D4 = SIZE
00001A72  4EB9 00001F6C           1168      JSR         GET_SIZE_ADDI
00001A78  E09D                    1169      ROR.L       #8, D5
00001A7A  3807                    1170      MOVE.W      D7, D4      
00001A7C  E14C                    1171      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001A7E  E54C                    1172      LSL.W       #2, D4
00001A80  E04C                    1173      LSR.W       #8, D4      *
00001A82  EA4C                    1174      LSR.W       #5, D4      *D4 = EA MODE
00001A84                          1175      
00001A84  3A07                    1176      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001A86  E14D                    1177      LSL.W       #8, D5  
00001A88  EB4D                    1178      LSL.W       #5, D5      *
00001A8A  E04D                    1179      LSR.W       #8, D5
00001A8C  EA4D                    1180      LSR.W       #5, D5      * D5 = EA REGISTER
00001A8E                          1181      
00001A8E  4EB9 00001FCE           1182      JSR         MODE_CHOOSER    *IF A WORD OR LONG  
00001A94  4EB9 00001D68           1183      JSR         ADDI_ERROR_CHECK  
00001A9A  41F9 00001DCE           1184      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001AA0  C9FC 0006               1185      MULS        #6, D4          *GET JUMP
00001AA4  4EB0 4000               1186      JSR         0(A0, D4)       *JUMP
00001AA8                          1187      
00001AA8  16BC 0000               1188      MOVE.B      #00, (A3)
00001AAC                          1189      
00001AAC  6000 F7C2               1190      BRA         VALID_OPCODE
00001AB0                          1191  EA_LSD          *3 INVALID; DONE
00001AB0  4285                    1192      CLR.L       D5
00001AB2  3E00                    1193      MOVE.W      D0, D7
00001AB4                          1194      
00001AB4  3A07                    1195      MOVE.W      D7, D5
00001AB6  E14D                    1196      LSL.W       #8, D5
00001AB8  E04D                    1197      LSR.W       #8, D5
00001ABA  EC4D                    1198      LSR.W       #6, D5     *ISOLATE SIZE
00001ABC  4EB9 00001F6C           1199      JSR         GET_SIZE_ADDI  *PRINT SIZE
00001AC2  BA3C 0003               1200      CMP.B       #3, D5      *EA SHIFT
00001AC6                          1201      *DOES A ROTATE COMMAND AFFECT CARRY FLAG
00001AC6  6700 003E               1202      BEQ         EA_SHIFT    *BRANCH TO EA SHIFT
00001ACA  3807                    1203      MOVE.W      D7, D4
00001ACC  E14C                    1204      LSL.W       #8, D4
00001ACE  E54C                    1205      LSL.W       #2, D4
00001AD0  E04C                    1206      LSR.W       #8, D4
00001AD2  EE4C                    1207      LSR.W       #7, D4      *D4 = TYPE
00001AD4                          1208      
00001AD4  3A07                    1209      MOVE.W      D7, D5      *GETTING DATA
00001AD6  E94D                    1210      LSL.W       #4, D5      *SHIFT LEFT 4; RIGHT 13
00001AD8  E04D                    1211      LSR.W       #8, D5      *
00001ADA  EA4D                    1212      LSR.W       #5, D5      *D5 = DATA / REGISTER
00001ADC                          1213      
00001ADC  4EB9 00001F8C           1214      JSR         TYPE_CHOOSER
00001AE2  4EB9 0000204A           1215      JSR         COMMA
00001AE8  4EB9 000020AC           1216      JSR         SPACE
00001AEE  3A07                    1217      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001AF0  E14D                    1218      LSL.W       #8, D5  
00001AF2  EB4D                    1219      LSL.W       #5, D5      *
00001AF4  E04D                    1220      LSR.W       #8, D5
00001AF6  EA4D                    1221      LSR.W       #5, D5      * D5 = EA REGISTER
00001AF8  4EB9 00001DFE           1222      JSR         DATA_0
00001AFE                          1223      
00001AFE  16BC 0000               1224      MOVE.B      #00, (A3)
00001B02                          1225      
00001B02  6000 F76C               1226      BRA         VALID_OPCODE
00001B06                          1227  EA_SHIFT
00001B06  4EB9 00002062           1228      JSR         WORD
00001B0C  4EB9 000020AC           1229      JSR         SPACE
00001B12  3807                    1230      MOVE.W      D7, D4      *
00001B14  E14C                    1231      LSL.W       #8, D4      *
00001B16  E54C                    1232      LSL.W       #2, D4
00001B18  E04C                    1233      LSR.W       #8, D4      *
00001B1A  EA4C                    1234      LSR.W       #5, D4      *D4 = EA MODE
00001B1C                          1235      
00001B1C  3A07                    1236      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001B1E  E14D                    1237      LSL.W       #8, D5  
00001B20  EB4D                    1238      LSL.W       #5, D5      *
00001B22  E04D                    1239      LSR.W       #8, D5
00001B24  EA4D                    1240      LSR.W       #5, D5      * D5 = EA REGISTER
00001B26                          1241      
00001B26  4EB9 00001FCE           1242      JSR         MODE_CHOOSER    *IF A WORD OR LONG   
00001B2C  4EB9 00001D4E           1243      JSR         ADD_ERROR_CHECK 
00001B32  41F9 00001DCE           1244      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001B38  C9FC 0006               1245      MULS        #6, D4          *GET JUMP
00001B3C  4EB0 4000               1246      JSR         0(A0, D4)       *JUMP
00001B40  6000 0002               1247      BRA         DONE
00001B44                          1248  DONE
00001B44  16BC 0000               1249      MOVE.B      #00, (A3)
00001B48                          1250      
00001B48  6000 F726               1251      BRA         VALID_OPCODE
00001B4C                          1252  
00001B4C                          1253  EA_CMP          *0 INVALID
00001B4C  4285                    1254      CLR.L         D5
00001B4E  3E00                    1255      MOVE.W      D0, D7
00001B50                          1256      
00001B50  3A07                    1257      MOVE.W      D7, D5      *GETTING OPMODE AKA SIZE
00001B52  EF4D                    1258      LSL.W       #7, D5      * 
00001B54  EE4D                    1259      LSR.W       #7, D5      *
00001B56  EC4D                    1260      LSR.W       #6, D5      *D4 = OPMODE AKA SIZE
00001B58  4EB9 00001F6C           1261      JSR         GET_SIZE_ADDI
00001B5E  E09D                    1262      ROR.L       #8, D5
00001B60  3807                    1263      MOVE.W      D7, D4      
00001B62  E14C                    1264      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001B64  E54C                    1265      LSL.W       #2, D4
00001B66  E04C                    1266      LSR.W       #8, D4      *
00001B68  EA4C                    1267      LSR.W       #5, D4      *D4 = EA MODE
00001B6A                          1268      
00001B6A  3A07                    1269      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001B6C  E14D                    1270      LSL.W       #8, D5  
00001B6E  EB4D                    1271      LSL.W       #5, D5      *
00001B70  E04D                    1272      LSR.W       #8, D5
00001B72  EA4D                    1273      LSR.W       #5, D5      * D5 = EA REGISTER
00001B74                          1274      
00001B74  4EB9 00001FCE           1275      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001B7A  41F9 00001DCE           1276      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001B80  C9FC 0006               1277      MULS        #6, D4          *GET JUMP
00001B84  4EB0 4000               1278      JSR         0(A0, D4)       *JUMP
00001B88  4EB9 0000204A           1279      JSR         COMMA
00001B8E  4EB9 000020AC           1280      JSR         SPACE
00001B94  3A07                    1281      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
00001B96  E94D                    1282      LSL.W       #4, D5      *
00001B98  E04D                    1283      LSR.W       #8, D5      *
00001B9A  EA4D                    1284      LSR.W       #5, D5      *D5 DESTINATION REGISTER
00001B9C                          1285      
00001B9C  4EB9 00001DFE           1286      JSR         DATA_0
00001BA2  16BC 0000               1287      MOVE.B      #00, (A3)
00001BA6                          1288      
00001BA6  6000 F6C8               1289      BRA         VALID_OPCODE
00001BAA                          1290  EA_BCC          *0 INVALID (I THINK)
00001BAA  4285                    1291      CLR.L       D5
00001BAC  3E00                    1292      MOVE.W      D0, D7
00001BAE                          1293      
00001BAE  3807                    1294      MOVE.W      D7, D4
00001BB0  E94C                    1295      LSL.W       #4, D4
00001BB2  E04C                    1296      LSR.W       #8, D4
00001BB4  E84C                    1297      LSR.W       #4, D4   *D4 = BINARY CONDITION CODE
00001BB6  4EB9 00001F9C           1298      JSR         PRINT_BCC
00001BBC  4EB9 000020AC           1299      JSR         SPACE
00001BC2  3807                    1300      MOVE.W      D7, D4
00001BC4  E14C                    1301      LSL.W       #8, D4
00001BC6  E04C                    1302      LSR.W       #8, D4 *NOW THE DISPLACEMENT IS IN D4 BYTE
00001BC8  6000 0002               1303      BRA         DISPLACEMENT
00001BCC                          1304      
00001BCC                          1305  DISPLACEMENT
00001BCC  B83C 0000               1306      CMP.B       #$00, D4
00001BD0  6700 000E               1307      BEQ         WORD_BIT
00001BD4  B83C 00FF               1308      CMP.B       #$FF, D4
00001BD8  6700 0010               1309      BEQ         LONG_BIT
00001BDC  6000 0016               1310      BRA         DISP_DONE
00001BE0                          1311      
00001BE0                          1312  WORD_BIT
00001BE0  4EB9 00001E44           1313      JSR         ABSW_5
00001BE6  6000 000C               1314      BRA         DISP_DONE
00001BEA                          1315  LONG_BIT
00001BEA  4EB9 00001E5A           1316      JSR         ABSL_6
00001BF0  6000 0002               1317      BRA         DISP_DONE
00001BF4                          1318      
00001BF4                          1319  DISP_DONE
00001BF4  16BC 0000               1320      MOVE.B      #00, (A3)
00001BF8  6000 F676               1321      BRA         VALID_OPCODE
00001BFC                          1322  EA_JSR   *5 INVALID; DONE
00001BFC  4285                    1323      CLR.L         D5
00001BFE                          1324  
00001BFE  3E00                    1325      MOVE.W      D0, D7
00001C00                          1326      
00001C00  4EB9 000020AC           1327      JSR         SPACE
00001C06  3807                    1328      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001C08  E14C                    1329      LSL.W       #8, D4      *
00001C0A  E54C                    1330      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
00001C0C  E04C                    1331      LSR.W       #8, D4      *
00001C0E  EA4C                    1332      LSR.W       #5, D4      *D4 = SOURCE MODE
00001C10                          1333      
00001C10  3A07                    1334      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
00001C12  E14D                    1335      LSL.W       #8, D5      *
00001C14  EB4D                    1336      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001C16  E04D                    1337      LSR.W       #8, D5      *
00001C18  EA4D                    1338      LSR.W       #5, D5      *D5 = SOURCE REGISTER
00001C1A                          1339      
00001C1A  4EB9 00001FCE           1340      JSR         MODE_CHOOSER  *INCASE MODE IS $111
00001C20  4EB9 00001D7A           1341      JSR         LEA_ERROR_CHECK
00001C26  41F9 00001DCE           1342      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001C2C  C9FC 0006               1343      MULS        #6, D4        *GET JUMP
00001C30  4EB0 4000               1344      JSR         0(A0, D4)     *JUM
00001C34                          1345      
00001C34  16BC 0000               1346      MOVE.B      #00, (A3)
00001C38                          1347      
00001C38  6000 F636               1348      BRA         VALID_OPCODE
00001C3C                          1349  EA_MOVEM
00001C3C                          1350          *REG-->MEM
00001C3C                          1351  
00001C3C  4285                    1352      CLR.L       D5
00001C3E                          1353  
00001C3E  3E00                    1354      MOVE.W      D0, D7 *D6
00001C40  3807                    1355      MOVE.W      D7, D4 *D6
00001C42  EB4C                    1356      LSL.W       #5, D4
00001C44  E94C                    1357      LSL.W       #4, D4
00001C46  E04C                    1358      LSR.W       #8, D4
00001C48  EE4C                    1359      LSR.W       #7, D4
00001C4A  4EB9 00001FB6           1360      JSR         REG_SIZE    
00001C50                          1361      
00001C50  3A07                    1362      MOVE.W      D7, D5
00001C52  EB4D                    1363      LSL.W       #5, D5
00001C54  E04D                    1364      LSR.W       #8, D5
00001C56  EE4D                    1365      LSR.W       #7, D5
00001C58  BA3C 0000               1366      CMP.B       #0, D5       *D5 NOW CONTAINS TYPE
00001C5C  6700 0042               1367      BEQ         PRINT_LIST
00001C60  BA3C 0000               1368  EAP CMP.B       #0, D5      *IF ITS A ZERO, THAT MEANS WE JUST JUMPED HERE 
00001C64  6700 00B2               1369      BEQ         COMMA_SPACE *FROM CHECK TYPE, ELSE MEANS ITS UNALTERED
00001C68  E09D                    1370  EAS ROR.L       #8, D5
00001C6A  3807                    1371      MOVE.W      D7, D4      
00001C6C  E14C                    1372      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001C6E  E54C                    1373      LSL.W       #2, D4
00001C70  E04C                    1374      LSR.W       #8, D4      *
00001C72  EA4C                    1375      LSR.W       #5, D4      *D4 = EA MODE
00001C74                          1376      
00001C74  3A07                    1377      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001C76  E14D                    1378      LSL.W       #8, D5  
00001C78  EB4D                    1379      LSL.W       #5, D5      *
00001C7A  E04D                    1380      LSR.W       #8, D5
00001C7C  EA4D                    1381      LSR.W       #5, D5      * D5 = EA REGISTER
00001C7E                          1382      
00001C7E  4EB9 00001FCE           1383      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001C84  41F9 00001DCE           1384      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001C8A  C9FC 0006               1385      MULS        #6, D4          *GET JUMP
00001C8E  4EB0 4000               1386      JSR         0(A0, D4)       *JUMP
00001C92                          1387      
00001C92  E19D                    1388      ROL.L       #8, D5
00001C94  BA7C 0001               1389      CMP.W       #1, D5 *IF ONE THEN THIS WAS PRINTED FIRST
00001C98  6700 0006               1390      BEQ         PRINT_LIST
00001C9C                          1391      
00001C9C  6000 009A               1392      BRA         DONE_PRINTING
00001CA0                          1393  PRINT_LIST
00001CA0  BA3C 0001               1394      CMP.B       #1, D5 
00001CA4  6700 0082               1395      BEQ         COMMA_SPACE2
00001CA8  E09D                    1396  EA2 ROR.L       #8, D5
00001CAA  548A                    1397      ADD.L       #2, A2
00001CAC  3A12                    1398      MOVE.W      (A2), D5  
00001CAE  143C 0008               1399      MOVE.B      #$8, D2
00001CB2  4244                    1400      CLR         D4
00001CB4                          1401  FOR_LOOP    
00001CB4  B404                    1402      CMP.B       D4, D2
00001CB6  6700 0026               1403      BEQ         ADDRESS_REGISTERS
00001CBA  E25D                    1404      ROR.W       #1, D5
00001CBC  6000 0006               1405      BRA         PRINT_CURRENT
00001CC0  5244                    1406  JFZ ADDQ        #1, D4
00001CC2  60F0                    1407      BRA         FOR_LOOP
00001CC4                          1408      
00001CC4                          1409  PRINT_CURRENT
00001CC4  64FA                    1410      BCC         JFZ *D5 = <0000 0001 0000 0000 XXXX XXXX XXXX XXXX>
00001CC6  E09D                    1411      ROR.L       #8, D5
00001CC8  E09D                    1412      ROR.L       #8, D5 
00001CCA  1A04                    1413      MOVE.B      D4, D5 *D5 = <XXXX XXXX XXXX XXXX 0000 0001 0000 000Y>
00001CCC  4EB9 00001DFE           1414      JSR         DATA_0
00001CD2  4EB9 000020E6           1415      JSR         SLASH
00001CD8  E19D                    1416      ROL.L       #8, D5
00001CDA  E19D                    1417      ROL.L       #8, D5
00001CDC  60E2                    1418      BRA         JFZ
00001CDE                          1419      
00001CDE                          1420  ADDRESS_REGISTERS  *LEFT OFF HERE
00001CDE  4244                    1421      CLR         D4
00001CE0                          1422  FOR_2
00001CE0  B404                    1423      CMP.B       D4, D2
00001CE2  6700 0026               1424      BEQ         CHECK_TYPE
00001CE6  E25D                    1425      ROR.W       #1, D5
00001CE8  6000 0006               1426      BRA         EA_PRINT_ADDRESS
00001CEC  5244                    1427  JFF ADDQ        #1, D4
00001CEE  60F0                    1428      BRA         FOR_2
00001CF0                          1429      
00001CF0                          1430  EA_PRINT_ADDRESS
00001CF0  64FA                    1431      BCC         JFF
00001CF2  E09D                    1432      ROR.L       #8, D5
00001CF4  E09D                    1433      ROR.L       #8, D5
00001CF6  1A04                    1434      MOVE.B      D4, D5
00001CF8  4EB9 000020E6           1435      JSR         SLASH
00001CFE  4EB9 00001E0C           1436      JSR         ADDR_1
00001D04  E19D                    1437      ROL.L       #8, D5
00001D06  E19D                    1438      ROL.L       #8, D5
00001D08  60E2                    1439      BRA         JFF  
00001D0A                          1440  CHECK_TYPE
00001D0A  E19D                    1441      ROL.L       #8, D5
00001D0C  BA3C 0000               1442      CMP.B       #0, D5   *IF TYPE IS 0 THE LIST HAS BEEN PRINTED FIRST  
00001D10  6700 FF4E               1443      BEQ         EAP      *THEREFORE ITS TIME TO PRINT THE EAP
00001D14  6600 0022               1444      BNE         DONE_PRINTING
00001D18                          1445      
00001D18                          1446  COMMA_SPACE
00001D18  4EB9 0000204A           1447      JSR         COMMA
00001D1E  4EB9 000020AC           1448      JSR         SPACE
00001D24  6000 FF42               1449      BRA         EAS
00001D28                          1450      
00001D28                          1451  COMMA_SPACE2
00001D28  4EB9 0000204A           1452      JSR         COMMA
00001D2E  4EB9 000020AC           1453      JSR         SPACE
00001D34  6000 FF72               1454      BRA         EA2
00001D38                          1455      
00001D38                          1456  DONE_PRINTING
00001D38  16BC 0000               1457      MOVE.B      #00, (A3)
00001D3C  6000 F532               1458      BRA         VALID_OPCODE
00001D40                          1459  
00001D40                          1460  
00001D40                          1461  
00001D40                          1462  
00001D40                          1463  
00001D40                          1464  
00001D40                          1465  
00001D40                          1466  
00001D40                          1467  
00001D40                          1468  
00001D40                          1469  
00001D40                          1470  
00001D40                          1471  
00001D40                          1472  
00001D40                          1473  
00001D40                          1474  
00001D40                          1475  BYEBYE
00001D40  FFFF FFFF               1476      SIMHALT
00001D44                          1477  
00001D44                          1478  
00001D44                          1479  
00001D44                          1480  
00001D44                          1481  
00001D44                          1482  
00001D44                          1483  
00001D44                          1484  
00001D44                          1485  
00001D44                          1486  
00001D44                          1487  
00001D44                          1488  
00001D44                          1489  
00001D44                          1490  
00001D44                          1491  
00001D44                          1492  MOVE_ERROR_CHECK       *only invalid move is desn addr reg
00001D44  B83C 0001               1493      CMP.B       #1, D4 *if d4 is one, dest is addr reg
00001D48  6700 03A4               1494      BEQ         INVALID
00001D4C  4E75                    1495      RTS
00001D4E                          1496      
00001D4E                          1497  ADD_ERROR_CHECK  *COVERS ALL SHIFTS
00001D4E  B83C 0007               1498      CMP.B       #7, D4
00001D52  6700 0072               1499      BEQ         EAT_INVALID
00001D56  B83C 0001               1500      CMP.B       #1, D4
00001D5A  6700 0392               1501      BEQ         INVALID
00001D5E  B83C 0000               1502      CMP.B       #0, D4
00001D62  6700 038A               1503      BEQ         INVALID
00001D66  4E75                    1504      RTS 
00001D68                          1505      
00001D68                          1506  ADDI_ERROR_CHECK *COVERS CLR
00001D68  B83C 0001               1507      CMP.B       #1, D4
00001D6C  6700 0380               1508      BEQ         INVALID
00001D70  B83C 0007               1509      CMP.B       #7, D4
00001D74  6700 0050               1510      BEQ         EAT_INVALID
00001D78  4E75                    1511      RTS
00001D7A                          1512      
00001D7A                          1513  LEA_ERROR_CHECK *COVERS JSR
00001D7A  B83C 0000               1514      CMP.B       #0, D4
00001D7E  6700 036E               1515      BEQ         INVALID
00001D82  B83C 0001               1516      CMP.B       #1, D4
00001D86  6700 0366               1517      BEQ         INVALID
00001D8A  B83C 0003               1518      CMP.B       #3, D4
00001D8E  6700 035E               1519      BEQ         INVALID
00001D92  B83C 0004               1520      CMP.B       #4, D4
00001D96  6700 0356               1521      BEQ         INVALID
00001D9A  B83C 0007               1522      CMP.B       #7, D4
00001D9E  6700 0026               1523      BEQ         EAT_INVALID
00001DA2  4E75                    1524      RTS
00001DA4                          1525      
00001DA4                          1526  MOVEM_ERROR_CHECK *0, 1, 4, 7
00001DA4  B83C 0000               1527      CMP.B       #0, D4
00001DA8  6700 0344               1528      BEQ         INVALID
00001DAC  B83C 0001               1529      CMP.B       #1, D4
00001DB0  6700 033C               1530      BEQ         INVALID
00001DB4  B83C 0004               1531      CMP.B       #4, D4
00001DB8  6700 0334               1532      BEQ         INVALID
00001DBC  B83C 0007               1533      CMP.B       #7, D4
00001DC0  6700 0004               1534      BEQ         EAT_INVALID
00001DC4  4E75                    1535      RTS
00001DC6                          1536      
00001DC6                          1537      
00001DC6                          1538      
00001DC6                          1539      *assuming FOR NOW that it always eats a long
00001DC6                          1540  EAT_INVALID *EATS THE NEXT TWO WORD VALUES... THEN CALLS INVALID
00001DC6  548A                    1541      ADD.L       #2, A2      *EAT THE FIRST WORD
00001DC8  548A                    1542      ADD.L       #2, A2      *EAT THE SECOND WORD
00001DCA  6000 0322               1543      BRA         INVALID
00001DCE                          1544  
00001DCE                          1545  
00001DCE                          1546  
00001DCE                          1547  
00001DCE                          1548  
00001DCE                          1549  
00001DCE                          1550  
00001DCE                          1551  
00001DCE                          1552  
00001DCE                          1553  
00001DCE                          1554  
00001DCE                          1555  
00001DCE                          1556  
00001DCE                          1557  
00001DCE                          1558  
00001DCE                          1559  
00001DCE                          1560  
00001DCE                          1561  
00001DCE  4EF9 00001DFE           1562  MODE_JUMP       JMP     DATA_0
00001DD4  4EF9 00001E0C           1563                  JMP     ADDR_1
00001DDA  4EF9 00001E1A           1564                  JMP     ADDI_2
00001DE0  4EF9 00001E2C           1565                  JMP     ADDP_3
00001DE6  4EF9 00001E38           1566                  JMP     ADDM_4
00001DEC  4EF9 00001E44           1567                  JMP     ABSW_5
00001DF2  4EF9 00001E5A           1568                  JMP     ABSL_6
00001DF8  4EF9 00001E7E           1569                  JMP     IMME_7
00001DFE                          1570  
00001DFE                          1571  DATA_0 *DONE
00001DFE  16F9 000022EC           1572      MOVE.B      M_DREG, (A3)+
00001E04  4EB9 00001EEE           1573      JSR         GET_REG
00001E0A  4E75                    1574      RTS
00001E0C                          1575  
00001E0C                          1576  ADDR_1 *ADD CONDITIONS FOR SOURCE ONLY, AND NEVER BYTES
00001E0C  16F9 000022EE           1577      MOVE.B      M_AREG, (A3)+
00001E12  4EB9 00001EEE           1578      JSR         GET_REG
00001E18  4E75                    1579      RTS
00001E1A                          1580   
00001E1A                          1581  ADDI_2 *DONE
00001E1A  4EB9 0000208C           1582      JSR         OPEN
00001E20  4EB8 1E0C               1583      JSR         ADDR_1
00001E24  4EB9 00002094           1584      JSR         CLOSE
00001E2A  4E75                    1585      RTS
00001E2C                          1586      
00001E2C                          1587  ADDP_3 *DONE
00001E2C  4EB8 1E1A               1588      JSR         ADDI_2
00001E30  4EB9 0000209C           1589      JSR         PLUS
00001E36  4E75                    1590      RTS
00001E38                          1591      
00001E38                          1592  ADDM_4 *DONE
00001E38  4EB9 000020A4           1593      JSR         SUB
00001E3E  4EB8 1E1A               1594      JSR         ADDI_2
00001E42  4E75                    1595      RTS
00001E44                          1596      
00001E44                          1597  ABSW_5  *DONE
00001E44  548A                    1598      ADD.L       #2, A2      *INCREMENT INTO WORD ADDRESS
00001E46  141A                    1599      MOVE.B      (A2)+, D2
00001E48  E15A                    1600      ROL         #8, D2
00001E4A  1412                    1601      MOVE.B      (A2), D2
00001E4C  534A                    1602      SUB         #1, A2  
00001E4E  4EB9 000020B4           1603      JSR         CASH
00001E54  6100 01A6               1604      BSR         OUTPUT_HEX
00001E58  4E75                    1605      RTS
00001E5A                          1606  
00001E5A                          1607   
00001E5A                          1608  ABSL_6 *
00001E5A  4EB9 000020B4           1609      JSR         CASH
00001E60  548A                    1610      ADD.L       #2, A2      *INCREMENT INTO WORD
00001E62  141A                    1611      MOVE.B      (A2)+, D2
00001E64  E15A                    1612      ROL         #8, D2
00001E66  1412                    1613      MOVE.B      (A2), D2
00001E68  534A                    1614      SUB         #1, A2      *WHATS WITH THE SUB 1
00001E6A  6100 0190               1615      BSR         OUTPUT_HEX
00001E6E                          1616      
00001E6E                          1617      
00001E6E  548A                    1618      ADD.L       #2, A2      *IDCREMENT INTO NEXT WORK
00001E70  141A                    1619      MOVE.B      (A2)+, D2
00001E72  E15A                    1620      ROL         #8, D2
00001E74  1412                    1621      MOVE.B      (A2), D2
00001E76  534A                    1622      SUB         #1, A2          *WHY THE SUB 1
00001E78  6100 0182               1623      BSR         OUTPUT_HEX
00001E7C  4E75                    1624      RTS
00001E7E                          1625      
00001E7E                          1626  IMME_7  *FOR NOW ONLY WORKING WITH IMMEDIATE HEX VALUES
00001E7E  4EB9 00002052           1627      JSR         POUND
00001E84  4EB9 000020B4           1628      JSR         CASH
00001E8A                          1629      
00001E8A  548A                    1630      ADD.L       #2, A2
00001E8C  141A                    1631      MOVE.B      (A2)+, D2
00001E8E  E15A                    1632      ROL         #8, D2
00001E90  1412                    1633      MOVE.B      (A2), D2
00001E92  534A                    1634      SUB         #1, A2
00001E94  6100 0166               1635      BSR         OUTPUT_HEX
00001E98                          1636      *if size is a 2, 7, or 6, its a long
00001E98                          1637      *d4 needs to always hold the size
00001E98  4EB9 00001EA0           1638      JSR         ADD_WORD
00001E9E  4E75                    1639      RTS
00001EA0                          1640  
00001EA0                          1641  ADD_WORD
00001EA0  E19D                    1642      ROL.L       #8, D5
00001EA2  BA3C 0002               1643      CMP.B       #2, D5
00001EA6  6700 0014               1644      BEQ         ADD_NEW
00001EAA  BA3C 0006               1645      CMP.B       #6, D5
00001EAE  6700 000C               1646      BEQ         ADD_NEW
00001EB2  BA3C 0007               1647      CMP.B       #7, D5
00001EB6  6700 0004               1648      BEQ         ADD_NEW
00001EBA  4E75                    1649      RTS
00001EBC                          1650      
00001EBC                          1651  ADD_NEW
00001EBC  E09D                    1652      ROR.L       #8, D5
00001EBE  548A                    1653      ADD.L       #2, A2
00001EC0  141A                    1654      MOVE.B      (A2)+, D2
00001EC2  E15A                    1655      ROL         #8, D2
00001EC4  1412                    1656      MOVE.B      (A2), D2
00001EC6  534A                    1657      SUB         #1, A2
00001EC8  6100 0132               1658      BSR         OUTPUT_HEX
00001ECC  4E75                    1659      RTS
00001ECE                          1660  GET_SIZE
00001ECE  4EB9 0000205A           1661      JSR         DOT
00001ED4  BA3C 0001               1662      CMP.B       #1, D5
00001ED8  6700 0196               1663      BEQ         BYTE
00001EDC  BA3C 0003               1664      CMP.B       #3, D5
00001EE0  6700 0180               1665      BEQ         WORD
00001EE4  BA3C 0002               1666      CMP.B       #2, D5
00001EE8  6700 0194               1667      BEQ         LONG  
00001EEC  4E75                    1668      RTS
00001EEE                          1669      
00001EEE                          1670  GET_REG ******************
00001EEE  2205                    1671      MOVE.L      D5, D1 
00001EF0  4EB8 12DC               1672      JSR         CONVERT_TO_ASCII
00001EF4  16C1                    1673      MOVE.B      D1, (A3)+
00001EF6  4E75                    1674      RTS
00001EF8                          1675      
00001EF8                          1676  GET_OPMODE          
00001EF8  4EB9 0000205A           1677      JSR         DOT
00001EFE  BA3C 0003               1678      CMP.B       #3, D5
00001F02  6700 015E               1679      BEQ         WORD
00001F06  BA3C 0007               1680      CMP.B       #7, D5
00001F0A  6700 0172               1681      BEQ         LONG
00001F0E  4E75                    1682      RTS
00001F10                          1683      
00001F10                          1684  GET_OPMODE_MATH
00001F10  4EB9 0000205A           1685      JSR         DOT
00001F16  BA3C 0000               1686      CMP.B       #0, D5
00001F1A  6700 0154               1687      BEQ         BYTE
00001F1E  BA3C 0004               1688      CMP.B       #4, D5
00001F22  6700 014C               1689      BEQ         BYTE
00001F26  BA3C 0001               1690      CMP.B       #1, D5
00001F2A  6700 0136               1691      BEQ         WORD
00001F2E  BA3C 0005               1692      CMP.B       #5, D5
00001F32  6700 012E               1693      BEQ         WORD
00001F36  BA3C 0002               1694      CMP.B       #2, D5
00001F3A  6700 0142               1695      BEQ         LONG
00001F3E  BA3C 0006               1696      CMP.B       #6, D5
00001F42  6700 013A               1697      BEQ         LONG
00001F46  4E75                    1698      RTS
00001F48                          1699      
00001F48                          1700  GET_DATA ******************
00001F48  4EB9 00002052           1701      JSR         POUND
00001F4E  BA3C 0000               1702      CMP.B       #0, D5
00001F52  6700 000C               1703      BEQ         PRINT_8
00001F56  3405                    1704      MOVE.W      D5, D2
00001F58  4EB9 00002030           1705      JSR         QHX
00001F5E  4E75                    1706      RTS
00001F60                          1707      
00001F60                          1708  PRINT_8 ********
00001F60  343C 0008               1709      MOVE.W      #8, D2
00001F64  4EB9 00002030           1710      JSR         QHX
00001F6A  4E75                    1711      RTS
00001F6C                          1712      
00001F6C                          1713  GET_SIZE_ADDI
00001F6C  4EB9 0000205A           1714      JSR         DOT
00001F72  BA3C 0000               1715      CMP.B       #0, D5
00001F76  6700 00F8               1716      BEQ         BYTE
00001F7A  BA3C 0001               1717      CMP.B       #1, D5
00001F7E  6700 00E2               1718      BEQ         WORD
00001F82  BA3C 0002               1719      CMP.B       #2, D5
00001F86  6700 00F6               1720      BEQ         LONG  
00001F8A  4E75                    1721      RTS
00001F8C                          1722      
00001F8C                          1723  TYPE_CHOOSER
00001F8C  B83C 0000               1724      CMP.B       #0, D4      *IF IMMEDIATE
00001F90  67B6                    1725      BEQ         GET_DATA    *IF BRANCHED  ->  #1 IS NOW PRINTED
00001F92  B83C 0001               1726      CMP.B       #1, D4      *IF A DATA REG
00001F96  6700 FE66               1727      BEQ         DATA_0
00001F9A  4E75                    1728      RTS
00001F9C                          1729      
00001F9C                          1730  PRINT_BCC
00001F9C  B83C 0004               1731      CMP.B       #4, D4
00001FA0  6700 011A               1732      BEQ         CC
00001FA4  B83C 000E               1733      CMP.B       #14, D4
00001FA8  6700 0120               1734      BEQ         GT
00001FAC  B83C 000F               1735      CMP.B       #15, D4
00001FB0  6700 0126               1736      BEQ         LE
00001FB4  4E75                    1737      RTS
00001FB6                          1738      
00001FB6                          1739  REG_SIZE
00001FB6  4EB9 0000205A           1740      JSR         DOT
00001FBC  B83C 0000               1741      CMP.B       #0, D4
00001FC0  6700 00A0               1742      BEQ         WORD
00001FC4  B83C 0001               1743      CMP.B       #1, D4
00001FC8  6700 00B4               1744      BEQ         LONG
00001FCC  4E75                    1745      RTS
00001FCE                          1746  MODE_CHOOSER
00001FCE  B83C 0007               1747      CMP.B       #7, D4
00001FD2  6700 0004               1748      BEQ         NEW_MODE
00001FD6  4E75                    1749      RTS
00001FD8                          1750      
00001FD8                          1751  NEW_MODE
00001FD8  BA3C 0000               1752      CMP.B       #0, D5 *CHECK REGISTER(D5), WORD ADDRESS?
00001FDC  6700 001A               1753      BEQ         TO_FIVE *CHANGE MODE (D4) TO 5
00001FE0  BA3C 0001               1754      CMP.B       #1, D5 *CHECK REGISTER(D5), LONG ADDRESS?
00001FE4  6700 000E               1755      BEQ         TO_SIX *CHANGE MODE(D4) TO 6
00001FE8  BA3C 0004               1756      CMP.B       #4, D5 *for immediate data
00001FEC  6700 0004               1757      BEQ         TO_EIGHT
00001FF0  4E75                    1758      RTS
00001FF2                          1759      
00001FF2                          1760  TO_EIGHT
00001FF2  4E75                    1761      RTS
00001FF4                          1762      
00001FF4                          1763  TO_SIX  
00001FF4  5304                    1764      SUB.B      #1, D4
00001FF6  4E75                    1765      RTS
00001FF8                          1766  
00001FF8                          1767  TO_FIVE
00001FF8  5504                    1768      SUB.B      #2, D4
00001FFA  4E75                    1769      RTS
00001FFC                          1770  
00001FFC                          1771  OUTPUT_HEX
00001FFC                          1772      *OUTPUT 1ST
00001FFC  3802                    1773      MOVE.W      D2, D4              *D7 = <1010 1111 0101 0111>
00001FFE  E04C                    1774      LSR.W       #8, D4              *D7 = <0000 0000 1010 1111>
00002000  E84C                    1775      LSR.W       #4, D4              *D7 = <0000 0000 0000 1010>
00002002  1204                    1776      MOVE.B      D4, D1
00002004  6100 F2D6               1777      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
00002008  6100 003C               1778      BSR         ADD_CHAR         *print the char in D1  
0000200C                          1779      *OUTPUT 2ND
0000200C  3802                    1780      MOVE.W      D2, D4
0000200E  E94C                    1781      LSL.W       #4, D4              *SHIFT OUT FURTHEST RIGHT BIT
00002010  E04C                    1782      LSR.W       #8, D4
00002012  E84C                    1783      LSR.W       #4, D4  
00002014  1204                    1784      MOVE.B      D4, D1
00002016  6100 F2C4               1785      BSR         CONVERT_TO_ASCII
0000201A  6100 002A               1786      BSR         ADD_CHAR
0000201E                          1787      *OUTPUT 3RD
0000201E  3802                    1788  MOQ MOVE.W      D2, D4
00002020  E14C                    1789      LSL.W       #8, D4
00002022  E04C                    1790      LSR.W       #8, D4
00002024  E84C                    1791      LSR.W       #4, D4
00002026  1204                    1792      MOVE.B      D4, D1
00002028  6100 F2B2               1793      BSR         CONVERT_TO_ASCII
0000202C  6100 0018               1794      BSR         ADD_CHAR
00002030                          1795      *OUTPUT 4TH
00002030  3802                    1796  QHX MOVE.W      D2, D4  *D7 = <1010 1111 0101 0111>
00002032  E14C                    1797      LSL.W       #8, D4  *     <0101 0111 0000 0000>
00002034  E94C                    1798      LSL.W       #4, D4  *     <0111 0000 0000 0000>
00002036  E04C                    1799      LSR.W       #8, D4  *     <
00002038  E84C                    1800      LSR.W       #4, D4
0000203A  1204                    1801      MOVE.B      D4, D1
0000203C  6100 F29E               1802      BSR         CONVERT_TO_ASCII
00002040  6100 0004               1803      BSR         ADD_CHAR
00002044  4E75                    1804      RTS
00002046                          1805                                     *continue converting            
00002046                          1806  ADD_CHAR ********
00002046  16C1                    1807      MOVE.B      D1, (A3)+
00002048  4E75                    1808      RTS
0000204A                          1809  
0000204A                          1810  COMMA
0000204A  16F9 000022D8           1811      MOVE.B      M_COMMA, (A3)+
00002050  4E75                    1812      RTS
00002052                          1813      
00002052                          1814  POUND
00002052  16F9 000022DA           1815      MOVE.B      M_POUND, (A3)+
00002058  4E75                    1816      RTS
0000205A                          1817          
0000205A                          1818  DOT
0000205A  16F9 000022DC           1819      MOVE.B      M_DOT, (A3)+
00002060  4E75                    1820      RTS   
00002062                          1821  
00002062                          1822  WORD
00002062  16F9 000022DE           1823      MOVE.B      M_WORD, (A3)+
00002068  4EB9 000020AC           1824      JSR         SPACE
0000206E  4E75                    1825      RTS
00002070                          1826  
00002070                          1827  BYTE
00002070  16F9 000022E0           1828      MOVE.B      M_BYTE, (A3)+
00002076  4EB9 000020AC           1829      JSR         SPACE
0000207C  4E75                    1830      RTS
0000207E                          1831      
0000207E                          1832  LONG
0000207E  16F9 000022E2           1833      MOVE.B      M_LONG, (A3)+
00002084                          1834      
00002084  4EB9 000020AC           1835      JSR         SPACE
0000208A  4E75                    1836      RTS
0000208C                          1837      
0000208C                          1838  OPEN
0000208C  16F9 000022E4           1839      MOVE.B      M_OPEN, (A3)+
00002092  4E75                    1840      RTS
00002094                          1841  
00002094                          1842  CLOSE
00002094  16F9 000022E6           1843      MOVE.B      M_CLOSE, (A3)+
0000209A  4E75                    1844      RTS
0000209C                          1845      
0000209C                          1846  PLUS
0000209C  16F9 000022E8           1847      MOVE.B      M_PLUS, (A3)+
000020A2  4E75                    1848      RTS
000020A4                          1849      
000020A4                          1850  SUB
000020A4  16F9 000022EA           1851      MOVE.B      M_SUB, (A3)+
000020AA  4E75                    1852      RTS
000020AC                          1853      
000020AC                          1854  SPACE
000020AC  16F9 00002258           1855      MOVE.B      M_SPACE, (A3)+
000020B2  4E75                    1856      RTS    
000020B4                          1857      
000020B4                          1858  CASH
000020B4  16F9 000022D6           1859      MOVE.B      M_CASH, (A3)+
000020BA  4E75                    1860      RTS
000020BC                          1861  
000020BC                          1862  CC
000020BC  16F9 000022F0           1863      MOVE.B      M_C, (A3)+
000020C2  16F9 000022F0           1864      MOVE.B      M_C, (A3)+
000020C8  4E75                    1865      RTS
000020CA                          1866      
000020CA                          1867  GT
000020CA  16F9 000022F2           1868      MOVE.B      M_G, (A3)+
000020D0  16F9 000022F4           1869      MOVE.B      M_T, (A3)+
000020D6  4E75                    1870      RTS
000020D8                          1871  
000020D8                          1872  LE
000020D8  16F9 000022F8           1873      MOVE.B      M_L, (A3)+
000020DE  16F9 000022F6           1874      MOVE.B      M_E, (A3)+
000020E4  4E75                    1875      RTS
000020E6                          1876      
000020E6                          1877  SLASH
000020E6  16F9 000022FA           1878      MOVE.B      M_SLASH, (A3)+
000020EC  4E75                    1879      RTS
000020EE                          1880      
000020EE                          1881  INVALID
000020EE  16BC 0000               1882      MOVE.B      #00, (A3)
000020F2  6000 F0F2               1883      BRA         INVALID_OPCODE
000020F6                          1884      
000020F6                          1885  
000020F6  =0000000D               1886  CR      EQU     $0D
000020F6  =0000000A               1887  LF      EQU     $0A
000020F6                          1888  
000020F6                          1889  
000020F6                          1890  
000020F6                          1891  
000020F6                          1892  
000020F6                          1893  
000020F6                          1894  
000020F6                          1895  
000020F6                          1896  
000020F6                          1897  
000020F6                          1898  
000020F6                          1899  
000020F6                          1900  
000020F6                          1901  
000020F6                          1902  
000020F6                          1903  
000020F6                          1904  
000020F6                          1905  
000020F6                          1906  
000020F6                          1907  
000020F6                          1908  
000020F6                          1909  -------------------- end include --------------------
000020F6                          1910  
000020F6                          1911  END
000020F6  4EB8 12FC               1912      JSR             IM_NEW_LINE
000020FA  43F9 00002249           1913      LEA             M_END,A1
00002100  103C 000E               1914      MOVE.B          #14,D0
00002104  4E4F                    1915      TRAP            #15
00002106  FFFF FFFF               1916      SIMHALT             ; halt simulator
0000210A                          1917  
0000210A  =0000000D               1918  CR          EQU     $0D
0000210A  =0000000A               1919  LF          EQU     $0A
0000210A                          1920  
0000210A= 50 6C 65 61 73 65 ...   1921  M_INPUT_START DC.B 'Please enter starting memory address in hexadecimal:',CR,LF,0
00002141= 50 6C 65 61 73 65 ...   1922  M_INPUT_END   DC.B 'Please enter ending memory address in hexadecimal:',CR,LF,0
00002176= 49 6E 76 61 6C 69 ...   1923  M_INVALID     DC.B 'Invalid value. Please enter a valid value: ',CR,LF,0
000021A4= 45 71 75 61 6C 20 ...   1924  M_EQUAL       DC.B 'Equal values. No memory read. Please enter new values',CR,LF,0
000021DC= 44 41 54 41 20 20 ...   1925  M_DATA        DC.B 'DATA    ',0
000021E5= 20 20 20 20 00          1926  M_TAB         DC.B '    ',0
000021EA= 50 72 65 73 73 20 ...   1927  M_PRESS_CONT  DC.B 'Press any key to continue',0
00002204= 46 69 6E 69 73 68 ...   1928  M_FINISHED    DC.B 'Finished Reading Memory',CR,LF,0
0000221E= 57 6F 75 6C 64 20 ...   1929  M_CONTINUE    DC.B 'Would you like to read memory again? (Y/N)',0
00002249= 50 72 6F 67 72 61 ...   1930  M_END         DC.B 'Program Exit',CR,LF,0
00002258                          1931  
00002258  =00000500               1932  STRING_START    EQU     $0500
00002258  =00000400               1933  DATA_START      EQU     $0400
00002258                          1934  
00002258  =00000100               1935  MEM_START       EQU     $0100
00002258  =00000200               1936  MEM_END         EQU     $0200
00002258                          1937  
00002258= 20 00                   1938  M_SPACE       DC.B  ' ',0
0000225A= 0D 0A 00                1939  M_NEW_LINE    DC.B  '',CR,LF,0
0000225D                          1940  
0000225D= 41 44 44 49 00          1941  ADDI    DC.B    'ADDI',0
00002262= 4D 4F 56 45 00          1942  MOVE    DC.B    'MOVE',0
00002267= 4D 4F 56 45 41 00       1943  MOVEA   DC.B    'MOVEA',0
0000226D= 43 4C 52 00             1944  OPCLR   DC.B    'CLR',0
00002271= 4C 45 41 00             1945  OPLEA   DC.B    'LEA',0
00002275= 4A 53 52 00             1946  OPJSR   DC.B    'JSR',0
00002279= 4E 4F 50 00             1947  OPNOP   DC.B    'NOP',0
0000227D= 52 54 53 00             1948  OPRTS   DC.B    'RTS',0
00002281= 4D 4F 56 45 4D 00       1949  MOVEM   DC.B    'MOVEM',0
00002287= 41 44 44 51 00          1950  ADDQ    DC.B    'ADDQ',0
0000228C= 42 00                   1951  Bcc     DC.B    'B',0
0000228E= 4D 4F 56 45 51 00       1952  MOVEQ   DC.B    'MOVEQ',0
00002294= 44 49 56 55 00          1953  DIVU    DC.B    'DIVU',0
00002299= 4F 52 00                1954  OR      DC.B    'OR',0
0000229C= 53 55 42 00             1955  OPSUB   DC.B    'SUB',0
000022A0= 43 4D 50 00             1956  CMP     DC.B    'CMP',0
000022A4= 4D 55 4C 53 00          1957  MULS    DC.B    'MULS',0
000022A9= 41 4E 44 00             1958  AND     DC.B    'AND',0
000022AD= 41 44 44 00             1959  ADD     DC.B    'ADD',0
000022B1= 41 44 44 41 00          1960  ADDA    DC.B    'ADDA',0
000022B6= 4C 53 4C 00             1961  LSL     DC.B    'LSL',0
000022BA= 4C 53 52 00             1962  LSR     DC.B    'LSR',0
000022BE= 41 53 4C 00             1963  ASL     DC.B    'ASL',0
000022C2= 41 53 52 00             1964  ASR     DC.B    'ASR',0
000022C6= 52 4F 4C 00             1965  ROL     DC.B    'ROL',0
000022CA= 52 4F 52 00             1966  ROR     DC.B    'ROR',0
000022CE= 49 4E 56 41 4C 49 ...   1967  M_INVAL DC.B 'INVALID',0
000022D6= 24 00                   1968  M_CASH  DC.B '$',0
000022D8                          1969  *M_SPACE DC.B ' ',0
000022D8= 2C 00                   1970  M_COMMA DC.B ',',0
000022DA= 23 00                   1971  M_POUND DC.B '#',0
000022DC= 2E 00                   1972  M_DOT   DC.B '.',0
000022DE= 57 00                   1973  M_WORD  DC.B 'W',0
000022E0= 42 00                   1974  M_BYTE  DC.B 'B',0
000022E2= 4C 00                   1975  M_LONG  DC.B 'L',0
000022E4= 28 00                   1976  M_OPEN  DC.B '(',0
000022E6= 29 00                   1977  M_CLOSE DC.B ')',0
000022E8= 2B 00                   1978  M_PLUS  DC.B '+',0
000022EA= 2D 00                   1979  M_SUB   DC.B '-',0
000022EC= 44 00                   1980  M_DREG  DC.B 'D',0
000022EE= 41 00                   1981  M_AREG  DC.B 'A',0
000022F0= 43 00                   1982  M_C     DC.B 'C',0
000022F2= 47 00                   1983  M_G     DC.B 'G',0
000022F4= 54 00                   1984  M_T     DC.B 'T',0
000022F6= 45 00                   1985  M_E     DC.B 'E',0
000022F8= 4C 00                   1986  M_L     DC.B 'L',0
000022FA= 2F 00                   1987  M_SLASH DC.B '/',0
000022FC                          1988  
000022FC                          1989  
000022FC                          1990      INCLUDE         'demo_test.x68'
000022FC                          1991  
000022FC  =00007000               1992  start       EQU $00007000   * ORG and END address
000022FC                          1993  
000022FC                          1994  
00007000                          1995          ORG start
00007000                          1996  
00007000                          1997  
00007000  4E71                    1998          NOP         *Required
00007002  4E75                    1999          RTS         *Required
00007004                          2000  
00007004                          2001  
00007004  D441                    2002  add_start   ADD.W   D1,D2
00007006  0641 4E71               2003                  ADDI.W  #$4E71,D1
0000700A  5E87                    2004          ADDQ.L  #07,D7      
0000700C  D6DE                    2005          ADDA.W  (A6)+,A3
0000700E  DDFC 3000AAAA           2006          ADDA.L  #$3000AAAA,A6
00007014  0685 D50000AA           2007          ADDI.L  #$D50000AA,D5
0000701A  0646 5555               2008          ADDI.W  #$5555,D6
0000701E  0600 00FE               2009          ADDI.B  #$FE,D0
00007022  9441                    2010                  SUB.W   D1,D2
00007024                          2011  
00007024  1200                    2012  moves       MOVE.B  D0,D1
00007026  33CE F30045BB           2013          MOVE.W  A6,$F30045BB
0000702C  2000                    2014          MOVE.L  D0,D0
0000702E  2CC7                    2015          MOVE.L  D7,(A6)+
00007030  36BC FFD0               2016          MOVE.W  #$FFD0,(A3)
00007034  23F9 C00022AA 3000A0F8  2017          MOVE.L  $C00022AA,$3000A0F8
0000703E  2B08                    2018          MOVE.L  A0,-(A5)
00007040  3056                    2019          MOVEA.W (A6),A0
00007042  48A7 07E0               2020          MOVEM.W A0/A1/A2/D5/D6/D7,-(SP)
00007046  4CD8 1B07               2021          MOVEM.L (A0)+,D0/D1/D2/A4/A3/A0/A1
0000704A  7401                    2022          MOVEQ   #1,D2
0000704C                          2023          
0000704C  C6B9 8000A000           2024  ands        AND.L   $8000A000,D3
00007052  E128                    2025  shifts      LSL.B   D0,D0
00007054  E848                    2026          LSR.W   #4,D0
00007056  E3DA                    2027          LSL.W   (A2)+
00007058  EC27                    2028          ASR.B   D6,D7
0000705A  EB27                    2029          ASL.B   D5,D7
0000705C  E5BB                    2030  rolls       ROL.L   D2,D3
0000705E  E89E                    2031          ROR.L   #4,D6
00007060                          2032  
00007060  4204                    2033  clear       CLR.B   D4
00007062  45F9 DC00FF00           2034  load_addr   LEA $DC00FF00,A2
00007068  49D5                    2035          LEA (A5),A4
0000706A                          2036  
0000706A  BA13                    2037  compares    CMP.B   (A3),D5
0000706C  B4B9 ABC0FF00           2038          CMP.L   $ABC0FF00,D2
00007072  B8C2                    2039          CMPA.W  D2,A4
00007074                          2040          
00007074                          2041  
00007074                          2042  
00007074  4E93                    2043  jmplabel        JSR (A3)        * Address register indirect
00007076  64E8                    2044          BCC clear       
00007078  6EF0                    2045          BGT compares        
0000707A  6F00 0002               2046          BLE multiply
0000707E                          2047          
0000707E  C7C0                    2048  multiply    MULS    D0,D3       *Optional instruction
00007080  C1D6                    2049          MULS    (A6),D0     *Optional instruction
00007082  C3FC 4567               2050          MULS    #$4567,D1   *Optional instruction
00007086  8ADB                    2051          DIVU    (A3)+,D5    *Optional instruction
00007088  4E71                    2052          NOP
0000708A  4E71                    2053          NOP
0000708C  9882                    2054          SUB.L   D2,D4
0000708E  9E93                    2055          SUB.L   (A3),D7
00007090                          2056      
00007090                          2057  
00007090                          2058  
00007090                          2059  
00007090                          2060  
00007090                          2061  
00007090                          2062  
00007090                          2063  
00007090                          2064  
00007090                          2065  
00007090                          2066  
00007090                          2067  
00007090                          2068  
00007090                          2069  -------------------- end include --------------------
00007090                          2070  
00007090                          2071  STOP:
00007090                          2072      END    MAIN

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSL_6              1E5A
ABSW_5              1E44
ADD                 22AD
ADDA                22B1
ADDI                225D
ADDI_2              1E1A
ADDI_ERROR_CHECK    1D68
ADDM_4              1E38
ADDP_3              1E2C
ADDQ                2287
ADDRESS_REGISTERS   1CDE
ADDR_1              1E0C
ADD_CHAR            2046
ADD_ERROR_CHECK     1D4E
ADD_NEW             1EBC
ADD_START           7004
ADD_WORD            1EA0
ALPH_CHAR           12EE
AND                 22A9
ANDS                704C
ARI                 161C
ASL                 22BE
ASR                 22C2
BCC                 228C
BYEBYE              1D40
BYTE                2070
CASH                20B4
CC                  20BC
CHECK_TYPE          1D0A
CLEAR               7060
CLOSE               2094
CMP                 22A0
COMMA               204A
COMMA_SPACE         1D18
COMMA_SPACE2        1D28
COMPARES            706A
CONTINUE_YN         118E
CONVERT_TO_ASCII    12DC
CR                  D
DATA                1324
DATA_0              1DFE
DATA_START          400
DISPLACEMENT        1BCC
DISP_DONE           1BF4
DIVU                2294
DN_VERSION          1802
DONE                1B44
DONE_PRINTING       1D38
DOT                 205A
EA2                 1CA8
EAP                 1C60
EAS                 1C68
EAT_INVALID         1DC6
EA_ADD              17E0
EA_ADDA             195A
EA_ADDI             18A0
EA_ADDQ             18FC
EA_BCC              1BAA
EA_CLR              1A66
EA_CMP              1B4C
EA_JSR              1BFC
EA_LEA              1A0C
EA_LSD              1AB0
EA_MOVE             16C6
EA_MOVEA            173E
EA_MOVEM            1C3C
EA_MOVEQ            179A
EA_MULS             19B8
EA_PRINT_ADDRESS    1CF0
EA_SHIFT            1B06
EA_VERSION          184E
EFFECTIVE_ADDRESSING  118E
END                 20F6
END_PRINT_DATA_LOOP  124C
EQUAL_ERROR         1136
FOR_2               1CE0
FOR_LOOP            1CB4
GET_DATA            1F48
GET_NEXT_INPUT      105E
GET_OP              15EC
GET_OPMODE          1EF8
GET_OPMODE_MATH     1F10
GET_REG             1EEE
GET_SIZE            1ECE
GET_SIZE_ADDI       1F6C
GT                  20CA
IMME_7              1E7E
IM_NEW_LINE         12FC
IM_SPACE            130A
INCREMENT_LINE      11DE
INPUT_END           1032
INPUT_START         1006
INVALID             20EE
INVALID_CHAR_ERROR  10CA
INVALID_OPCODE      11E6
INVALID_OPCODE_CONT  11F6
JFF                 1CEC
JFZ                 1CC0
JMPLABEL            7074
LE                  20D8
LEA_ERROR_CHECK     1D7A
LF                  A
LOAD_ADDR           7062
LOG                 1608
LONG                207E
LONG_BIT            1BEA
LSL                 22B6
LSR                 22BA
MAIN                1000
MEM_END             200
MEM_SHIFT           15D2
MEM_START           100
MODE_CHOOSER        1FCE
MODE_JUMP           1DCE
MOQ                 201E
MOVE                2262
MOVEA               2267
MOVEM               2281
MOVEM_ERROR_CHECK   1DA4
MOVEQ               228E
MOVES               7024
MOVE_ERROR_CHECK    1D44
MULS                22A4
MULTIPLY            707E
M_AREG              22EE
M_BYTE              22E0
M_C                 22F0
M_CASH              22D6
M_CLOSE             22E6
M_COMMA             22D8
M_CONTINUE          221E
M_DATA              21DC
M_DOT               22DC
M_DREG              22EC
M_E                 22F6
M_END               2249
M_EQUAL             21A4
M_FINISHED          2204
M_G                 22F2
M_INPUT_END         2141
M_INPUT_START       210A
M_INVAL             22CE
M_INVALID           2176
M_L                 22F8
M_LONG              22E2
M_NEW_LINE          225A
M_OPEN              22E4
M_PLUS              22E8
M_POUND             22DA
M_PRESS_CONT        21EA
M_SLASH             22FA
M_SPACE             2258
M_SUB               22EA
M_T                 22F4
M_TAB               21E5
M_WORD              22DE
NEW_MODE            1FD8
NUMERIC_CHAR        12E8
OP0000              13AE
OP0001              13BE
OP0010              13CE
OP0011              13D2
OP0100              140A
OP0101              14BA
OP0110              14CA
OP0111              14E4
OP1000              14F4
OP1001              152A
OP1010              153A
OP1011              153E
OP1100              154E
OP1101              1586
OP1110              15BE
OPCLR               226D
OPEN                208C
OPJSR               2275
OPLEA               2271
OPNOP               2279
OPRTS               227D
OPSUB               229C
OP_JTAB             134A
OR                  2299
OUTPUT_CHAR         12F4
OUTPUT_D1B          1254
OUTPUT_HEX          1FFC
PASTE_3             16A4
PASTE_4             16AC
PASTE_5             16B6
PLUS                209C
POUND               2052
PRESS_TO_CONTINUE   11C0
PRE_READ_MEMORY     1162
PRINT_8             1F60
PRINT_ADDRESS       121E
PRINT_ADDRESS_LOOP  1224
PRINT_BCC           1F9C
PRINT_CURRENT       1CC4
PRINT_DATA          11FE
PRINT_DATA_ADDRESS  1216
PRINT_DATA_LOOP     1238
PRINT_LIST          1CA0
PRINT_OPCODE        1296
PRINT_OPCODE_EA     127A
QHX                 2030
READ_CHAR           1060
READ_CHAR_LOOP      1082
READ_MEMORY         1118
READ_MEMORY_CONT    117C
READ_MEMORY_LOOP    1164
REG_SHIFT           15DE
REG_SIZE            1FB6
REMOVE_ZERO         107C
REMOVE_ZEROES       106A
RESTART             12AA
RETURN_TO_SUBROUTINE  12DA
ROL                 22C6
ROLLS               705C
ROR                 22CA
ROT                 1630
SHIFTS              7052
SLASH               20E6
SPACE               20AC
START               7000
STOP                7090
STRING_START        500
SUB                 20A4
SWAP_VALUES         1146
TAB                 1316
TEST                1104
TO_EIGHT            1FF2
TO_FIVE             1FF8
TO_SIX              1FF4
TYPE_CHOOSER        1F8C
VALIDATE_START_END  1124
VALID_CHAR          10F4
VALID_LETTER_LC     10EC
VALID_LETTER_UC     10E4
VALID_NUMBER        10DC
VALID_OPCODE        1270
VERIFY_OPCODE       1332
WORD                2062
WORD_BIT            1BE0
_ADD                159E
_ADDA               15AE
_AND                1576
_ASL                1664
_ASR                1674
_CLR                1452
_DIVU               150C
_JSR                1472
_LEA                1462
_LSL                1644
_LSR                1654
_MOVE               13EA
_MOVEA              13FA
_MOVEM              14AA
_MULS               1566
_NOP                1482
_OR                 151C
_ROL                1684
_ROR                1694
_RTS                1496
