00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/2/2016 1:25:15 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  MAIN:                  ; first instruction of program
00001000  1401                       9      MOVE.B          D1, D2
00001002  6000 0002                 10      BRA             INPUT_START
00001006                            11      
00001006                            12      INCLUDE         'Main.X68'
00001006                            13      
00001006                            14  
00001006                            15  INPUT_START
00001006  43F9 000070A0             16      LEA         M_INPUT_START,A1      *load message
0000100C  103C 000E                 17      MOVE.B      #14,D0          *display string
00001010  4E4F                      18      TRAP        #15             *output string
00001012  227C 00000300             19      MOVE.L      #$0300,A1       *set address of register A1 for string
00001018  103C 0002                 20      MOVE.B      #2,D0           *input string into A1 Trap
0000101C  4E4F                      21      TRAP        #15             *input string from user
0000101E  6100 0040                 22      BSR         READ_CHAR       *check for valid input
00001022  23C3 00000100             23      MOVE.L      D3,MEM_START    *put the starting address in memory
00001028  B87C 0000                 24      CMP         #0,D4           *check the result register (D4)
0000102C  6700 0004                 25      BEQ         INPUT_END       *valid value. read the ending value
00001030  60D4                      26      BRA         INPUT_START     *invalid value. try inputting start value again    
00001032                            27      
00001032                            28  INPUT_END
00001032  43F9 000070D7             29      LEA         M_INPUT_END,A1  *load message
00001038  103C 000E                 30      MOVE.B      #14,D0          *display string
0000103C  4E4F                      31      TRAP        #15             *output string
0000103E  227C 00000300             32      MOVE.L      #$0300,A1       *set address of register A1 for string
00001044  103C 0002                 33      MOVE.B      #2,D0           *input string into A1 Trap
00001048  4E4F                      34      TRAP        #15             *input string from user
0000104A  6100 0014                 35      BSR         READ_CHAR       *check for valid input
0000104E  23C3 00000200             36      MOVE.L      D3,MEM_END      *put ending address into memory
00001054  B87C 0000                 37      CMP         #0,D4           *check the result register (D4)
00001058  6700 00BE                 38      BEQ         READ_MEMORY     *valid value. read the ending value
0000105C  60D4                      39      BRA         INPUT_END       *invalid value. try inputting start value again    
0000105E                            40      
0000105E                            41  GET_NEXT_INPUT
0000105E  4E75                      42      RTS
00001060                            43  
00001060                            44  READ_CHAR                       *verify that string is valid (all hexadecimal digits)
00001060  4243                      45      CLR         D3              *D3 will act as the total result
00001062  2849                      46      MOVE.L      A1,A4           *the stop address
00001064  143C 0006                 47      MOVE.B      #6,D2           *put 6 in D2
00001068  D8C2                      48      ADD.W       D2,A4           *A4 is now the stop address(A4)
0000106A                            49      
0000106A                            50  REMOVE_ZEROES
0000106A  4281                      51      CLR.L       D1              *D1 will act as the temporary value
0000106C  1211                      52      MOVE.B      (A1),D1         *read the byte from string
0000106E  143C 0030                 53      MOVE.B      #$30,D2         *put ascii zero in D2
00001072  B202                      54      CMP.B       D2,D1           *compare ascii zero and value of D1
00001074  6700 0006                 55      BEQ         REMOVE_ZERO     *skip over that character   
00001078  6000 0008                 56      BRA         READ_CHAR_LOOP  *begin converting characters to numerical values
0000107C                            57  REMOVE_ZERO
0000107C  5289                      58      ADD.L       #1,A1           *increment string start address
0000107E  528C                      59      ADD.L       #1,A4           *increment string end address
00001080  60E8                      60      BRA         REMOVE_ZEROES   *loop back and keep removing zeroes
00001082                            61  READ_CHAR_LOOP     
00001082  4281                      62      CLR.L       D1              *D1 will act as the temporary value
00001084  1211                      63      MOVE.B      (A1),D1         *read the byte from string
00001086  B27C 0000                 64      CMP         #0,D1           *compare 00 (NULL) and the byte ascii value in D1
0000108A  67D2                      65      BEQ         GET_NEXT_INPUT    *if you reached the end of the string, end loop
0000108C                            66      
0000108C  143C 0030                 67      MOVE.B      #$30,D2         *put ascii zero in D2
00001090  B202                      68      CMP.B       D2,D1           *compare ascii zero and value of D1
00001092  6D00 0036                 69      BLT         INVALID_CHAR_ERROR *branch on invalid (too small) ascii value   
00001096  143C 0066                 70      MOVE.B      #$66,D2         *put ascii f in D2
0000109A  B202                      71      CMP.B       D2,D1           *compare ascii f and value of D1
0000109C  6E2C                      72      BGT.B       INVALID_CHAR_ERROR *branch on invalid ascii value
0000109E  143C 0061                 73      MOVE.B      #$61,D2         *put ascii a in D2
000010A2  B202                      74      CMP.B       D2,D1           *compare ascii a and value of D1
000010A4  6C00 0046                 75      BGE         VALID_LETTER_LC *value is between a and f. Loop back.
000010A8                            76      
000010A8  143C 0039                 77      MOVE.B      #$39,D2         *put ascii 9 in D2
000010AC  B202                      78      CMP.B       D2,D1           *compare ascii 9 and value of D1
000010AE  6F00 002C                 79      BLE         VALID_NUMBER    *value between 0 and 9. Loop back.
000010B2                            80  
000010B2  143C 0041                 81      MOVE.B      #$41,D2         *put ascii A into D2
000010B6  B202                      82      CMP.B       D2,D1           *compare ascii A and value of D1
000010B8  6D00 0010                 83      BLT         INVALID_CHAR_ERROR    *value between 9 and A (Invalid)
000010BC                            84      
000010BC  143C 0046                 85      MOVE.B      #$46,D2         *put ascii F into D2
000010C0  B202                      86      CMP.B       D2,D1           *compare ascii F and value of D1
000010C2  6E00 0006                 87      BGT         INVALID_CHAR_ERROR    *value between F and a (Invalid)
000010C6                            88           
000010C6  6000 001C                 89      BRA         VALID_LETTER_UC *value is between A and F        
000010CA                            90  INVALID_CHAR_ERROR   
000010CA  43F9 0000710C             91      LEA         M_INVALID,A1    *load error message
000010D0  103C 000E                 92      MOVE.B      #14,D0          *display string trap
000010D4  4E4F                      93      TRAP        #15             *output error message
000010D6  183C 0001                 94      MOVE.B      #1,D4           *put invalid output in result register
000010DA  4E75                      95      RTS
000010DC                            96  VALID_NUMBER
000010DC  0401 0030                 97      SUB.B       #$30,D1         *get actual value from ascii value
000010E0  6000 0012                 98      BRA         VALID_CHAR      *read the next char in string
000010E4                            99  VALID_LETTER_UC
000010E4  0401 0037                100      SUB.B       #$37,D1         *get actual value from ascii value
000010E8  6000 000A                101      BRA         VALID_CHAR      *read the next char in string    
000010EC                           102  VALID_LETTER_LC
000010EC  0401 0057                103      SUB.B       #$57,D1         *get actual value from ascii value
000010F0  6000 0002                104      BRA         VALID_CHAR      *read the next char in string   
000010F4                           105  VALID_CHAR
000010F4  183C 0000                106      MOVE.B      #0,D4           *return valid value entry in D4    
000010F8  E98B                     107      LSL.L       #4,D3           *put hex digit in proper place
000010FA  D681                     108      ADD.L       D1,D3           *put new total in D3
000010FC  5289                     109      ADD.L       #1,A1           *increment address
000010FE  B8C9                     110      CMP         A1,A4           *if A1 > A4
00001100  6E80                     111      BGT         READ_CHAR_LOOP  *begin converting to float    
00001102  4E75                     112      RTS                         *loop back to INPUT_START || INPUT_END   
00001104                           113     
00001104                           114  TEST
00001104  23FC 00003000 00000100   115      MOVE.L      #$3000,MEM_START
0000110E  23FC 00003300 00000200   116      MOVE.L      #$3300,MEM_END
00001118                           117  READ_MEMORY   
00001118  2479 00000100            118      MOVEA.L     MEM_START,A2    *A2 will be the starting/current address
0000111E  2679 00000200            119      MOVEA.L     MEM_END,A3      *A3 will act as the ending address
00001124                           120      
00001124                           121  VALIDATE_START_END
00001124  220A                     122      MOVE.L      A2,D1           *copy start address into D1
00001126  240B                     123      MOVE.L      A3,D2           *copy end address into D2
00001128  B441                     124      CMP         D1,D2           *compare start and end values
0000112A  6700 000A                125      BEQ         EQUAL_ERROR     *Start address is equal to end address
0000112E  6D00 0016                126      BLT         SWAP_VALUES     *Start address is larger than end address
00001132  6000 002E                127      BRA         PRE_READ_MEMORY *begin reading memory
00001136                           128      
00001136                           129  EQUAL_ERROR
00001136  43F9 0000713A            130      LEA         M_EQUAL,A1      *load error message
0000113C  103C 000E                131      MOVE.B      #14,D0          *display string trap
00001140  4E4F                     132      TRAP        #15             *output error message
00001142  6000 FEC2                133      BRA         INPUT_START     *restart program (request ui again)
00001146                           134      
00001146                           135  SWAP_VALUES
00001146  2239 00000100            136      MOVE.L      MEM_START,D1    *put starting address in D1
0000114C  2439 00000200            137      MOVE.L      MEM_END,D2      *put ending address in D2
00001152  23C2 00000100            138      MOVE.L      D2,MEM_START    *swap the two values in memory
00001158  23C1 00000200            139      MOVE.L      D1,MEM_END
0000115E  2442                     140      MOVEA.L     D2,A2           *A2 will be the starting/current address
00001160  2641                     141      MOVEA.L     D1,A3           *A3 will act as the ending address
00001162                           142  PRE_READ_MEMORY
00001162  2C4A                     143      MOVE.L      A2,A6           *A6 will act as the current address for Data               
00001164                           144  READ_MEMORY_LOOP
00001164  2679 00000200            145      MOVE.L      MEM_END,A3        *put ending address in A3
0000116A  B6CA                     146      CMP         A2,A3             *compare the incrementing address and the end address
0000116C  6D00 0020                147      BLT         CONTINUE_YN       *stop if the end address is reached
00001170                           148      
00001170  E05E                     149      ROR         #8,D6               *select correct byte
00001172  BC3C 001E                150      CMP.B       #30,D6              *see if maximum lines printed
00001176  6C00 0048                151      BGE         PRESS_TO_CONTINUE
0000117A  E15E                     152      ROL         #8,D6   
0000117C                           153  READ_MEMORY_CONT                    *continue reading memory (if branched)  
0000117C  101A                     154      MOVE.B      (A2)+,D0          *get the value from incrementing address 
0000117E  E148                     155      LSL.W       #8,D0             *make room for the next byte of A2
00001180  1012                     156      MOVE.B      (A2),D0          *copy the rest of A2 to D0  
00001182  538A                     157      SUB.L       #1, A2
00001184  47F9 00000500            158      LEA         STRING_START,A3   *A3 will act as the string address  
0000118A  6000 019C                159      BRA         VERIFY_OPCODE
0000118E                           160      
0000118E                           161      
0000118E                           162          
0000118E                           163  
0000118E                           164  EFFECTIVE_ADDRESSING
0000118E                           165  
0000118E                           166  
0000118E                           167  CONTINUE_YN
0000118E  43F9 0000719A            168      LEA         M_FINISHED,A1       *print out finished reading address
00001194  103C 000E                169      MOVE.B      #14,D0
00001198  4E4F                     170      TRAP        #15
0000119A  43F9 000071B4            171      LEA         M_CONTINUE,A1        *ask the user if they want to read again
000011A0  103C 000E                172      MOVE.B      #14,D0
000011A4  4E4F                     173      TRAP        #15
000011A6  103C 0005                174      MOVE.B      #5,D0               *get user input
000011AA  4E4F                     175      TRAP        #15
000011AC  B23C 0059                176      CMP.B       #89,D1              *compare user input and ascii 'Y'
000011B0  6700 00FA                177      BEQ         RESTART             *
000011B4  B23C 0079                178      CMP.B       #121,D1             *compare user input with ascii 'y'
000011B8  6700 00F2                179      BEQ         RESTART
000011BC  6000 5ED2                180      BRA         END
000011C0                           181      
000011C0                           182  PRESS_TO_CONTINUE
000011C0  1C3C 0000                183      MOVE.B      #00,D6              *reset counter
000011C4  E19E                     184      ROL.L       #8,D6               *put byte back in place
000011C6  43F9 00007180            185      LEA         M_PRESS_CONT,A1     *load press key to continue messageu
000011CC  103C 000E                186      MOVE.B      #14,D0              *load into D0
000011D0  4E4F                     187      TRAP        #15                 *display message
000011D2  103C 0005                188      MOVE.B      #5,D0               *read single character from keyboard
000011D6  4E4F                     189      TRAP        #15    
000011D8  6100 0118                190      BSR         IM_NEW_LINE            *add new line
000011DC  609E                     191      BRA         READ_MEMORY_CONT    *continue reading loop
000011DE                           192      
000011DE                           193  INCREMENT_LINE
000011DE  E09E                     194      ROR.L       #8,D6               *select correct byte
000011E0  5206                     195      ADD.B       #1,D6               *increment counter
000011E2  E19E                     196      ROL.L       #8,D6               *put byte back in place
000011E4  4E75                     197      RTS 
000011E6                           198      
000011E6                           199  INVALID_OPCODE
000011E6  BC3C 0008                200      CMP.B       #8,D6               *check the loop increment counter
000011EA  6D00 000A                201      BLT         INVALID_OPCODE_CONT *less than long length. continue       
000011EE  6100 000E                202      BSR         PRINT_DATA          *long amount of data. print it.
000011F2  6000 FF70                203      BRA         READ_MEMORY_LOOP    *read the next byte
000011F6                           204  INVALID_OPCODE_CONT  
000011F6  528A                     205      ADD.L       #1,A2               *increment current address  
000011F8  5206                     206      ADD.B       #1,D6               *increment counter
000011FA  6000 FF68                207      BRA         READ_MEMORY_LOOP    *data cap not reached. read next byte.    
000011FE                           208      
000011FE                           209  PRINT_DATA
000011FE  1C3C 0000                210      MOVE.B      #00,D6              *reset the increment counter
00001202  6100 0012                211      BSR         PRINT_DATA_ADDRESS       *print the data address
00001206  6100 0104                212      BSR         TAB                 *insert a space
0000120A  6100 010E                213      BSR         DATA                *print 'DATA'       
0000120E  6100 0028                214      BSR         PRINT_DATA_LOOP     *print the data
00001212  61CA                     215      BSR         INCREMENT_LINE      *increment line counter (line was printed)
00001214  4E75                     216      RTS
00001216                           217  
00001216                           218  PRINT_DATA_ADDRESS
00001216  280E                     219      MOVE.L      A6,D4               *put the address in D4
00001218  4243                     220      CLR         D3                  *counter for long
0000121A  6000 0008                221      BRA         PRINT_ADDRESS_LOOP
0000121E                           222  PRINT_ADDRESS
0000121E  280E                     223      MOVE.L      A6,D4               *put the address in D4
00001220  4243                     224      CLR         D3                  *counter for long
00001222  2C4A                     225      MOVE.L      A2, A6
00001224                           226      
00001224                           227  PRINT_ADDRESS_LOOP
00001224  B67C 0004                228      CMP         #4,D3               *if long reached
00001228  6C00 00A6                229      BGE         RETURN_TO_SUBROUTINE *exit loop
0000122C  E19C                     230      ROL.L       #8,D4               *put ending byte at beginning
0000122E  1204                     231      MOVE.B      D4,D1               *put byte in D1 for printing
00001230  6100 0024                232      BSR         OUTPUT_D1B          *print the first byte of D1
00001234  5203                     233      ADD.B       #1,D3               *increment D3 (loop counter)
00001236  60EC                     234      BRA         PRINT_ADDRESS_LOOP  *repeat loop         
00001238                           235           
00001238                           236  PRINT_DATA_LOOP
00001238  121E                     237      MOVE.B      (A6)+,D1            *get the data
0000123A  1401                     238      MOVE.B      D1,D2               *copy the data to D2
0000123C  BDCA                     239      CMP.L       A2,A6               *if current address reached
0000123E  6E00 000C                240      BGT         END_PRINT_DATA_LOOP *continue reading addresses 
00001242                           241                                      *otherwise keep printing the data
00001242  6100 0012                242      BSR         OUTPUT_D1B          *print byte in D1 in hex
00001246                           243      *---print a space----*
00001246  6100 00B8                244      BSR         IM_SPACE               *print a space                                
0000124A  60EC                     245      BRA         PRINT_DATA_LOOP     *repeat loop
0000124C                           246  
0000124C                           247  END_PRINT_DATA_LOOP
0000124C  2C4A                     248      MOVE.L      A2,A6               *set new address for data/opcode
0000124E  6100 00A2                249      BSR         IM_NEW_LINE            *end line
00001252  618A                     250      BSR         INCREMENT_LINE      *increment line printing counter
00001254  4E75                     251      RTS                             *repeat loop   
00001256                           252   
00001256                           253  OUTPUT_D1B
00001256                           254      *print the left character
00001256  1401                     255      MOVE.B      D1,D2               *copy D1 to D2
00001258  E809                     256      LSR.B       #4,D1               *get rid of right nibble  
0000125A  6100 0076                257      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
0000125E  6100 008A                258      BSR         OUTPUT_CHAR         *print the char in D1
00001262                           259      *print the right character
00001262  E90A                     260      LSL.B       #4,D2               *get rid of left nibble
00001264  E80A                     261      LSR.B       #4,D2               *put right nibble in place
00001266  1202                     262      MOVE.B      D2,D1               *put right nibble in D1
00001268  6100 0068                263      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
0000126C  6100 007C                264      BSR         OUTPUT_CHAR         *print the char in D1
00001270  4E75                     265      RTS
00001272                           266  VALID_OPCODE
00001272  BC3C 0000                267      CMP.B       #00,D6              *if leftover data not printed
00001276  6700 0004                268      BEQ         PRINT_OPCODE_EA     *print just the opcode
0000127A  6182                     269      BSR         PRINT_DATA          *print unreadable data
0000127C                           270                                      *and the opcode
0000127C                           271  PRINT_OPCODE_EA    
0000127C  548A                     272      ADD.L       #02,A2              *increment the current address because word is valid
0000127E                           273  
0000127E  1C3C 0000                274      MOVE.B      #00,D6              *reset the increment counter
00001282  619A                     275      BSR         PRINT_ADDRESS       *print the data address
00001284  6100 0086                276      BSR         TAB                 *insert a space
00001288  6100 000E                277      BSR         PRINT_OPCODE        *print out hte opcode and eA
0000128C  6100 FF50                278      BSR         INCREMENT_LINE      *increment line counter (line was printed)
00001290  6100 0060                279      BSR         IM_NEW_LINE
00001294  6000 FECE                280      BRA         READ_MEMORY_LOOP    *read next byte.
00001298                           281      
00001298                           282  
00001298                           283  PRINT_OPCODE
00001298  43F9 00000500            284      LEA         STRING_START,A1     *put the starting address of the string into A1
0000129E  103C 000E                285      MOVE.B      #14,D0              *print null terminated string into A
000012A2  4E4F                     286      TRAP        #15                 *output to terminal
000012A4  47F9 00000500            287      lea         STRING_START,A3     *reset the current string pointer
000012AA  4E75                     288      RTS
000012AC                           289      
000012AC                           290  RESTART
000012AC  4280                     291      CLR.L       D0
000012AE  4281                     292      CLR.L       D1
000012B0  4282                     293      CLR.L       D2
000012B2  4283                     294      CLR.L       D3
000012B4  4284                     295      CLR.L       D4
000012B6  4285                     296      CLR.L       D5
000012B8  4286                     297      CLR.L       D6
000012BA  4287                     298      CLR.L       D7
000012BC  2040                     299      MOVE.L      D0,A0
000012BE  2240                     300      MOVE.L      D0,A1
000012C0  2440                     301      MOVE.L      D0,A2
000012C2  2640                     302      MOVE.L      D0,A3
000012C4  2840                     303      MOVE.L      D0,A4
000012C6  2A40                     304      MOVE.L      D0,A5
000012C8  2C40                     305      MOVE.L      D0,A6
000012CA  2E40                     306      MOVE.L      D0,A7
000012CC  6000 FD38                307      BRA         INPUT_START
000012D0                           308      
000012D0                           309  RETURN_TO_SUBROUTINE
000012D0  4E75                     310      RTS
000012D2                           311    
000012D2                           312  CONVERT_TO_ASCII
000012D2  B23C 0009                313      CMP.B       #9,D1           *compare value with 9
000012D6  6E00 000C                314      BGT         ALPH_CHAR       *convert to numeric ascii
000012DA  6000 0002                315      BRA         NUMERIC_CHAR    *convert to alphabetical ascii
000012DE                           316  NUMERIC_CHAR        
000012DE  0601 0030                317      ADD.B       #48,D1          *convert to ascii value
000012E2  4E75                     318      RTS                         *continue converting
000012E4                           319  ALPH_CHAR
000012E4  0601 0037                320      ADD.B       #55,D1          *convert to ascii value
000012E8  4E75                     321      RTS                         *continue converting            
000012EA                           322  OUTPUT_CHAR
000012EA  103C 0006                323      MOVE.B      #6,D0           *output whatever's in D1
000012EE  4E4F                     324      TRAP        #15
000012F0  4E75                     325      RTS
000012F2                           326  
000012F2                           327  
000012F2                           328  IM_NEW_LINE
000012F2  43F9 000071F0            329      LEA         M_NEW_LINE,A1      *load new line
000012F8  103C 000E                330      MOVE.B      #14,D0          *load message
000012FC  4E4F                     331      TRAP        #15             *display message
000012FE  4E75                     332      RTS
00001300                           333  IM_SPACE
00001300  123C 0020                334      MOVE.B      #32,D1
00001304  103C 0006                335      MOVE.B      #6,D0
00001308  4E4F                     336      TRAP        #15
0000130A  4E75                     337      RTS
0000130C                           338  TAB
0000130C  43F9 0000717B            339      LEA         M_TAB,A1
00001312  103C 000E                340      MOVE.B      #14,D0
00001316  4E4F                     341      TRAP        #15
00001318  4E75                     342      RTS
0000131A                           343  DATA
0000131A  43F9 00007172            344      LEA         M_DATA,A1
00001320  103C 000E                345      MOVE.B      #14,D0
00001324  4E4F                     346      TRAP        #15
00001326  4E75                     347      RTS
00001328                           348      
00001328                           349  
00001328                           350  
00001328                           351  
00001328                           352  
00001328                           353  
00001328                           354  
00001328                           355  
00001328                           356  
00001328                           357  
00001328                           358  
00001328                           359  
00001328                           360  
00001328                           361  
00001328                           362  
00001328                           363  
00001328                           364  
00001328                           365  
00001328                           366  
00001328                           367  
00001328                           368  
00001328                           369  
00001328                           370  
00001328                           371  
00001328                           372  
00001328                           373  
00001328                           374  
00001328                           375  
00001328                           376  
00001328                           377  
00001328                           378  -------------------- end include --------------------
00001328                           379      INCLUDE         'OP_jumpTable.X68'
00001328                           380  VERIFY_OPCODE
00001328  3200                     381      MOVE.W  D0,D1   *Copy instruction for modification
0000132A                           382      
0000132A                           383      **ISOLATE FIRST FOUR BITS**                                             
0000132A  E849                     384      LSR.W   #4,D1       *Shift left four bits
0000132C  E049                     385      LSR.W   #8,D1       *Shift left again (12 shifts total)
0000132E                           386      
0000132E  4242                     387      CLR     D2
00001330  1401                     388      MOVE.B  D1,D2
00001332                           389      
00001332  41F9 00001340            390      LEA     OP_JTAB,A0 
00001338  C5FC 0006                391      MULS    #6, D2
0000133C  4EB0 2000                392      JSR     0(A0,D2)
00001340                           393  
00001340                           394  
00001340                           395  
00001340  4EF9 000013A2            396  OP_JTAB    JMP     OP0000      *ADDI
00001346  4EF9 000013B2            397      JMP     OP0001      *MOVE.B
0000134C  4EF9 000013C2            398      JMP     OP0010      *MOVE.W, MOVEA(WORD)
00001352  4EF9 000013C6            399      JMP     OP0011      *MOVE.L, MOVEA(LONG) 
00001358  4EF9 000013FE            400      JMP     OP0100      *NOP, MOVEM, LEA, CLR, JSR, RTS
0000135E  4EF9 000014A6            401      JMP     OP0101      *ADDQ
00001364  4EF9 000014B6            402      JMP     OP0110      *Bcc
0000136A  4EF9 000014D0            403      JMP     OP0111      *MOVEQ
00001370  4EF9 000014E0            404      JMP     OP1000      *DIVU, OR
00001376  4EF9 00001516            405      JMP     OP1001      *SUB
0000137C  4EF8 11E6                406      JMP     INVALID_OPCODE
00001380  4EF9 00001526            407      JMP     OP1011      *CMP
00001386  4EF9 00001536            408      JMP     OP1100      *MULS, AND
0000138C  4EF9 0000156E            409      JMP     OP1101      *ADD, ADDA
00001392  4EF9 000015A6            410      JMP     OP1110      *LSR, LSL, ASR, ASL, ROL, ROR
00001398  4EF8 11E6                411      JMP     INVALID_OPCODE
0000139C                           412  
0000139C                           413  
0000139C                           414      
0000139C  4EF8 11E6                415      JMP     INVALID_OPCODE     *Subroutine to store as non-decodable
000013A0  4E75                     416      RTS
000013A2                           417  
000013A2                           418  OP0000
000013A2                           419      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000013A2                           420      *BEGIN OUTPUT
000013A2                           421      
000013A2                           422      *MOVE.W  ADDI,(A3)+      *Load 'ADDI' to Add Reg 1 and then increment
000013A2  49F9 000071F3            423      LEA     ADDI, A4
000013A8  4EB9 00001688            424      JSR     PASTE_4
000013AE  6000 04B2                425      BRA     EA_ADDI         *Branch to EA analysis of the command
000013B2                           426  
000013B2                           427  OP0001  *SINGLE CODE, DO NOT NEED FURTHER CHECKING 
000013B2                           428          *BEGIN OUTPUT
000013B2                           429      
000013B2                           430      *MOVE.L  MOVE,(A3)+     *Load 'MOVE.B' to Add Reg 1 and then increment
000013B2  49F9 000071F8            431      LEA     MOVE, A4
000013B8  4EB9 00001688            432      JSR     PASTE_4
000013BE  6000 02E2                433      BRA     EA_MOVE        *Branch to EA analysis of the command
000013C2                           434  
000013C2                           435  OP0010
000013C2                           436      *Identical to OP0011 for these purposes, branch there
000013C2  6000 0002                437      BRA OP0011
000013C6                           438  
000013C6                           439  OP0011
000013C6                           440      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000013C6                           441  
000013C6                           442      **ISOLATE NEXT BITS TO CHECK**
000013C6  3200                     443      MOVE.W  D0,D1           *Copy instruction for modification
000013C8  EF49                     444      LSL.W   #7,D1           *Shift left 7 bits 
000013CA  EA49                     445      LSR.W   #5,D1           *Rotate right 5 bits
000013CC  E049                     446      LSR.W   #8,D1           *Shift right again (13 shifts total)
000013CE  0241 000F                447      ANDI.W  #$00F,D1        *Keep 3 bits
000013D2                           448      
000013D2  B27C 0001                449      CMP     #%001,D1      *Check for 0010 to eliminate CLR
000013D6  6700 0016                450      BEQ     _MOVEA          *If equal, branch to CLR
000013DA                           451      
000013DA  6000 0002                452      BRA     _MOVE
000013DE                           453      
000013DE                           454  _MOVE
000013DE                           455      *MOVE.L  MOVE,(A3)+     *Load 'MOVE.L' to Add Reg 1 and then increment  
000013DE  49F9 000071F8            456      LEA     MOVE, A4
000013E4  4EB9 00001688            457      JSR     PASTE_4
000013EA  6000 02B6                458      BRA     EA_MOVE        *Branch to EA analysis of the command
000013EE                           459  
000013EE                           460  _MOVEA
000013EE                           461      *MOVE.L  MOVEA,(A3)+    *Load 'MOVEA.L' to Add Reg 1 and then increment
000013EE  49F9 000071FD            462      LEA     MOVEA, A4
000013F4  4EB9 00001692            463      JSR     PASTE_5
000013FA  6000 031A                464      BRA     EA_MOVEA       *Branch to EA analysis of the command
000013FE                           465  
000013FE                           466  OP0100
000013FE                           467      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000013FE  3200                     468       MOVE.W  D0,D1           *Copy instruction for modification
00001400                           469      
00001400  B27C 4E71                470      CMP     #%0100111001110001,D1   *Check to eliminate NOP
00001404  6700 0070                471      BEQ     _NOP
00001408  B27C 4E75                472      CMP     #%0100111001110101,D1   *Check to eliminate RTS
0000140C  6700 0078                473      BEQ     _RTS
00001410                           474      
00001410  EC49                     475      LSR.W   #6,D1                   *Shift right 6 bits
00001412  B27C 013A                476      CMP     #%0000000100111010,D1   *Check to eliminate RTS
00001416  6700 004E                477      BEQ     _JSR
0000141A                           478      
0000141A                           479      **ISOLATE 4 BITS TO CHECK CLR**    
0000141A  3200                     480      MOVE.W  D0,D1           *Copy instruction for modification
0000141C  E949                     481      LSL.W   #4,D1           *Shift left 7 bits 
0000141E  E849                     482      LSR.W   #4,D1           *Rotate right 5 bits
00001420  E049                     483      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001422  0241 000F                484      ANDI.W  #$000F,D1       *Keep 4 bits
00001426                           485      
00001426  B27C 0002                486      CMP     #%0010,D1       *Check for 0010 to eliminate CLR
0000142A  6700 001A                487      BEQ     _CLR            *If equal, branch to CLR
0000142E                           488  
0000142E                           489      **ISOLATE 3 BITS TO CHECK MOVEM**
0000142E  3200                     490      MOVE.W  D0,D1           *Copy instruction for modification
00001430  ED49                     491      LSL.W   #6,D1           *Shift left 6 bits 
00001432  EA49                     492      LSR.W   #5,D1           *Shift right 5 bits
00001434  E049                     493      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001436  0241 000F                494      ANDI.W  #$00F,D1        *Keep 3 bits
0000143A                           495      
0000143A  B27C 0001                496      CMP     #%001,D1
0000143E  6700 0056                497      BEQ     _MOVEM
00001442                           498      
00001442  6000 0012                499      BRA     _LEA            *Else by process of elimination it must be LEA   
00001446                           500      
00001446                           501  _CLR
00001446                           502      *MOVE.W  OPCLR,(A3)+     *Load 'CLR' to Add Reg 1 and then increment
00001446  49F9 00007203            503      LEA     OPCLR, A4
0000144C  4EB9 00001680            504      JSR     PASTE_3
00001452  6000 05CE                505      BRA     EA_CLR          *Branch to EA analysis of the command
00001456                           506  
00001456                           507  _LEA
00001456                           508      *MOVE.W  OPLEA,(A3)+     *Load 'LEA' to Add Reg 1 and then increment
00001456  49F9 00007207            509      LEA     OPLEA, A4
0000145C  4EB9 00001680            510      JSR     PASTE_3
00001462  6000 0566                511      BRA     EA_LEA          *Branch to EA analysis of the command
00001466                           512  
00001466                           513  _JSR
00001466                           514      *MOVE.W  OPJSR,(A3)+     *Load 'JSR' to Add Reg 1 and then increment
00001466  49F9 0000720B            515      LEA     OPJSR, A4
0000146C  4EB9 00001680            516      JSR     PASTE_3
00001472  6000 0706                517      BRA     EA_JSR          *Branch to EA analysis of the command
00001476                           518  
00001476                           519  _NOP
00001476                           520      *MOVE.W  OPNOP,(A3)+     *Load 'NOP' to Add Reg 1 and then increment
00001476  49F9 0000720F            521      LEA     OPNOP, A4
0000147C  4EB9 00001680            522      JSR     PASTE_3
00001482  6000 FDEE                523      BRA     VALID_OPCODE          *Branch to EA analysis of the command      
00001486                           524  
00001486                           525  _RTS
00001486                           526      *MOVE.W  OPRTS,(A3)+     *Load 'RTS' to Add Reg 1 and then increment
00001486  49F9 00007213            527      LEA     OPRTS, A4
0000148C  4EB9 00001680            528      JSR     PASTE_3
00001492  6000 FDDE                529      BRA     VALID_OPCODE          *Branch to EA analysis of the command      
00001496                           530  
00001496                           531  _MOVEM
00001496                           532      *MOVE.W  MOVEM,(A3)+     *Load 'MOVEM' to Add Reg 1 and then increment
00001496  49F9 00007217            533      LEA     MOVEM, A4
0000149C  4EB9 00001692            534      JSR     PASTE_5
000014A2  6000 0714                535      BRA     EA_MOVEM        *Branch to EA analysis of the command
000014A6                           536      
000014A6                           537  OP0101
000014A6                           538      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014A6                           539      *BEGIN OUTPUT
000014A6                           540      
000014A6                           541      *MOVE.W  ADDQ,(A3)+      *Load 'AddQ' to Add Reg 1 and then increment
000014A6  49F9 0000721D            542      LEA     ADDQ, A4
000014AC  4EB9 00001688            543      JSR     PASTE_4
000014B2  6000 0410                544      BRA     EA_ADDQ         *Branch to EA analysis of the command
000014B6                           545      
000014B6                           546  OP0110
000014B6                           547      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014B6                           548      *BEGIN OUTPUT
000014B6  3200                     549      MOVE.W  D0,D1
000014B8  E949                     550      LSL.W   #4,D1
000014BA  E849                     551      LSR.W   #4,D1
000014BC  E049                     552      LSR.W   #8,D1
000014BE  B23C 0000                553      CMP.B   #0,D1
000014C2  6700 FD22                554      BEQ     INVALID_OPCODE
000014C6                           555      
000014C6  16F9 00007222            556      MOVE.B  Bcc,(A3)+       *Load 'Bcc' to Add Reg 1 and then increment 
000014CC  6000 0688                557      BRA     EA_BCC          *Branch to EA analysis of the command
000014D0                           558  
000014D0                           559  OP0111
000014D0                           560      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014D0                           561      *BEGIN OUTPUT
000014D0                           562      
000014D0                           563      *MOVE.W  MOVEQ,(A3)+     *Load 'MOVEQ' to Add Reg 1 and then increment
000014D0  49F9 00007224            564      LEA     MOVEQ, A4
000014D6  4EB9 00001692            565      JSR     PASTE_5
000014DC  6000 0290                566      BRA     EA_MOVEQ        *Branch to EA analysis of the command
000014E0                           567      
000014E0                           568  OP1000
000014E0                           569      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000014E0                           570      
000014E0                           571      **ISOLATE NEXT BITS TO CHECK**
000014E0  3200                     572      MOVE.W  D0,D1           *Copy instruction for modification
000014E2  EF49                     573      LSL.W   #7,D1           *Shift left 7 bits 
000014E4  EA49                     574      LSR.W   #5,D1           *Rotate right 5 bits
000014E6  E049                     575      LSR.W   #8,D1           *Shift right again (13 shifts total)
000014E8  0241 000F                576      ANDI.W  #$00F,D1        *Keep 3 bits
000014EC                           577            
000014EC  B27C 0003                578      CMP     #%011,D1    *Check for 011 to eliminate DIVU
000014F0  6700 0006                579      BEQ     _DIVU        *If equal, branch to DIVU
000014F4  6000 0012                580      BRA     _OR          *Else must be OR, branch
000014F8                           581      
000014F8                           582  _DIVU
000014F8                           583      *MOVE.W  DIVU,(A3)+      *Load 'DIVU' to Add Reg 1 and then increment
000014F8  49F9 0000722A            584      LEA     DIVU, A4
000014FE  4EB9 00001688            585      JSR     PASTE_4
00001504  6000 0472                586      BRA     EA_MULS         *Branch to EA analysis of the command
00001508                           587  
00001508                           588  _OR
00001508                           589      *MOVE.W  OR,(A3)+        *Load 'OR' to Add Reg 1 and then increment
00001508  49F9 0000722F            590      LEA     OR, A4
0000150E  16DC                     591      MOVE.B  (A4)+, (A3)+
00001510  16DC                     592      MOVE.B  (A4)+, (A3)+
00001512  6000 0294                593      BRA     EA_ADD           *Branch to EA analysis of the command
00001516                           594  
00001516                           595  OP1001
00001516                           596      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
00001516                           597      *BEGIN OUTPUT
00001516                           598      
00001516                           599      *MOVE.W  OPSUB,(A3)+     *Load 'SUB' to Add Reg 1 and then increment
00001516  49F9 00007232            600      LEA     OPSUB, A4
0000151C  4EB9 00001680            601      JSR     PASTE_3
00001522  6000 0284                602      BRA     EA_ADD          *Branch to EA analysis of the command
00001526                           603  
00001526                           604  OP1011
00001526                           605      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
00001526                           606      *BEGIN OUTPUT
00001526                           607      *MOVE.W  CMP,(A3)+     *Load 'CMP' to Add Reg 1 and then increment
00001526  49F9 00007236            608      LEA     CMP, A4
0000152C  4EB9 00001680            609      JSR     PASTE_3
00001532  6000 05C8                610      BRA     EA_CMP          *Branch to EA analysis of the command
00001536                           611  
00001536                           612  OP1100
00001536                           613      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
00001536                           614  
00001536  3200                     615      MOVE.W  D0,D1           *Copy instruction for modification
00001538  EF49                     616      LSL.W   #7,D1           *Shift left 7 bits 
0000153A  EA49                     617      LSR.W   #5,D1           *Rotate right 5 bits
0000153C  E049                     618      LSR.W   #8,D1           *Shift right again (13 shifts total)
0000153E  0241 000F                619      ANDI.W  #$00F,D1        *Keep 3 bits
00001542                           620           
00001542  B27C 0007                621      CMP     #%111,D1       *Check for 111 to eliminate MULS
00001546  6700 0006                622      BEQ     _MULS           *If equal, branch to MULS
0000154A  6000 0012                623      BRA     _AND            *Else must be AND, branch
0000154E                           624      
0000154E                           625  _MULS
0000154E                           626      *MOVE.W  MULS,(A3)+      *Load 'MULS' to Add Reg 1 and then increment
0000154E  49F9 0000723A            627      LEA     MULS, A4
00001554  4EB9 00001688            628      JSR     PASTE_4
0000155A  6000 041C                629      BRA     EA_MULS         *Branch to EA analysis of the command
0000155E                           630  
0000155E                           631  _AND
0000155E                           632      *MOVE.W  AND,(A3)+       *Load 'AND' to Add Reg 1 and then increment
0000155E  49F9 0000723F            633      LEA     AND, A4
00001564  4EB9 00001680            634      JSR     PASTE_3
0000156A  6000 023C                635      BRA     EA_ADD          *Branch to EA analysis of the command
0000156E                           636      
0000156E                           637  OP1101
0000156E                           638      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS  
0000156E                           639  
0000156E  3200                     640      MOVE.W  D0,D1           *Copy instruction for modification
00001570  E149                     641      LSL.W   #8,D1           *Shift left 7 bits 
00001572  EA49                     642      LSR.W   #5,D1           *Rotate left 5 bits
00001574  E049                     643      LSR.W   #8,D1           *Shift left again (13 shifts total)
00001576  0241 000F                644      ANDI.W  #$0F,D1         *Keep 3 bits
0000157A                           645                
0000157A  B27C 0003                646      CMP     #%11,D1         *Check for 011 to eliminate ADDA (Size dependant)
0000157E  6700 0016                647      BEQ     _ADDA           *If equal, branch to ADDA
00001582  6000 0002                648      BRA     _ADD            *Else must be ADD, branch
00001586                           649      
00001586                           650  _ADD
00001586                           651      *MOVE.W  ADD,(A3)+       *Load 'ADD' to Add Reg 1 and then increment
00001586  49F9 00007243            652      LEA     ADD, A4
0000158C  4EB9 00001680            653      JSR     PASTE_3
00001592  6000 0214                654      BRA     EA_ADD          *Branch to EA analysis of the command
00001596                           655  
00001596                           656  _ADDA
00001596                           657      *MOVE.W  ADDA,(A3)+      *Load 'ADDA' to Add Reg 1 and then increment
00001596  49F9 00007247            658      LEA     ADDA, A4
0000159C  4EB9 00001688            659      JSR     PASTE_4
000015A2  6000 037A                660      BRA     EA_ADDA         *Branch to EA analysis of the command
000015A6                           661      
000015A6                           662  OP1110
000015A6                           663      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000015A6                           664        
000015A6  3200                     665      MOVE.W  D0,D1           *Copy instruction for modification
000015A8  EF49                     666      LSL.W   #7,D1           *Shift left 7 bits 
000015AA  EA49                     667      LSR.W   #5,D1           *Rotate right 5 bits
000015AC  E049                     668      LSR.W   #8,D1           *Shift right again (13 shifts total)
000015AE  0241 000F                669      ANDI.W  #$00F,D1        *Keep 3 bits
000015B2                           670                    
000015B2  B27C 0001                671      CMP     #%001,D1        *Check for 001 to eliminate LSd instructions
000015B6  6700 001C                672      BEQ     _LSd            *If equal, branch to LSd to determine LSR or LSL
000015BA                           673  
000015BA                           674      **ELSE CONTINUE CHECKING**
000015BA  3200                     675      MOVE.W  D0,D1           *Copy instruction for modification
000015BC  E149                     676      LSL.W   #8,D1          *Shift left 7 bits
000015BE  E749                     677      LSL.W   #3,D1 
000015C0  EA49                     678      LSR.W   #5,D1           *Rotate left 5 bits
000015C2  E049                     679      LSR.W   #8,D1           *Shift left again (13 shifts total)
000015C4  0241 000F                680      ANDI.W  #$0F,D1         *Keep 2 bits
000015C8                           681      
000015C8                           682      **BEGIN ELIMINATION 'IF/ELSE' STATEMENTS                   
000015C8  B27C 0000                683      CMP     #%00,D1         *Check for 00 to eliminate ASd
000015CC  6700 003E                684      BEQ     _ASd            *If equal, branch to ASd to determine ASR or ASL
000015D0  6000 0074                685      BRA     _ROd            *Else must be a ROd instruction, branch to determine
000015D4                           686      
000015D4                           687  _LSd   
000015D4                           688   
000015D4  3200                     689      MOVE.W  D0,D1           *Copy instruction for modification
000015D6  EF49                     690      LSL.W   #7,D1           *Shift left 7 bits 
000015D8  EE49                     691      LSR.W   #7,D1           *Rotate right 5 bits
000015DA  E049                     692      LSR.W   #8,D1           *Shift right again (13 shifts total)
000015DC  0241 000F                693      ANDI.W  #$F,D1          *Keep 3 bits
000015E0                           694  
000015E0  B27C 0000                695      CMP     #%0,D1        *Check for 011 to eliminate LSR
000015E4  6700 0016                696      BEQ     _LSR            *If equal, branch to LSR
000015E8  6000 0002                697      BRA     _LSL            *Else must be LSL, branch
000015EC                           698  
000015EC                           699  _LSL    
000015EC                           700      *MOVE.W  LSL,(A3)+       *Load 'LSL' to Add Reg 1 and then increment
000015EC  49F9 0000724C            701      LEA     LSL, A4
000015F2  4EB9 00001680            702      JSR     PASTE_3
000015F8  6000 046E                703      BRA     EA_LSD         *Branch to EA analysis of the command
000015FC                           704  
000015FC                           705  _LSR
000015FC                           706      *MOVE.W  LSR,(A3)+       *Load 'LSR' to Add Reg 1 and then increment
000015FC  49F9 00007250            707      LEA     LSR, A4
00001602  4EB9 00001680            708      JSR     PASTE_3
00001608  6000 045E                709      BRA     EA_LSD          *Branch to EA analysis of the command
0000160C                           710  
0000160C                           711  _ASd
0000160C                           712  
0000160C  3200                     713      MOVE.W  D0,D1           *Copy instruction for modification
0000160E  E149                     714      LSL.W   #8,D1           *Shift left 7 bits 
00001610  E549                     715      LSL.W   #2,D1           *Shift left 7 bits
00001612  EA49                     716      LSR.W   #5,D1           *Rotate right 5 bits
00001614  E049                     717      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001616  0241 000F                718      ANDI.W  #$00F,D1        *Keep 3 bits
0000161A                           719     
0000161A  B27C 0000                720      CMP     #%000,D1        *Check for 000 to eliminate ASR
0000161E  6700 0016                721      BEQ     _ASR            *If equal, branch to ASR
00001622  6000 0002                722      BRA     _ASL            *Else must be ASL, branch
00001626                           723  
00001626                           724  _ASL    
00001626                           725      *MOVE.W  ASL,(A3)+       *Load 'ASL' to Add Reg 1 and then increment
00001626  49F9 00007254            726      LEA     ASL, A4
0000162C  4EB9 00001680            727      JSR     PASTE_3
00001632  6000 0434                728      BRA     EA_LSD          *Branch to EA analysis of the command
00001636                           729  
00001636                           730  _ASR
00001636                           731      *MOVE.W  ASR,(A3)+       *Load 'ASR' to Add Reg 1 and then increment
00001636  49F9 00007258            732      LEA     ASR, A4
0000163C  4EB9 00001680            733      JSR     PASTE_3
00001642  6000 0424                734      BRA     EA_LSD          *Branch to EA analysis of the command
00001646                           735  
00001646                           736  _ROd
00001646                           737  
00001646  3200                     738      MOVE.W  D0,D1           *Copy instruction for modification
00001648  E549                     739      LSL.W   #2,D1           *Shift left 7 bits
0000164A  E149                     740      LSL.W   #8,D1           *Shift left 7 bits 
0000164C  EA49                     741      LSR.W   #5,D1           *Rotate right 5 bits
0000164E  E049                     742      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001650  0241 000F                743      ANDI.W  #$00F,D1        *Keep 3 bits
00001654                           744  
00001654                           745      **BEGIN ELIMINATION 'IF/ELSE' STATEMENTS   
00001654  B27C 0003                746      CMP     #%011,D1        *Check for 011 to eliminate ROR
00001658  6700 0016                747      BEQ     _ROR            *If equal, branch to ROR
0000165C  6000 0002                748      BRA     _ROL            *Else must be ROL, branch
00001660                           749      
00001660                           750  _ROL    
00001660                           751      *MOVE.W  ROL,(A3)+       *Load 'ROL' to Add Reg 1 and then increment
00001660  49F9 0000725C            752      LEA     ROL, A4
00001666  4EB9 00001680            753      JSR     PASTE_3
0000166C  6000 03FA                754      BRA     EA_LSD          *Branch to EA analysis of the command
00001670                           755  
00001670                           756  _ROR
00001670                           757      *MOVE.W  ROR,(A3)+       *Load 'ROR' to Add Reg 1 and then increment
00001670  49F9 00007260            758      LEA     ROR, A4
00001676  4EB9 00001680            759      JSR     PASTE_3
0000167C  6000 03EA                760      BRA     EA_LSD          *Branch to EA analysis of the command
00001680                           761      
00001680                           762  PASTE_3
00001680  16DC                     763      MOVE.B  (A4)+, (A3)+
00001682  16DC                     764      MOVE.B  (A4)+, (A3)+
00001684  16DC                     765      MOVE.B  (A4)+, (A3)+
00001686  4E75                     766      RTS
00001688                           767  
00001688                           768  PASTE_4
00001688  16DC                     769      MOVE.B  (A4)+, (A3)+
0000168A  16DC                     770      MOVE.B  (A4)+, (A3)+
0000168C  16DC                     771      MOVE.B  (A4)+, (A3)+
0000168E  16DC                     772      MOVE.B  (A4)+, (A3)+
00001690  4E75                     773      RTS
00001692                           774  
00001692                           775  PASTE_5
00001692  16DC                     776      MOVE.B  (A4)+, (A3)+
00001694  16DC                     777      MOVE.B  (A4)+, (A3)+
00001696  16DC                     778      MOVE.B  (A4)+, (A3)+
00001698  16DC                     779      MOVE.B  (A4)+, (A3)+
0000169A  16DC                     780      MOVE.B  (A4)+, (A3)+
0000169C  4E75                     781      RTS
0000169E                           782  
0000169E  FFFF FFFF                783      SIMHALT
000016A2                           784  
000016A2                           785  
000016A2                           786  
000016A2                           787  
000016A2                           788  
000016A2                           789  
000016A2                           790  -------------------- end include --------------------
000016A2                           791      INCLUDE         'EFFECTIVE_ADDRESSES.X68'
000016A2                           792  
000016A2                           793      *EXAMPLE, MOVE A HEX CODE INTO D6
000016A2                           794      *CALL THE CORRESPONDING EA CODE
000016A2                           795      *MOVE.W     #$2E7C, D6
000016A2                           796      *BRA         EA_MOVE
000016A2                           797      *END EXAMPLE
000016A2                           798      
000016A2                           799  EA_MOVE      *1 invalid; done
000016A2  3E00                     800      MOVE.W      D0, D7 *DO THIS AT THE BEGGINING OF EVERY EA 
000016A4                           801      
000016A4  3807                     802      MOVE.W      D7, D4      *
000016A6  E04C                     803      LSR.W       #8, D4      *
000016A8  E84C                     804      LSR.W       #4, D4      *D4 = SIZE
000016AA  4EB9 00001E04            805      JSR GET_SIZE
000016B0                           806      
000016B0  3807                     807      MOVE.W      D7, D4      *
000016B2  E14C                     808      LSL.W       #8, D4      *
000016B4  E54C                     809      LSL.W       #2, D4
000016B6  E04C                     810      LSR.W       #8, D4      *
000016B8  EA4C                     811      LSR.W       #5, D4      *D4 = <0000 0000> D4 = SOURCE MODE
000016BA                           812      
000016BA  3A07                     813      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000016BC  E14D                     814      LSL.W       #8, D5  
000016BE  EB4D                     815      LSL.W       #5, D5      *
000016C0  E04D                     816      LSR.W       #8, D5
000016C2  EA4D                     817      LSR.W       #5, D5      *D5 = SOURCE REGISTER
000016C4                           818      
000016C4  4EB9 00001EFA            819      JSR         MODE_CHOOSER
000016CA  41F9 00001D38            820      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000016D0  C9FC 0006                821      MULS        #6, D4          *GET JUMP
000016D4  4EB0 4000                822      JSR         0(A0, D4)       *JUMP
000016D8  4EB9 00001F76            823      JSR COMMA
000016DE  4EB9 00001FD8            824      JSR SPACE
000016E4  3807                     825      MOVE.W      D7, D4      *
000016E6  EF4C                     826      LSL.W       #7, D4      *
000016E8  EE4C                     827      LSR.W       #7, D4      *
000016EA  EC4C                     828      LSR.W       #6, D4      *D4 = DESTINATION MODE
000016EC  4EB9 00001CAE            829      JSR         MOVE_ERROR_CHECK 
000016F2                           830      
000016F2  3A07                     831      MOVE.W      D7, D5      *
000016F4  E94D                     832      LSL.W       #4, D5      *
000016F6  E04D                     833      LSR.W       #8, D5      *
000016F8  EA4D                     834      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
000016FA                           835      
000016FA  4EB9 00001EFA            836      JSR         MODE_CHOOSER
00001700  41F9 00001D38            837      LEA         MODE_JUMP, A0   *LOAD MODE JUMP
00001706  C9FC 0006                838      MULS        #6, D4          *GET JUMP
0000170A  4EB0 4000                839      JSR         0(A0, D4)       *JUMP
0000170E  16BC 0000                840      MOVE.B      #00, (A3) 
00001712  6000 FB5E                841      BRA         VALID_OPCODE
00001716                           842  EA_MOVEA        *0 invalid
00001716  3E00                     843      MOVE.W      D0, D7
00001718                           844  
00001718  3807                     845      MOVE.W      D7, D4      *GETTING SIZE
0000171A  E04C                     846      LSR.W       #8, D4      *
0000171C  E84C                     847      LSR.W       #4, D4      *SHIFT 12 BITS RIGHT
0000171E  4EB9 00001E04            848      JSR         GET_SIZE    *D4 = SIZE
00001724                           849      
00001724  3807                     850      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001726  E14C                     851      LSL.W       #8, D4      *
00001728  E54C                     852      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
0000172A  E04C                     853      LSR.W       #8, D4      *
0000172C  EA4C                     854      LSR.W       #5, D4      *D4 = SOURCE MODE
0000172E                           855  
0000172E  3A07                     856      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
00001730  E14D                     857      LSL.W       #8, D5      *
00001732  EB4D                     858      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001734  E04D                     859      LSR.W       #8, D5      *
00001736  EA4D                     860      LSR.W       #5, D5      *D5 = SOURCE REGISTER
00001738                           861      
00001738  4EB9 00001EFA            862      JSR         MODE_CHOOSER  *INCASE MODE IS $111
0000173E  41F9 00001D38            863      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001744  C9FC 0006                864      MULS        #6, D4        *GET JUMP
00001748  4EB0 4000                865      JSR         0(A0, D4)     *JUMP
0000174C  4EB9 00001F76            866      JSR         COMMA
00001752  4EB9 00001FD8            867      JSR         SPACE
00001758  3A07                     868      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
0000175A  E94D                     869      LSL.W       #4, D5      *
0000175C  E04D                     870      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
0000175E  EA4D                     871      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
00001760                           872      
00001760  4EB9 00001D76            873      JSR         ADDR_1
00001766  16BC 0000                874      MOVE.B      #00, (A3)
0000176A  6000 FB06                875      BRA         VALID_OPCODE
0000176E                           876  EA_MOVEQ        *0 invalid
0000176E  3E00                     877      MOVE.W      D0, D7
00001770                           878  
00001770  4EB9 00001FD8            879      JSR SPACE
00001776  4EB9 00001F7E            880      JSR POUND
0000177C  4EB9 00001FE0            881      JSR CASH
00001782  6100 07A4                882      BSR OUTPUT_HEX    
00001786  4EB9 00001F76            883      JSR COMMA
0000178C  4EB9 00001FD8            884      JSR SPACE
00001792  3A07                     885      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
00001794  E94D                     886      LSL.W       #4, D5      *
00001796  E04D                     887      LSR.W       #8, D5      *
00001798  EA4D                     888      LSR.W       #5, D5      * D5 = DESTINATION REGISTER
0000179A                           889      
0000179A  4EB9 00001D68            890      JSR         DATA_0
000017A0  16BC 0000                891      MOVE.B      #00, (A3)
000017A4  6000 FACC                892      BRA         VALID_OPCODE
000017A8                           893  EA_ADD          *3 invalid; done
000017A8                           894  
000017A8  3E00                     895      MOVE.W      D0, D7
000017AA                           896  
000017AA  3807                     897      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
000017AC  EF4C                     898      LSL.W       #7, D4      * 
000017AE  EE4C                     899      LSR.W       #7, D4      *
000017B0  EC4C                     900      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
000017B2  4EB9 00001E46            901      JSR         GET_OPMODE_MATH *PRINTS THE SIZE
000017B8                           902  
000017B8  B83C 0003                903      CMP.B       #3, D4
000017BC  6D00 000A                904      BLT         DN_VERSION
000017C0  B83C 0003                905      CMP.B       #3, D4
000017C4  6E00 004C                906      BGT         EA_VERSION
000017C8                           907  DN_VERSION *EA IS SOURCE, REGISTER IS DESTINATION <EA> + DN -> DN
000017C8  3807                     908      MOVE.W      D7, D4      
000017CA  E14C                     909      LSL.W       #8, D4      *LEFT 10; RIGHT 13
000017CC  E54C                     910      LSL.W       #2, D4
000017CE  E04C                     911      LSR.W       #8, D4      *
000017D0  EA4C                     912      LSR.W       #5, D4      *D4 = EA MODE
000017D2                           913      
000017D2  3A07                     914      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000017D4  E14D                     915      LSL.W       #8, D5  
000017D6  EB4D                     916      LSL.W       #5, D5      *
000017D8  E04D                     917      LSR.W       #8, D5
000017DA  EA4D                     918      LSR.W       #5, D5      * D5 = EA REGISTER
000017DC                           919      
000017DC  4EB9 00001EFA            920      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
000017E2  41F9 00001D38            921      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000017E8  C9FC 0006                922      MULS        #6, D4          *GET JUMP
000017EC  4EB0 4000                923      JSR         0(A0, D4)       *JUMP
000017F0                           924          
000017F0  4EB9 00001F76            925      JSR         COMMA
000017F6  4EB9 00001FD8            926      JSR         SPACE
000017FC                           927      
000017FC  3A07                     928      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
000017FE  E94D                     929      LSL.W       #4, D5      *
00001800  E04D                     930      LSR.W       #8, D5      *
00001802  EA4D                     931      LSR.W       #5, D5      *D5 DESTINATION REGISTER
00001804                           932      
00001804  4EB9 00001D68            933      JSR         DATA_0
0000180A  16BC 0000                934      MOVE.B      #00, (A3)
0000180E  6000 FA62                935      BRA         VALID_OPCODE
00001812                           936  EA_VERSION
00001812  3A07                     937      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
00001814  E94D                     938      LSL.W       #4, D5      *
00001816  E04D                     939      LSR.W       #8, D5      *
00001818  EA4D                     940      LSR.W       #5, D5      *D5 DESTINATION REGISTER
0000181A  4EB9 00001D68            941      JSR         DATA_0
00001820                           942      
00001820  4EB9 00001F76            943      JSR         COMMA
00001826  4EB9 00001FD8            944      JSR         SPACE
0000182C                           945      
0000182C  3807                     946      MOVE.W      D7, D4      
0000182E  E14C                     947      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001830  E54C                     948      LSL.W       #2, D4
00001832  E04C                     949      LSR.W       #8, D4      *
00001834  EA4C                     950      LSR.W       #5, D4      *D4 = EA MODE
00001836                           951      
00001836  3A07                     952      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001838  E14D                     953      LSL.W       #8, D5  
0000183A  EB4D                     954      LSL.W       #5, D5      *
0000183C  E04D                     955      LSR.W       #8, D5
0000183E  EA4D                     956      LSR.W       #5, D5      * D5 = EA REGISTER
00001840                           957      
00001840                           958      *the only way there could be an error is if 
00001840                           959      *we are in THIS addressing mo
00001840                           960      
00001840  4EB9 00001EFA            961      JSR         MODE_CHOOSER    *IF A WORD OR LONG 
00001846  4EB9 00001CB8            962      JSR         ADD_ERROR_CHECK
0000184C  41F9 00001D38            963      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001852  C9FC 0006                964      MULS        #6, D4          *GET JUMP
00001856  4EB0 4000                965      JSR         0(A0, D4)       *JUMP
0000185A                           966      
0000185A  16BC 0000                967      MOVE.B      #00, (A3)
0000185E  6000 FA12                968      BRA         VALID_OPCODE
00001862                           969  EA_ADDI  *2 invalid; DONE
00001862  3E00                     970      MOVE.W      D0, D7
00001864                           971      
00001864  3807                     972      MOVE.W      D7, D4      *
00001866  E14C                     973      LSL.W       #8, D4      *
00001868  E04C                     974      LSR.W       #8, D4      *
0000186A  EC4C                     975      LSR.W       #6, D4      *D4 = SIZE
0000186C  4EB9 00001E98            976      JSR         GET_SIZE_ADDI
00001872  4EB9 00001F7E            977      JSR         POUND
00001878  4EB9 00001FE0            978      JSR         CASH
0000187E  6100 06A8                979      BSR         OUTPUT_HEX
00001882  4EB9 00001F76            980      JSR         COMMA
00001888  4EB9 00001FD8            981      JSR         SPACE
0000188E  3807                     982      MOVE.W      D7, D4      
00001890  E14C                     983      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001892  E54C                     984      LSL.W       #2, D4
00001894  E04C                     985      LSR.W       #8, D4      *
00001896  EA4C                     986      LSR.W       #5, D4      *D4 = EA MODE
00001898                           987      
00001898  3A07                     988      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
0000189A  E14D                     989      LSL.W       #8, D5  
0000189C  EB4D                     990      LSL.W       #5, D5      *
0000189E  E04D                     991      LSR.W       #8, D5
000018A0  EA4D                     992      LSR.W       #5, D5      * D5 = EA REGISTER
000018A2                           993      
000018A2  4EB9 00001EFA            994      JSR         MODE_CHOOSER    *IF A WORD OR LONG  
000018A8  4EB9 00001CD2            995      JSR         ADDI_ERROR_CHECK
000018AE  41F9 00001D38            996      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000018B4  C9FC 0006                997      MULS        #6, D4          *GET JUMP
000018B8  4EB0 4000                998      JSR         0(A0, D4)       *JUMP'
000018BC                           999      
000018BC  16BC 0000               1000      MOVE.B      #00, (A3)
000018C0  6000 F9B0               1001      BRA         VALID_OPCODE
000018C4                          1002  EA_ADDQ     *0 INVALID
000018C4  3E00                    1003      MOVE.W      D0, D7
000018C6                          1004      
000018C6  3807                    1005      MOVE.W      D7, D4
000018C8  E14C                    1006      LSL.W       #8, D4
000018CA  E04C                    1007      LSR.W       #8, D4
000018CC  EC4C                    1008      LSR.W       #6, D4
000018CE  4EB9 00001E98           1009      JSR         GET_SIZE_ADDI    *PRINT SIZE
000018D4                          1010      
000018D4  3A07                    1011      MOVE.W      D7, D5      *GETTING DATA
000018D6  E94D                    1012      LSL.W       #4, D5      *SHIFT LEFT 4; RIGHT 13
000018D8  E04D                    1013      LSR.W       #8, D5      *
000018DA  EA4D                    1014      LSR.W       #5, D5      *D5 = DATA
000018DC  4EB9 00001E7E           1015      JSR         GET_DATA
000018E2  4EB9 00001F76           1016      JSR COMMA
000018E8  4EB9 00001FD8           1017      JSR SPACE
000018EE  3807                    1018      MOVE.W      D7, D4      *GETTING EA MODE
000018F0  E14C                    1019      LSL.W       #8, D4      *
000018F2  E54C                    1020      LSL.W       #2, D4      *SHIFT 10 LEFT; 13 RIGHT
000018F4  E04C                    1021      LSR.W       #8, D4      *
000018F6  EA4C                    1022      LSR.W       #5, D4      *D4 = EA MODE
000018F8                          1023      
000018F8  3A07                    1024      MOVE.W      D7, D5      *GETTING EA REGISTER
000018FA  E14D                    1025      LSL.W       #8, D5      *
000018FC  EB4D                    1026      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
000018FE  E04D                    1027      LSR.W       #8, D5      *
00001900  EA4D                    1028      LSR.W       #5, D5      *D5 = EA REGISTER
00001902                          1029      
00001902  4EB9 00001EFA           1030      JSR         MODE_CHOOSER
00001908  41F9 00001D38           1031      LEA         MODE_JUMP, A0   *LOAD MODE JUMP
0000190E  C9FC 0006               1032      MULS        #6, D4          *GET JUMP
00001912  4EB0 4000               1033      JSR         0(A0, D4)       *JUMP
00001916                          1034      
00001916  16BC 0000               1035      MOVE.B      #00, (A3)
0000191A                          1036      
0000191A  6000 F956               1037      BRA         VALID_OPCODE
0000191E                          1038  EA_ADDA         *0 INVALID
0000191E  3E00                    1039      MOVE.W      D0, D7
00001920                          1040      
00001920  3807                    1041      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
00001922  EF4C                    1042      LSL.W       #7, D4      * 
00001924  EE4C                    1043      LSR.W       #7, D4      *
00001926  EC4C                    1044      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
00001928  4EB9 00001E2E           1045      JSR         GET_OPMODE
0000192E                          1046      
0000192E  3807                    1047      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001930  E14C                    1048      LSL.W       #8, D4      *
00001932  E54C                    1049      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
00001934  E04C                    1050      LSR.W       #8, D4      *
00001936  EA4C                    1051      LSR.W       #5, D4      *D4 = SOURCE MODE
00001938                          1052      
00001938  3A07                    1053      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
0000193A  E14D                    1054      LSL.W       #8, D5      *
0000193C  EB4D                    1055      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
0000193E  E04D                    1056      LSR.W       #8, D5      *
00001940  EA4D                    1057      LSR.W       #5, D5      *D5 = SOURCE REGISTER
00001942                          1058      
00001942  4EB9 00001EFA           1059      JSR         MODE_CHOOSER  *INCASE MODE IS $111
00001948  41F9 00001D38           1060      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
0000194E  C9FC 0006               1061      MULS        #6, D4        *GET JUMP
00001952  4EB0 4000               1062      JSR         0(A0, D4)     *JUMP
00001956  4EB9 00001F76           1063      JSR COMMA 
0000195C  4EB9 00001FD8           1064      JSR SPACE
00001962  3A07                    1065      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
00001964  E94D                    1066      LSL.W       #4, D5      *
00001966  E04D                    1067      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
00001968  EA4D                    1068      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
0000196A                          1069      
0000196A  4EB9 00001D76           1070      JSR         ADDR_1
00001970  16BC 0000               1071      MOVE.B      #00, (A3)
00001974                          1072      
00001974  6000 F8FC               1073      BRA         VALID_OPCODE
00001978                          1074  EA_MULS                *1 INVALID;
00001978                          1075  
00001978  3E00                    1076      MOVE.W      D0, D7
0000197A                          1077      
0000197A  4EB9 00001FD8           1078      JSR         SPACE
00001980  3807                    1079      MOVE.W      D7, D4      
00001982  E14C                    1080      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001984  E54C                    1081      LSL.W       #2, D4
00001986  E04C                    1082      LSR.W       #8, D4      *
00001988  EA4C                    1083      LSR.W       #5, D4      *D4 = EA MODE
0000198A                          1084      
0000198A  3A07                    1085      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
0000198C  E14D                    1086      LSL.W       #8, D5  
0000198E  EB4D                    1087      LSL.W       #5, D5      *
00001990  E04D                    1088      LSR.W       #8, D5
00001992  EA4D                    1089      LSR.W       #5, D5      * D5 = EA REGISTER
00001994                          1090      
00001994  4EB9 00001EFA           1091      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
0000199A  41F9 00001D38           1092      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000019A0  C9FC 0006               1093      MULS        #6, D4          *GET JUMP
000019A4  4EB0 4000               1094      JSR         0(A0, D4)       *JUMP
000019A8  4EB9 00001F76           1095      JSR         COMMA
000019AE  4EB9 00001FD8           1096      JSR         SPACE
000019B4  3A07                    1097      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
000019B6  E94D                    1098      LSL.W       #4, D5      *
000019B8  E04D                    1099      LSR.W       #8, D5      *
000019BA  EA4D                    1100      LSR.W       #5, D5      *D5 DESTINATION REGISTER
000019BC                          1101      
000019BC  4EB9 00001D68           1102      JSR         DATA_0
000019C2  16BC 0000               1103      MOVE.B      #00, (A3)
000019C6                          1104      
000019C6  6000 F8AA               1105      BRA         VALID_OPCODE
000019CA                          1106  EA_LEA          *5 INVALIDS; DONE
000019CA  3E00                    1107      MOVE.W      D0, D7
000019CC                          1108      
000019CC  4EB9 00001FD8           1109      JSR         SPACE
000019D2  3807                    1110      MOVE.W      D7, D4      *GETTING SOURCE MODE
000019D4  E14C                    1111      LSL.W       #8, D4      *
000019D6  E54C                    1112      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
000019D8  E04C                    1113      LSR.W       #8, D4      *
000019DA  EA4C                    1114      LSR.W       #5, D4      *D4 = SOURCE MODE
000019DC                          1115      
000019DC  3A07                    1116      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
000019DE  E14D                    1117      LSL.W       #8, D5      *
000019E0  EB4D                    1118      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
000019E2  E04D                    1119      LSR.W       #8, D5      *
000019E4  EA4D                    1120      LSR.W       #5, D5      *D5 = SOURCE REGISTER
000019E6                          1121      
000019E6  4EB9 00001EFA           1122      JSR         MODE_CHOOSER  *INCASE MODE IS $111
000019EC  4EB9 00001CE4           1123      JSR         LEA_ERROR_CHECK
000019F2  41F9 00001D38           1124      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
000019F8  C9FC 0006               1125      MULS        #6, D4        *GET JUMP
000019FC  4EB0 4000               1126      JSR         0(A0, D4)     *JUMP
00001A00  4EB9 00001F76           1127      JSR COMMA
00001A06  4EB9 00001FD8           1128      JSR SPACE
00001A0C  3A07                    1129      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
00001A0E  E94D                    1130      LSL.W       #4, D5      *
00001A10  E04D                    1131      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
00001A12  EA4D                    1132      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
00001A14                          1133      
00001A14  4EB9 00001D76           1134      JSR         ADDR_1
00001A1A  16BC 0000               1135      MOVE.B      #00, (A3)
00001A1E                          1136      
00001A1E  6000 F852               1137      BRA         VALID_OPCODE
00001A22                          1138  EA_CLR          *2 INVALID; DONE
00001A22  3E00                    1139      MOVE.W      D0, D7
00001A24                          1140      
00001A24  3807                    1141      MOVE.W      D7, D4
00001A26  E14C                    1142      LSL.W       #8, D4      *
00001A28  E04C                    1143      LSR.W       #8, D4      *
00001A2A  EC4C                    1144      LSR.W       #6, D4      *D4 = SIZE
00001A2C  4EB9 00001E98           1145      JSR         GET_SIZE_ADDI
00001A32  3807                    1146      MOVE.W      D7, D4      
00001A34  E14C                    1147      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001A36  E54C                    1148      LSL.W       #2, D4
00001A38  E04C                    1149      LSR.W       #8, D4      *
00001A3A  EA4C                    1150      LSR.W       #5, D4      *D4 = EA MODE
00001A3C                          1151      
00001A3C  3A07                    1152      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001A3E  E14D                    1153      LSL.W       #8, D5  
00001A40  EB4D                    1154      LSL.W       #5, D5      *
00001A42  E04D                    1155      LSR.W       #8, D5
00001A44  EA4D                    1156      LSR.W       #5, D5      * D5 = EA REGISTER
00001A46                          1157      
00001A46  4EB9 00001EFA           1158      JSR         MODE_CHOOSER    *IF A WORD OR LONG  
00001A4C  4EB9 00001CD2           1159      JSR         ADDI_ERROR_CHECK  
00001A52  41F9 00001D38           1160      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001A58  C9FC 0006               1161      MULS        #6, D4          *GET JUMP
00001A5C  4EB0 4000               1162      JSR         0(A0, D4)       *JUMP
00001A60                          1163      
00001A60  16BC 0000               1164      MOVE.B      #00, (A3)
00001A64                          1165      
00001A64  6000 F80C               1166      BRA         VALID_OPCODE
00001A68                          1167  EA_LSD          *3 INVALID; DONE
00001A68  3E00                    1168      MOVE.W      D0, D7
00001A6A                          1169      
00001A6A  3807                    1170      MOVE.W      D7, D4
00001A6C  E14C                    1171      LSL.W       #8, D4
00001A6E  E04C                    1172      LSR.W       #8, D4
00001A70  EC4C                    1173      LSR.W       #6, D4      *ISOLATE SIZE
00001A72  4EB9 00001E98           1174      JSR         GET_SIZE_ADDI  *PRINT SIZE
00001A78  B83C 0003               1175      CMP.B       #3, D4      *EA SHIFT
00001A7C  6700 003E               1176      BEQ         EA_SHIFT    *BRANCH TO EA SHIFT
00001A80  3807                    1177      MOVE.W      D7, D4
00001A82  E14C                    1178      LSL.W       #8, D4
00001A84  E54C                    1179      LSL.W       #2, D4
00001A86  E04C                    1180      LSR.W       #8, D4
00001A88  EE4C                    1181      LSR.W       #7, D4      *D4 = TYPE
00001A8A                          1182      
00001A8A  3A07                    1183      MOVE.W      D7, D5      *GETTING DATA
00001A8C  E94D                    1184      LSL.W       #4, D5      *SHIFT LEFT 4; RIGHT 13
00001A8E  E04D                    1185      LSR.W       #8, D5      *
00001A90  EA4D                    1186      LSR.W       #5, D5      *D5 = DATA / REGISTER
00001A92                          1187      
00001A92  4EB9 00001EB8           1188      JSR         TYPE_CHOOSER
00001A98  4EB9 00001F76           1189      JSR         COMMA
00001A9E  4EB9 00001FD8           1190      JSR         SPACE
00001AA4  3A07                    1191      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001AA6  E14D                    1192      LSL.W       #8, D5  
00001AA8  EB4D                    1193      LSL.W       #5, D5      *
00001AAA  E04D                    1194      LSR.W       #8, D5
00001AAC  EA4D                    1195      LSR.W       #5, D5      * D5 = EA REGISTER
00001AAE  4EB9 00001D68           1196      JSR         DATA_0
00001AB4                          1197      
00001AB4  16BC 0000               1198      MOVE.B      #00, (A3)
00001AB8                          1199      
00001AB8  6000 F7B8               1200      BRA         VALID_OPCODE
00001ABC                          1201  EA_SHIFT
00001ABC  4EB9 00001FD8           1202      JSR         SPACE
00001AC2  3807                    1203      MOVE.W      D7, D4      *
00001AC4  E14C                    1204      LSL.W       #8, D4      *
00001AC6  E54C                    1205      LSL.W       #2, D4
00001AC8  E04C                    1206      LSR.W       #8, D4      *
00001ACA  EA4C                    1207      LSR.W       #5, D4      *D4 = EA MODE
00001ACC                          1208      
00001ACC  3A07                    1209      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001ACE  E14D                    1210      LSL.W       #8, D5  
00001AD0  EB4D                    1211      LSL.W       #5, D5      *
00001AD2  E04D                    1212      LSR.W       #8, D5
00001AD4  EA4D                    1213      LSR.W       #5, D5      * D5 = EA REGISTER
00001AD6                          1214      
00001AD6  4EB9 00001EFA           1215      JSR         MODE_CHOOSER    *IF A WORD OR LONG   
00001ADC  4EB9 00001CB8           1216      JSR         ADD_ERROR_CHECK 
00001AE2  41F9 00001D38           1217      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001AE8  C9FC 0006               1218      MULS        #6, D4          *GET JUMP
00001AEC  4EB0 4000               1219      JSR         0(A0, D4)       *JUMP
00001AF0  6000 0002               1220      BRA         DONE
00001AF4                          1221  DONE
00001AF4  16BC 0000               1222      MOVE.B      #00, (A3)
00001AF8                          1223      
00001AF8  6000 F778               1224      BRA         VALID_OPCODE
00001AFC                          1225  
00001AFC                          1226  EA_CMP          *0 INVALID
00001AFC  3E00                    1227      MOVE.W      D0, D7
00001AFE                          1228      
00001AFE  3807                    1229      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
00001B00  EF4C                    1230      LSL.W       #7, D4      * 
00001B02  EE4C                    1231      LSR.W       #7, D4      *
00001B04  EC4C                    1232      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
00001B06  4EB9 00001E98           1233      JSR         GET_SIZE_ADDI
00001B0C  3807                    1234      MOVE.W      D7, D4      
00001B0E  E14C                    1235      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001B10  E54C                    1236      LSL.W       #2, D4
00001B12  E04C                    1237      LSR.W       #8, D4      *
00001B14  EA4C                    1238      LSR.W       #5, D4      *D4 = EA MODE
00001B16                          1239      
00001B16  3A07                    1240      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001B18  E14D                    1241      LSL.W       #8, D5  
00001B1A  EB4D                    1242      LSL.W       #5, D5      *
00001B1C  E04D                    1243      LSR.W       #8, D5
00001B1E  EA4D                    1244      LSR.W       #5, D5      * D5 = EA REGISTER
00001B20                          1245      
00001B20  4EB9 00001EFA           1246      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001B26  41F9 00001D38           1247      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001B2C  C9FC 0006               1248      MULS        #6, D4          *GET JUMP
00001B30  4EB0 4000               1249      JSR         0(A0, D4)       *JUMP
00001B34  4EB9 00001F76           1250      JSR         COMMA
00001B3A  4EB9 00001FD8           1251      JSR         SPACE
00001B40  3A07                    1252      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
00001B42  E94D                    1253      LSL.W       #4, D5      *
00001B44  E04D                    1254      LSR.W       #8, D5      *
00001B46  EA4D                    1255      LSR.W       #5, D5      *D5 DESTINATION REGISTER
00001B48                          1256      
00001B48  4EB9 00001D68           1257      JSR         DATA_0
00001B4E  16BC 0000               1258      MOVE.B      #00, (A3)
00001B52                          1259      
00001B52  6000 F71E               1260      BRA         VALID_OPCODE
00001B56                          1261  EA_BCC          *0 INVALID (I THINK)
00001B56  3E00                    1262      MOVE.W      D0, D7
00001B58                          1263      
00001B58  3807                    1264      MOVE.W      D7, D4
00001B5A  E94C                    1265      LSL.W       #4, D4
00001B5C  E04C                    1266      LSR.W       #8, D4
00001B5E  E84C                    1267      LSR.W       #4, D4   *D4 = BINARY CONDITION CODE
00001B60  4EB9 00001EC8           1268      JSR         PRINT_BCC
00001B66  4EB9 00001FD8           1269      JSR         SPACE
00001B6C  4EB9 00001F28           1270      JSR         OUTPUT_HEX
00001B72  16BC 0000               1271      MOVE.B      #00, (A3)
00001B76                          1272      
00001B76  6000 F6FA               1273      BRA         VALID_OPCODE
00001B7A                          1274  EA_JSR   *5 INVALID; DONE
00001B7A                          1275  
00001B7A  3E00                    1276      MOVE.W      D0, D7
00001B7C                          1277      
00001B7C  4EB9 00001FD8           1278      JSR         SPACE
00001B82  3807                    1279      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001B84  E14C                    1280      LSL.W       #8, D4      *
00001B86  E54C                    1281      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
00001B88  E04C                    1282      LSR.W       #8, D4      *
00001B8A  EA4C                    1283      LSR.W       #5, D4      *D4 = SOURCE MODE
00001B8C                          1284      
00001B8C  3A07                    1285      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
00001B8E  E14D                    1286      LSL.W       #8, D5      *
00001B90  EB4D                    1287      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001B92  E04D                    1288      LSR.W       #8, D5      *
00001B94  EA4D                    1289      LSR.W       #5, D5      *D5 = SOURCE REGISTER
00001B96                          1290      
00001B96  4EB9 00001EFA           1291      JSR         MODE_CHOOSER  *INCASE MODE IS $111
00001B9C  4EB9 00001CE4           1292      JSR         LEA_ERROR_CHECK
00001BA2  41F9 00001D38           1293      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001BA8  C9FC 0006               1294      MULS        #6, D4        *GET JUMP
00001BAC  4EB0 4000               1295      JSR         0(A0, D4)     *JUM
00001BB0                          1296      
00001BB0  16BC 0000               1297      MOVE.B      #00, (A3)
00001BB4                          1298      
00001BB4  6000 F6BC               1299      BRA         VALID_OPCODE
00001BB8                          1300  EA_MOVEM
00001BB8                          1301  
00001BB8  3C00                    1302      MOVE.W      D0, D6
00001BBA  3806                    1303      MOVE.W      D6, D4
00001BBC  EB4C                    1304      LSL.W       #5, D4
00001BBE  E94C                    1305      LSL.W       #4, D4
00001BC0  E04C                    1306      LSR.W       #8, D4
00001BC2  EE4C                    1307      LSR.W       #7, D4
00001BC4  4EB9 00001EE2           1308      JSR         REG_SIZE
00001BCA  3E06                    1309      MOVE.W      D6, D7
00001BCC  EB4F                    1310      LSL.W       #5, D7
00001BCE  E04F                    1311      LSR.W       #8, D7
00001BD0  EE4F                    1312      LSR.W       #7, D7
00001BD2  BE3C 0000               1313      CMP.B       #0, D7
00001BD6  6700 003E               1314      BEQ         PRINT_LIST
00001BDA  BE7C 0000               1315  EAP CMP.W       #0, D7      *IF ITS A ZERO, THAT MEANS WE JUST JUMPED HERE 
00001BDE  6700 00A2               1316      BEQ         COMMA_SPACE *FROM CHECK TYPE, ELSE MEANS ITS UNALTERED
00001BE2  3806                    1317  EAS MOVE.W      D6, D4      
00001BE4  E14C                    1318      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001BE6  E54C                    1319      LSL.W       #2, D4
00001BE8  E04C                    1320      LSR.W       #8, D4      *
00001BEA  EA4C                    1321      LSR.W       #5, D4      *D4 = EA MODE
00001BEC                          1322      
00001BEC  3A06                    1323      MOVE.W      D6, D5      *SHIFT LEFT 13; RIGHT 13
00001BEE  E14D                    1324      LSL.W       #8, D5  
00001BF0  EB4D                    1325      LSL.W       #5, D5      *
00001BF2  E04D                    1326      LSR.W       #8, D5
00001BF4  EA4D                    1327      LSR.W       #5, D5      * D5 = EA REGISTER
00001BF6                          1328      
00001BF6  4EB9 00001EFA           1329      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001BFC  41F9 00001D38           1330      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001C02  C9FC 0006               1331      MULS        #6, D4          *GET JUMP
00001C06  4EB0 4000               1332      JSR         0(A0, D4)       *JUMP
00001C0A                          1333      
00001C0A  BE7C 0001               1334      CMP.W       #1, D7 *IF ONE THEN THIS WAS PRINTED FIRST
00001C0E  6700 0006               1335      BEQ         PRINT_LIST
00001C12                          1336      
00001C12  6000 008E               1337      BRA         DONE_PRINTING
00001C16                          1338  PRINT_LIST
00001C16  BE3C 0001               1339      CMP.B       #1, D7 
00001C1A  6700 0076               1340      BEQ         COMMA_SPACE2
00001C1E  2E0A                    1341  EA2 MOVE.L      A2, D7
00001C20  548A                    1342      ADD.L       #2, A2
00001C22  143C 0008               1343      MOVE.B      #$8, D2
00001C26  4244                    1344      CLR         D4
00001C28                          1345  FOR_LOOP    
00001C28  B404                    1346      CMP.B       D4, D2
00001C2A  6700 001E               1347      BEQ         ADDRESS_REGISTERS
00001C2E  E25F                    1348      ROR.W       #1, D7
00001C30  6000 0006               1349      BRA         PRINT_CURRENT
00001C34  5244                    1350  JFZ ADDQ        #1, D4
00001C36  60F0                    1351      BRA         FOR_LOOP
00001C38                          1352      
00001C38                          1353  PRINT_CURRENT
00001C38  64FA                    1354      BCC         JFZ
00001C3A  1A04                    1355      MOVE.B      D4, D5
00001C3C  4EB9 00001D68           1356      JSR         DATA_0
00001C42  4EB9 00002000           1357      JSR         SLASH
00001C48  60EA                    1358      BRA         JFZ
00001C4A                          1359      
00001C4A                          1360  ADDRESS_REGISTERS
00001C4A  4244                    1361      CLR         D4
00001C4C                          1362  FOR_2
00001C4C  B404                    1363      CMP.B       D4, D2
00001C4E  6700 001E               1364      BEQ         CHECK_TYPE
00001C52  E25F                    1365      ROR.W       #1, D7
00001C54  6000 0006               1366      BRA         EA_PRINT_ADDRESS
00001C58  5244                    1367  JFF ADDQ        #1, D4
00001C5A  60F0                    1368      BRA         FOR_2
00001C5C                          1369      
00001C5C                          1370  EA_PRINT_ADDRESS
00001C5C  64FA                    1371      BCC         JFF
00001C5E  1A04                    1372      MOVE.B      D4, D5
00001C60  4EB9 00002000           1373      JSR         SLASH
00001C66  4EB9 00001D76           1374      JSR         ADDR_1
00001C6C  60EA                    1375      BRA         JFF  
00001C6E                          1376  CHECK_TYPE
00001C6E  3E06                    1377      MOVE.W      D6, D7
00001C70  EB4F                    1378      LSL.W       #5, D7  
00001C72  E04F                    1379      LSR.W       #8, D7
00001C74  EE4F                    1380      LSR.W       #7, D7
00001C76  BE3C 0000               1381      CMP.B       #0, D7   *IF TYPE IS 0 THE LIST HAS BEEN PRINTED FIRST  
00001C7A  6700 FF5E               1382      BEQ         EAP      *THEREFORE ITS TIME TO PRINT THE EAP
00001C7E  6600 0022               1383      BNE         DONE_PRINTING
00001C82                          1384      
00001C82                          1385  COMMA_SPACE
00001C82  4EB9 00001F76           1386      JSR         COMMA
00001C88  4EB9 00001FD8           1387      JSR         SPACE
00001C8E  6000 FF52               1388      BRA         EAS
00001C92                          1389      
00001C92                          1390  COMMA_SPACE2
00001C92  4EB9 00001F76           1391      JSR         COMMA
00001C98  4EB9 00001FD8           1392      JSR         SPACE
00001C9E  6000 FF7E               1393      BRA         EA2
00001CA2                          1394      
00001CA2                          1395  DONE_PRINTING
00001CA2  16BC 0000               1396      MOVE.B      #00, (A3)
00001CA6  6000 F5CA               1397      BRA         VALID_OPCODE
00001CAA                          1398  
00001CAA                          1399  
00001CAA                          1400  
00001CAA                          1401  
00001CAA                          1402  
00001CAA                          1403  
00001CAA                          1404  
00001CAA                          1405  
00001CAA                          1406  
00001CAA                          1407  
00001CAA                          1408  
00001CAA                          1409  
00001CAA                          1410  
00001CAA                          1411  
00001CAA                          1412  
00001CAA                          1413  
00001CAA                          1414  BYEBYE
00001CAA  FFFF FFFF               1415      SIMHALT
00001CAE                          1416  
00001CAE                          1417  
00001CAE                          1418  
00001CAE                          1419  
00001CAE                          1420  
00001CAE                          1421  
00001CAE                          1422  
00001CAE                          1423  
00001CAE                          1424  
00001CAE                          1425  
00001CAE                          1426  
00001CAE                          1427  
00001CAE                          1428  
00001CAE                          1429  
00001CAE                          1430  
00001CAE                          1431  MOVE_ERROR_CHECK       *only invalid move is desn addr reg
00001CAE  B83C 0001               1432      CMP.B       #1, D4 *if d4 is one, dest is addr reg
00001CB2  6700 0354               1433      BEQ         INVALID
00001CB6  4E75                    1434      RTS
00001CB8                          1435      
00001CB8                          1436  ADD_ERROR_CHECK  *COVERS ALL SHIFTS
00001CB8  B83C 0007               1437      CMP.B       #7, D4
00001CBC  6700 0072               1438      BEQ         EAT_INVALID
00001CC0  B83C 0001               1439      CMP.B       #1, D4
00001CC4  6700 0342               1440      BEQ         INVALID
00001CC8  B83C 0000               1441      CMP.B       #0, D4
00001CCC  6700 033A               1442      BEQ         INVALID
00001CD0  4E75                    1443      RTS 
00001CD2                          1444      
00001CD2                          1445  ADDI_ERROR_CHECK *COVERS CLR
00001CD2  B83C 0001               1446      CMP.B       #1, D4
00001CD6  6700 0330               1447      BEQ         INVALID
00001CDA  B83C 0007               1448      CMP.B       #7, D4
00001CDE  6700 0050               1449      BEQ         EAT_INVALID
00001CE2  4E75                    1450      RTS
00001CE4                          1451      
00001CE4                          1452  LEA_ERROR_CHECK *COVERS JSR
00001CE4  B83C 0000               1453      CMP.B       #0, D4
00001CE8  6700 031E               1454      BEQ         INVALID
00001CEC  B83C 0001               1455      CMP.B       #1, D4
00001CF0  6700 0316               1456      BEQ         INVALID
00001CF4  B83C 0003               1457      CMP.B       #3, D4
00001CF8  6700 030E               1458      BEQ         INVALID
00001CFC  B83C 0004               1459      CMP.B       #4, D4
00001D00  6700 0306               1460      BEQ         INVALID
00001D04  B83C 0007               1461      CMP.B       #7, D4
00001D08  6700 0026               1462      BEQ         EAT_INVALID
00001D0C  4E75                    1463      RTS
00001D0E                          1464      
00001D0E                          1465  MOVEM_ERROR_CHECK *0, 1, 4, 7
00001D0E  B83C 0000               1466      CMP.B       #0, D4
00001D12  6700 02F4               1467      BEQ         INVALID
00001D16  B83C 0001               1468      CMP.B       #1, D4
00001D1A  6700 02EC               1469      BEQ         INVALID
00001D1E  B83C 0004               1470      CMP.B       #4, D4
00001D22  6700 02E4               1471      BEQ         INVALID
00001D26  B83C 0007               1472      CMP.B       #7, D4
00001D2A  6700 0004               1473      BEQ         EAT_INVALID
00001D2E  4E75                    1474      RTS
00001D30                          1475      
00001D30                          1476      
00001D30                          1477      
00001D30                          1478      *assuming FOR NOW that it always eats a long
00001D30                          1479  EAT_INVALID *EATS THE NEXT TWO WORD VALUES... THEN CALLS INVALID
00001D30  548A                    1480      ADD.L       #2, A2      *EAT THE FIRST WORD
00001D32  548A                    1481      ADD.L       #2, A2      *EAT THE SECOND WORD
00001D34  6000 02D2               1482      BRA         INVALID
00001D38                          1483  
00001D38                          1484  
00001D38                          1485  
00001D38                          1486  
00001D38                          1487  
00001D38                          1488  
00001D38                          1489  
00001D38                          1490  
00001D38                          1491  
00001D38                          1492  
00001D38                          1493  
00001D38                          1494  
00001D38                          1495  
00001D38                          1496  
00001D38                          1497  
00001D38                          1498  
00001D38                          1499  
00001D38                          1500  
00001D38  4EF9 00001D68           1501  MODE_JUMP       JMP     DATA_0
00001D3E  4EF9 00001D76           1502                  JMP     ADDR_1
00001D44  4EF9 00001D84           1503                  JMP     ADDI_2
00001D4A  4EF9 00001D96           1504                  JMP     ADDP_3
00001D50  4EF9 00001DA2           1505                  JMP     ADDM_4
00001D56  4EF9 00001DAE           1506                  JMP     ABSW_5
00001D5C  4EF9 00001DC4           1507                  JMP     ABSL_6
00001D62  4EF9 00001DE8           1508                  JMP     IMME_7
00001D68                          1509  
00001D68                          1510  DATA_0 *DONE
00001D68  16F9 00007282           1511      MOVE.B      M_DREG, (A3)+
00001D6E  4EB9 00001E24           1512      JSR         GET_REG
00001D74  4E75                    1513      RTS
00001D76                          1514  
00001D76                          1515  ADDR_1 *ADD CONDITIONS FOR SOURCE ONLY, AND NEVER BYTES
00001D76  16F9 00007284           1516      MOVE.B      M_AREG, (A3)+
00001D7C  4EB9 00001E24           1517      JSR         GET_REG
00001D82  4E75                    1518      RTS
00001D84                          1519   
00001D84                          1520  ADDI_2 *DONE
00001D84  4EB9 00001FB8           1521      JSR         OPEN
00001D8A  4EB8 1D76               1522      JSR         ADDR_1
00001D8E  4EB9 00001FC0           1523      JSR         CLOSE
00001D94  4E75                    1524      RTS
00001D96                          1525      
00001D96                          1526  ADDP_3 *DONE
00001D96  4EB8 1D84               1527      JSR         ADDI_2
00001D9A  4EB9 00001FC8           1528      JSR         PLUS
00001DA0  4E75                    1529      RTS
00001DA2                          1530      
00001DA2                          1531  ADDM_4 *DONE
00001DA2  4EB9 00001FD0           1532      JSR         SUB
00001DA8  4EB8 1D84               1533      JSR         ADDI_2
00001DAC  4E75                    1534      RTS
00001DAE                          1535      
00001DAE                          1536  ABSW_5  *DONE
00001DAE  548A                    1537      ADD.L       #2, A2      *INCREMENT INTO WORD ADDRESS
00001DB0  141A                    1538      MOVE.B      (A2)+, D2
00001DB2  E15A                    1539      ROL         #8, D2
00001DB4  1412                    1540      MOVE.B      (A2), D2
00001DB6  534A                    1541      SUB         #1, A2  
00001DB8  4EB9 00001FE0           1542      JSR         CASH
00001DBE  6100 0168               1543      BSR         OUTPUT_HEX
00001DC2  4E75                    1544      RTS
00001DC4                          1545  
00001DC4                          1546   
00001DC4                          1547  ABSL_6 *
00001DC4  4EB9 00001FE0           1548      JSR         CASH
00001DCA  548A                    1549      ADD.L       #2, A2      *INCREMENT INTO WORD
00001DCC  141A                    1550      MOVE.B      (A2)+, D2
00001DCE  E15A                    1551      ROL         #8, D2
00001DD0  1412                    1552      MOVE.B      (A2), D2
00001DD2  534A                    1553      SUB         #1, A2
00001DD4  6100 0152               1554      BSR         OUTPUT_HEX
00001DD8                          1555      
00001DD8                          1556      
00001DD8  548A                    1557      ADD.L       #2, A2      *IDCREMENT INTO NEXT WORK
00001DDA  141A                    1558      MOVE.B      (A2)+, D2
00001DDC  E15A                    1559      ROL         #8, D2
00001DDE  1412                    1560      MOVE.B      (A2), D2
00001DE0  534A                    1561      SUB         #1, A2
00001DE2  6100 0144               1562      BSR         OUTPUT_HEX
00001DE6  4E75                    1563      RTS
00001DE8                          1564      
00001DE8                          1565  IMME_7  *FOR NOW ONLY WORKING WITH IMMEDIATE HEX VALUES
00001DE8  4EB9 00001F7E           1566      JSR         POUND
00001DEE  4EB9 00001FE0           1567      JSR         CASH
00001DF4                          1568      
00001DF4  548A                    1569      ADD.L       #2, A2
00001DF6  141A                    1570      MOVE.B      (A2)+, D2
00001DF8  E15A                    1571      ROL         #8, D2
00001DFA  1412                    1572      MOVE.B      (A2), D2
00001DFC  534A                    1573      SUB         #1, A2
00001DFE  6100 0128               1574      BSR         OUTPUT_HEX
00001E02                          1575      
00001E02                          1576      
00001E02                          1577      
00001E02                          1578      *IDEA IS TO HAVE A FLAG HERE TO SEE IF THE DATA IS GONNA BE A LONG
00001E02                          1579      *THEN BRANCH TO THE BELOW THREE COMMANDS IF THE IMMEDIATE DATA IS A LONG
00001E02                          1580      
00001E02  4E75                    1581      RTS
00001E04                          1582  
00001E04                          1583  GET_SIZE
00001E04  4EB9 00001F86           1584      JSR         DOT
00001E0A  B83C 0001               1585      CMP.B       #1, D4
00001E0E  6700 018C               1586      BEQ         BYTE
00001E12  B83C 0003               1587      CMP.B       #3, D4
00001E16  6700 0176               1588      BEQ         WORD
00001E1A  B83C 0002               1589      CMP.B       #2, D4
00001E1E  6700 018A               1590      BEQ         LONG  
00001E22  4E75                    1591      RTS
00001E24                          1592      
00001E24                          1593  GET_REG ******************
00001E24  2205                    1594      MOVE.L      D5, D1 
00001E26  4EB8 12D2               1595      JSR         CONVERT_TO_ASCII
00001E2A  16C1                    1596      MOVE.B      D1, (A3)+
00001E2C  4E75                    1597      RTS
00001E2E                          1598      
00001E2E                          1599  GET_OPMODE
00001E2E  4EB9 00001F86           1600      JSR         DOT
00001E34  B83C 0003               1601      CMP.B       #3, D4
00001E38  6700 0154               1602      BEQ         WORD
00001E3C  B83C 0007               1603      CMP.B       #7, D4
00001E40  6700 0168               1604      BEQ         LONG
00001E44  4E75                    1605      RTS
00001E46                          1606      
00001E46                          1607  GET_OPMODE_MATH
00001E46  4EB9 00001F86           1608      JSR         DOT
00001E4C  B83C 0000               1609      CMP.B       #0, D4
00001E50  6700 014A               1610      BEQ         BYTE
00001E54  B83C 0004               1611      CMP.B       #4, D4
00001E58  6700 0142               1612      BEQ         BYTE
00001E5C  B83C 0001               1613      CMP.B       #1, D4
00001E60  6700 012C               1614      BEQ         WORD
00001E64  B83C 0005               1615      CMP.B       #5, D4
00001E68  6700 0124               1616      BEQ         WORD
00001E6C  B83C 0002               1617      CMP.B       #2, D4
00001E70  6700 0138               1618      BEQ         LONG
00001E74  B83C 0006               1619      CMP.B       #6, D4
00001E78  6700 0130               1620      BEQ         LONG
00001E7C  4E75                    1621      RTS
00001E7E                          1622      
00001E7E                          1623  GET_DATA ******************
00001E7E  4EB9 00001F7E           1624      JSR         POUND
00001E84  BA3C 0000               1625      CMP.B       #0, D5
00001E88  6700 0008               1626      BEQ         PRINT_8
00001E8C  2205                    1627      MOVE.L      D5, D1
00001E8E  16C1                    1628      MOVE.B      D1, (A3)+
00001E90  4E75                    1629      RTS
00001E92                          1630      
00001E92                          1631  PRINT_8 ********
00001E92  7208                    1632      MOVE.L      #8, D1
00001E94  16C1                    1633      MOVE.B      D1, (A3)+
00001E96  4E75                    1634      RTS
00001E98                          1635      
00001E98                          1636  GET_SIZE_ADDI
00001E98  4EB9 00001F86           1637      JSR         DOT
00001E9E  B83C 0000               1638      CMP.B       #0, D4
00001EA2  6700 00F8               1639      BEQ         BYTE
00001EA6  B83C 0001               1640      CMP.B       #1, D4
00001EAA  6700 00E2               1641      BEQ         WORD
00001EAE  B83C 0002               1642      CMP.B       #2, D4
00001EB2  6700 00F6               1643      BEQ         LONG  
00001EB6  4E75                    1644      RTS
00001EB8                          1645      
00001EB8                          1646  TYPE_CHOOSER
00001EB8  B83C 0000               1647      CMP.B       #0, D4      *IF IMMEDIATE
00001EBC  67C0                    1648      BEQ         GET_DATA    *IF BRANCHED  ->  #1 IS NOW PRINTED
00001EBE  B83C 0001               1649      CMP.B       #1, D4      *IF A DATA REG
00001EC2  6700 FEA4               1650      BEQ         DATA_0
00001EC6  4E75                    1651      RTS
00001EC8                          1652      
00001EC8                          1653  PRINT_BCC
00001EC8  B83C 0004               1654      CMP.B       #4, D4
00001ECC  6700 011A               1655      BEQ         CC
00001ED0  B83C 000E               1656      CMP.B       #14, D4
00001ED4  6700 011A               1657      BEQ         GT
00001ED8  B83C 000F               1658      CMP.B       #15, D4
00001EDC  6700 011A               1659      BEQ         LE
00001EE0  4E75                    1660      RTS
00001EE2                          1661      
00001EE2                          1662  REG_SIZE
00001EE2  4EB9 00001F86           1663      JSR         DOT
00001EE8  B83C 0000               1664      CMP.B       #0, D4
00001EEC  6700 00A0               1665      BEQ         WORD
00001EF0  B83C 0001               1666      CMP.B       #1, D4
00001EF4  6700 00B4               1667      BEQ         LONG
00001EF8  4E75                    1668      RTS
00001EFA                          1669  MODE_CHOOSER
00001EFA  B83C 0007               1670      CMP.B       #7, D4
00001EFE  6700 0004               1671      BEQ         NEW_MODE
00001F02  4E75                    1672      RTS
00001F04                          1673      
00001F04                          1674  NEW_MODE
00001F04  BA3C 0000               1675      CMP.B       #0, D5 *CHECK REGISTER(D5), WORD ADDRESS?
00001F08  6700 001A               1676      BEQ         TO_FIVE *CHANGE MODE (D4) TO 5
00001F0C  BA3C 0001               1677      CMP.B       #1, D5 *CHECK REGISTER(D5), LONG ADDRESS?
00001F10  6700 000E               1678      BEQ         TO_SIX *CHANGE MODE(D4) TO 6
00001F14                          1679      
00001F14  BA3C 0004               1680      CMP.B       #4, D5 *for immediate data
00001F18  6700 0004               1681      BEQ         TO_EIGHT
00001F1C  4E75                    1682      RTS
00001F1E                          1683      
00001F1E                          1684  TO_EIGHT
00001F1E  4E75                    1685      RTS
00001F20                          1686      
00001F20                          1687  TO_SIX  
00001F20  5304                    1688      SUB.B      #1, D4
00001F22  4E75                    1689      RTS
00001F24                          1690  
00001F24                          1691  TO_FIVE
00001F24  5504                    1692      SUB.B      #2, D4
00001F26  4E75                    1693      RTS
00001F28                          1694  
00001F28                          1695  OUTPUT_HEX
00001F28                          1696      *OUTPUT 1ST
00001F28  3802                    1697      MOVE.W      D2, D4              *D7 = <1010 1111 0101 0111>
00001F2A  E04C                    1698      LSR.W       #8, D4              *D7 = <0000 0000 1010 1111>
00001F2C  E84C                    1699      LSR.W       #4, D4              *D7 = <0000 0000 0000 1010>
00001F2E  1204                    1700      MOVE.B      D4, D1
00001F30  6100 F3A0               1701      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
00001F34  6100 003C               1702      BSR         ADD_CHAR         *print the char in D1  
00001F38                          1703      *OUTPUT 2ND
00001F38  3802                    1704      MOVE.W      D2, D4
00001F3A  E94C                    1705      LSL.W       #4, D4              *SHIFT OUT FURTHEST RIGHT BIT
00001F3C  E04C                    1706      LSR.W       #8, D4
00001F3E  E84C                    1707      LSR.W       #4, D4  
00001F40  1204                    1708      MOVE.B      D4, D1
00001F42  6100 F38E               1709      BSR         CONVERT_TO_ASCII
00001F46  6100 002A               1710      BSR         ADD_CHAR
00001F4A                          1711      *OUTPUT 3RD
00001F4A  3802                    1712      MOVE.W      D2, D4
00001F4C  E14C                    1713      LSL.W       #8, D4
00001F4E  E04C                    1714      LSR.W       #8, D4
00001F50  E84C                    1715      LSR.W       #4, D4
00001F52  1204                    1716      MOVE.B      D4, D1
00001F54  6100 F37C               1717      BSR         CONVERT_TO_ASCII
00001F58  6100 0018               1718      BSR         ADD_CHAR
00001F5C                          1719      *OUTPUT 4TH
00001F5C  3802                    1720      MOVE.W      D2, D4  *D7 = <1010 1111 0101 0111>
00001F5E  E14C                    1721      LSL.W       #8, D4  *     <0101 0111 0000 0000>
00001F60  E94C                    1722      LSL.W       #4, D4  *     <0111 0000 0000 0000>
00001F62  E04C                    1723      LSR.W       #8, D4  *     <
00001F64  E84C                    1724      LSR.W       #4, D4
00001F66  1204                    1725      MOVE.B      D4, D1
00001F68  6100 F368               1726      BSR         CONVERT_TO_ASCII
00001F6C  6100 0004               1727      BSR         ADD_CHAR
00001F70  4E75                    1728      RTS
00001F72                          1729                                     *continue converting            
00001F72                          1730  ADD_CHAR ********
00001F72  16C1                    1731      MOVE.B      D1, (A3)+
00001F74  4E75                    1732      RTS
00001F76                          1733  
00001F76                          1734  COMMA
00001F76  16F9 0000726E           1735      MOVE.B      M_COMMA, (A3)+
00001F7C  4E75                    1736      RTS
00001F7E                          1737      
00001F7E                          1738  POUND
00001F7E  16F9 00007270           1739      MOVE.B      M_POUND, (A3)+
00001F84  4E75                    1740      RTS
00001F86                          1741          
00001F86                          1742  DOT
00001F86  16F9 00007272           1743      MOVE.B      M_DOT, (A3)+
00001F8C  4E75                    1744      RTS   
00001F8E                          1745  
00001F8E                          1746  WORD
00001F8E  16F9 00007274           1747      MOVE.B      M_WORD, (A3)+
00001F94  4EB9 00001FD8           1748      JSR         SPACE
00001F9A  4E75                    1749      RTS
00001F9C                          1750  
00001F9C                          1751  BYTE
00001F9C  16F9 00007276           1752      MOVE.B      M_BYTE, (A3)+
00001FA2  4EB9 00001FD8           1753      JSR         SPACE
00001FA8  4E75                    1754      RTS
00001FAA                          1755      
00001FAA                          1756  LONG
00001FAA  16F9 00007278           1757      MOVE.B      M_LONG, (A3)+
00001FB0                          1758      
00001FB0  4EB9 00001FD8           1759      JSR         SPACE
00001FB6  4E75                    1760      RTS
00001FB8                          1761      
00001FB8                          1762  OPEN
00001FB8  16F9 0000727A           1763      MOVE.B      M_OPEN, (A3)+
00001FBE  4E75                    1764      RTS
00001FC0                          1765  
00001FC0                          1766  CLOSE
00001FC0  16F9 0000727C           1767      MOVE.B      M_CLOSE, (A3)+
00001FC6  4E75                    1768      RTS
00001FC8                          1769      
00001FC8                          1770  PLUS
00001FC8  16F9 0000727E           1771      MOVE.B      M_PLUS, (A3)+
00001FCE  4E75                    1772      RTS
00001FD0                          1773      
00001FD0                          1774  SUB
00001FD0  16F9 00007280           1775      MOVE.B      M_SUB, (A3)+
00001FD6  4E75                    1776      RTS
00001FD8                          1777      
00001FD8                          1778  SPACE
00001FD8  16F9 000071EE           1779      MOVE.B      M_SPACE, (A3)+
00001FDE  4E75                    1780      RTS    
00001FE0                          1781      
00001FE0                          1782  CASH
00001FE0  16F9 0000726C           1783      MOVE.B      M_CASH, (A3)+
00001FE6  4E75                    1784      RTS
00001FE8                          1785  
00001FE8                          1786  CC
00001FE8  16F9 00007286           1787      MOVE.B      M_CC, (A3)+
00001FEE  4E75                    1788      RTS
00001FF0                          1789  GT
00001FF0  16F9 00007289           1790      MOVE.B      M_GT, (A3)+
00001FF6  4E75                    1791      RTS
00001FF8                          1792  
00001FF8                          1793  LE
00001FF8  16F9 0000728C           1794      MOVE.B      M_LE, (A3)+
00001FFE  4E75                    1795      RTS
00002000                          1796      
00002000                          1797  SLASH
00002000  16F9 0000728F           1798      MOVE.B      M_SLASH, (A3)+
00002006  4E75                    1799      RTS
00002008                          1800      
00002008                          1801  INVALID
00002008  16BC 0000               1802      MOVE.B      #00, (A3)
0000200C  6000 F1D8               1803      BRA         INVALID_OPCODE
00002010                          1804      
00002010                          1805  
00002010  =0000000D               1806  CR      EQU     $0D
00002010  =0000000A               1807  LF      EQU     $0A
00002010                          1808  
00002010                          1809  
00002010                          1810  
00002010                          1811  
00002010                          1812  
00002010                          1813  
00002010                          1814  
00002010                          1815  
00002010                          1816  
00002010                          1817  
00002010                          1818  
00002010                          1819  
00002010                          1820  
00002010                          1821  
00002010                          1822  
00002010                          1823  
00002010                          1824  
00002010                          1825  
00002010                          1826  -------------------- end include --------------------
00002010                          1827      INCLUDE         'demo_test.x68'
00002010                          1828  
00002010  =00007000               1829  start       EQU $00007000   * ORG and END address
00002010                          1830  
00002010                          1831  
00007000                          1832          ORG start
00007000                          1833  
00007000                          1834  
00007000  4E71                    1835          NOP         *Required
00007002  4E75                    1836          RTS         *Required
00007004                          1837  
00007004                          1838  
00007004  D441                    1839  add_start   ADD.W   D1,D2
00007006  0641 4E71               1840                  ADDI.W  #$4E71,D1
0000700A  5E87                    1841          ADDQ.L  #07,D7      
0000700C  D6DE                    1842          ADDA.W  (A6)+,A3
0000700E  DDFC 3000AAAA           1843          ADDA.L  #$3000AAAA,A6
00007014  0685 D50000AA           1844          ADDI.L  #$D50000AA,D5
0000701A  0646 5555               1845          ADDI.W  #$5555,D6
0000701E  0600 00FE               1846          ADDI.B  #$FE,D0
00007022  9441                    1847                  SUB.W   D1,D2
00007024                          1848  
00007024  1200                    1849  moves       MOVE.B  D0,D1
00007026  33CE F30045BB           1850          MOVE.W  A6,$F30045BB
0000702C  2000                    1851          MOVE.L  D0,D0
0000702E  2CC7                    1852          MOVE.L  D7,(A6)+
00007030  36BC FFD0               1853          MOVE.W  #$FFD0,(A3)
00007034  23F9 C00022AA 3000A0F8  1854          MOVE.L  $C00022AA,$3000A0F8
0000703E  2B08                    1855          MOVE.L  A0,-(A5)
00007040  3056                    1856          MOVEA.W (A6),A0
00007042  48A7 07E0               1857          MOVEM.W A0/A1/A2/D5/D6/D7,-(SP)
00007046  4CD8 1B07               1858          MOVEM.L (A0)+,D0/D1/D2/A4/A3/A0/A1
0000704A  7401                    1859          MOVEQ   #1,D2
0000704C                          1860          
0000704C  C6B9 8000A000           1861  ands        AND.L   $8000A000,D3
00007052  E128                    1862  shifts      LSL.B   D0,D0
00007054  E848                    1863          LSR.W   #4,D0
00007056  E3DA                    1864          LSL.W   (A2)+
00007058  EC27                    1865          ASR.B   D6,D7
0000705A  EB27                    1866          ASL.B   D5,D7
0000705C  E5BB                    1867  rolls       ROL.L   D2,D3
0000705E  E89E                    1868          ROR.L   #4,D6
00007060                          1869  
00007060  4204                    1870  clear       CLR.B   D4
00007062  45F9 DC00FF00           1871  load_addr   LEA $DC00FF00,A2
00007068  49D5                    1872          LEA (A5),A4
0000706A                          1873  
0000706A  BA13                    1874  compares    CMP.B   (A3),D5
0000706C  B4B9 ABC0FF00           1875          CMP.L   $ABC0FF00,D2
00007072  B8C2                    1876          CMPA.W  D2,A4
00007074                          1877          
00007074                          1878  
00007074                          1879  
00007074  4E93                    1880  jmplabel        JSR (A3)        * Address register indirect
00007076  64E8                    1881          BCC clear       
00007078  6EF0                    1882          BGT compares        
0000707A  6F00 0002               1883          BLE multiply
0000707E                          1884          
0000707E  C7C0                    1885  multiply    MULS    D0,D3       *Optional instruction
00007080  C1D6                    1886          MULS    (A6),D0     *Optional instruction
00007082  C3FC 4567               1887          MULS    #$4567,D1   *Optional instruction
00007086  8ADB                    1888          DIVU    (A3)+,D5    *Optional instruction
00007088  4E71                    1889          NOP
0000708A  4E71                    1890          NOP
0000708C  9882                    1891          SUB.L   D2,D4
0000708E  9E93                    1892          SUB.L   (A3),D7
00007090                          1893      
00007090                          1894  
00007090                          1895  
00007090                          1896  
00007090                          1897  
00007090                          1898  
00007090                          1899  
00007090                          1900  
00007090                          1901  
00007090                          1902  
00007090                          1903  
00007090                          1904  
00007090                          1905  
00007090                          1906  -------------------- end include --------------------
00007090                          1907  END
00007090  43F9 000071DF           1908      LEA             M_END,A1
00007096  103C 000E               1909      MOVE.B          #14,D0
0000709A  4E4F                    1910      TRAP            #15
0000709C  FFFF FFFF               1911      SIMHALT             ; halt simulator
000070A0                          1912  
000070A0  =0000000D               1913  CR          EQU     $0D
000070A0  =0000000A               1914  LF          EQU     $0A
000070A0                          1915  
000070A0= 50 6C 65 61 73 65 ...   1916  M_INPUT_START DC.B 'Please enter starting memory address in hexadecimal:',CR,LF,0
000070D7= 50 6C 65 61 73 65 ...   1917  M_INPUT_END   DC.B 'Please enter ending memory address in hexadecimal:',CR,LF,0
0000710C= 49 6E 76 61 6C 69 ...   1918  M_INVALID     DC.B 'Invalid value. Please enter a valid value: ',CR,LF,0
0000713A= 45 71 75 61 6C 20 ...   1919  M_EQUAL       DC.B 'Equal values. No memory read. Please enter new values',CR,LF,0
00007172= 44 41 54 41 20 20 ...   1920  M_DATA        DC.B 'DATA    ',0
0000717B= 20 20 20 20 00          1921  M_TAB         DC.B '    ',0
00007180= 50 72 65 73 73 20 ...   1922  M_PRESS_CONT  DC.B 'Press any key to continue',0
0000719A= 46 69 6E 69 73 68 ...   1923  M_FINISHED    DC.B 'Finished Reading Memory',CR,LF,0
000071B4= 57 6F 75 6C 64 20 ...   1924  M_CONTINUE    DC.B 'Would you like to read memory again? (Y/N)',0
000071DF= 50 72 6F 67 72 61 ...   1925  M_END         DC.B 'Program Exit',CR,LF,0
000071EE                          1926  
000071EE  =00000500               1927  STRING_START    EQU     $0500
000071EE  =00000400               1928  DATA_START      EQU     $0400
000071EE                          1929  
000071EE  =00000100               1930  MEM_START       EQU     $0100
000071EE  =00000200               1931  MEM_END         EQU     $0200
000071EE                          1932  
000071EE= 20 00                   1933  M_SPACE       DC.B  ' ',0
000071F0= 0D 0A 00                1934  M_NEW_LINE    DC.B  '',CR,LF,0
000071F3                          1935  
000071F3= 41 44 44 49 00          1936  ADDI    DC.B    'ADDI',0
000071F8= 4D 4F 56 45 00          1937  MOVE    DC.B    'MOVE',0
000071FD= 4D 4F 56 45 41 00       1938  MOVEA   DC.B    'MOVEA',0
00007203= 43 4C 52 00             1939  OPCLR   DC.B    'CLR',0
00007207= 4C 45 41 00             1940  OPLEA   DC.B    'LEA',0
0000720B= 4A 53 52 00             1941  OPJSR   DC.B    'JSR',0
0000720F= 4E 4F 50 00             1942  OPNOP   DC.B    'NOP',0
00007213= 52 54 53 00             1943  OPRTS   DC.B    'RTS',0
00007217= 4D 4F 56 45 4D 00       1944  MOVEM   DC.B    'MOVEM',0
0000721D= 41 44 44 51 00          1945  ADDQ    DC.B    'ADDQ',0
00007222= 42 00                   1946  Bcc     DC.B    'B',0
00007224= 4D 4F 56 45 51 00       1947  MOVEQ   DC.B    'MOVEQ',0
0000722A= 44 49 56 55 00          1948  DIVU    DC.B    'DIVU',0
0000722F= 4F 52 00                1949  OR      DC.B    'OR',0
00007232= 53 55 42 00             1950  OPSUB   DC.B    'SUB',0
00007236= 43 4D 50 00             1951  CMP     DC.B    'CMP',0
0000723A= 4D 55 4C 53 00          1952  MULS    DC.B    'MULS',0
0000723F= 41 4E 44 00             1953  AND     DC.B    'AND',0
00007243= 41 44 44 00             1954  ADD     DC.B    'ADD',0
00007247= 41 44 44 41 00          1955  ADDA    DC.B    'ADDA',0
0000724C= 4C 53 4C 00             1956  LSL     DC.B    'LSL',0
00007250= 4C 53 52 00             1957  LSR     DC.B    'LSR',0
00007254= 41 53 4C 00             1958  ASL     DC.B    'ASL',0
00007258= 41 53 52 00             1959  ASR     DC.B    'ASR',0
0000725C= 52 4F 4C 00             1960  ROL     DC.B    'ROL',0
00007260= 52 4F 52 00             1961  ROR     DC.B    'ROR',0
00007264= 49 4E 56 41 4C 49 ...   1962  M_INVAL DC.B 'INVALID',0
0000726C= 24 00                   1963  M_CASH  DC.B '$',0
0000726E                          1964  *M_SPACE DC.B ' ',0
0000726E= 2C 00                   1965  M_COMMA DC.B ',',0
00007270= 23 00                   1966  M_POUND DC.B '#',0
00007272= 2E 00                   1967  M_DOT   DC.B '.',0
00007274= 57 00                   1968  M_WORD  DC.B 'W',0
00007276= 42 00                   1969  M_BYTE  DC.B 'B',0
00007278= 4C 00                   1970  M_LONG  DC.B 'L',0
0000727A= 28 00                   1971  M_OPEN  DC.B '(',0
0000727C= 29 00                   1972  M_CLOSE DC.B ')',0
0000727E= 2B 00                   1973  M_PLUS  DC.B '+',0
00007280= 2D 00                   1974  M_SUB   DC.B '-',0
00007282= 44 00                   1975  M_DREG  DC.B 'D',0
00007284= 41 00                   1976  M_AREG  DC.B 'A',0
00007286= 43 43 00                1977  M_CC    DC.B 'CC',0
00007289= 47 54 00                1978  M_GT    DC.B 'GT',0
0000728C= 4C 45 00                1979  M_LE    DC.B 'LE',0
0000728F= 2F 00                   1980  M_SLASH DC.B '/',0
00007291                          1981  
00007291                          1982  
00007291                          1983  STOP:
00007291                          1984      END    MAIN

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSL_6              1DC4
ABSW_5              1DAE
ADD                 7243
ADDA                7247
ADDI                71F3
ADDI_2              1D84
ADDI_ERROR_CHECK    1CD2
ADDM_4              1DA2
ADDP_3              1D96
ADDQ                721D
ADDRESS_REGISTERS   1C4A
ADDR_1              1D76
ADD_CHAR            1F72
ADD_ERROR_CHECK     1CB8
ADD_START           7004
ALPH_CHAR           12E4
AND                 723F
ANDS                704C
ASL                 7254
ASR                 7258
BCC                 7222
BYEBYE              1CAA
BYTE                1F9C
CASH                1FE0
CC                  1FE8
CHECK_TYPE          1C6E
CLEAR               7060
CLOSE               1FC0
CMP                 7236
COMMA               1F76
COMMA_SPACE         1C82
COMMA_SPACE2        1C92
COMPARES            706A
CONTINUE_YN         118E
CONVERT_TO_ASCII    12D2
CR                  D
DATA                131A
DATA_0              1D68
DATA_START          400
DIVU                722A
DN_VERSION          17C8
DONE                1AF4
DONE_PRINTING       1CA2
DOT                 1F86
EA2                 1C1E
EAP                 1BDA
EAS                 1BE2
EAT_INVALID         1D30
EA_ADD              17A8
EA_ADDA             191E
EA_ADDI             1862
EA_ADDQ             18C4
EA_BCC              1B56
EA_CLR              1A22
EA_CMP              1AFC
EA_JSR              1B7A
EA_LEA              19CA
EA_LSD              1A68
EA_MOVE             16A2
EA_MOVEA            1716
EA_MOVEM            1BB8
EA_MOVEQ            176E
EA_MULS             1978
EA_PRINT_ADDRESS    1C5C
EA_SHIFT            1ABC
EA_VERSION          1812
EFFECTIVE_ADDRESSING  118E
END                 7090
END_PRINT_DATA_LOOP  124C
EQUAL_ERROR         1136
FOR_2               1C4C
FOR_LOOP            1C28
GET_DATA            1E7E
GET_NEXT_INPUT      105E
GET_OPMODE          1E2E
GET_OPMODE_MATH     1E46
GET_REG             1E24
GET_SIZE            1E04
GET_SIZE_ADDI       1E98
GT                  1FF0
IMME_7              1DE8
IM_NEW_LINE         12F2
IM_SPACE            1300
INCREMENT_LINE      11DE
INPUT_END           1032
INPUT_START         1006
INVALID             2008
INVALID_CHAR_ERROR  10CA
INVALID_OPCODE      11E6
INVALID_OPCODE_CONT  11F6
JFF                 1C58
JFZ                 1C34
JMPLABEL            7074
LE                  1FF8
LEA_ERROR_CHECK     1CE4
LF                  A
LOAD_ADDR           7062
LONG                1FAA
LSL                 724C
LSR                 7250
MAIN                1000
MEM_END             200
MEM_START           100
MODE_CHOOSER        1EFA
MODE_JUMP           1D38
MOVE                71F8
MOVEA               71FD
MOVEM               7217
MOVEM_ERROR_CHECK   1D0E
MOVEQ               7224
MOVES               7024
MOVE_ERROR_CHECK    1CAE
MULS                723A
MULTIPLY            707E
M_AREG              7284
M_BYTE              7276
M_CASH              726C
M_CC                7286
M_CLOSE             727C
M_COMMA             726E
M_CONTINUE          71B4
M_DATA              7172
M_DOT               7272
M_DREG              7282
M_END               71DF
M_EQUAL             713A
M_FINISHED          719A
M_GT                7289
M_INPUT_END         70D7
M_INPUT_START       70A0
M_INVAL             7264
M_INVALID           710C
M_LE                728C
M_LONG              7278
M_NEW_LINE          71F0
M_OPEN              727A
M_PLUS              727E
M_POUND             7270
M_PRESS_CONT        7180
M_SLASH             728F
M_SPACE             71EE
M_SUB               7280
M_TAB               717B
M_WORD              7274
NEW_MODE            1F04
NUMERIC_CHAR        12DE
OP0000              13A2
OP0001              13B2
OP0010              13C2
OP0011              13C6
OP0100              13FE
OP0101              14A6
OP0110              14B6
OP0111              14D0
OP1000              14E0
OP1001              1516
OP1011              1526
OP1100              1536
OP1101              156E
OP1110              15A6
OPCLR               7203
OPEN                1FB8
OPJSR               720B
OPLEA               7207
OPNOP               720F
OPRTS               7213
OPSUB               7232
OP_JTAB             1340
OR                  722F
OUTPUT_CHAR         12EA
OUTPUT_D1B          1256
OUTPUT_HEX          1F28
PASTE_3             1680
PASTE_4             1688
PASTE_5             1692
PLUS                1FC8
POUND               1F7E
PRESS_TO_CONTINUE   11C0
PRE_READ_MEMORY     1162
PRINT_8             1E92
PRINT_ADDRESS       121E
PRINT_ADDRESS_LOOP  1224
PRINT_BCC           1EC8
PRINT_CURRENT       1C38
PRINT_DATA          11FE
PRINT_DATA_ADDRESS  1216
PRINT_DATA_LOOP     1238
PRINT_LIST          1C16
PRINT_OPCODE        1298
PRINT_OPCODE_EA     127C
READ_CHAR           1060
READ_CHAR_LOOP      1082
READ_MEMORY         1118
READ_MEMORY_CONT    117C
READ_MEMORY_LOOP    1164
REG_SIZE            1EE2
REMOVE_ZERO         107C
REMOVE_ZEROES       106A
RESTART             12AC
RETURN_TO_SUBROUTINE  12D0
ROL                 725C
ROLLS               705C
ROR                 7260
SHIFTS              7052
SLASH               2000
SPACE               1FD8
START               7000
STOP                7291
STRING_START        500
SUB                 1FD0
SWAP_VALUES         1146
TAB                 130C
TEST                1104
TO_EIGHT            1F1E
TO_FIVE             1F24
TO_SIX              1F20
TYPE_CHOOSER        1EB8
VALIDATE_START_END  1124
VALID_CHAR          10F4
VALID_LETTER_LC     10EC
VALID_LETTER_UC     10E4
VALID_NUMBER        10DC
VALID_OPCODE        1272
VERIFY_OPCODE       1328
WORD                1F8E
_ADD                1586
_ADDA               1596
_AND                155E
_ASD                160C
_ASL                1626
_ASR                1636
_CLR                1446
_DIVU               14F8
_JSR                1466
_LEA                1456
_LSD                15D4
_LSL                15EC
_LSR                15FC
_MOVE               13DE
_MOVEA              13EE
_MOVEM              1496
_MULS               154E
_NOP                1476
_OR                 1508
_ROD                1646
_ROL                1660
_ROR                1670
_RTS                1486
