00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/2/2016 1:31:01 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  MAIN:                  ; first instruction of program
00001000  1401                       9      MOVE.B          D1, D2
00001002  6000 0002                 10      BRA             INPUT_START
00001006                            11      
00001006                            12      INCLUDE         'Main.X68'
00001006                            13      
00001006                            14  
00001006                            15  INPUT_START
00001006  43F9 000070A0             16      LEA         M_INPUT_START,A1      *load message
0000100C  103C 000E                 17      MOVE.B      #14,D0          *display string
00001010  4E4F                      18      TRAP        #15             *output string
00001012  227C 00000300             19      MOVE.L      #$0300,A1       *set address of register A1 for string
00001018  103C 0002                 20      MOVE.B      #2,D0           *input string into A1 Trap
0000101C  4E4F                      21      TRAP        #15             *input string from user
0000101E  6100 0040                 22      BSR         READ_CHAR       *check for valid input
00001022  23C3 00000100             23      MOVE.L      D3,MEM_START    *put the starting address in memory
00001028  B87C 0000                 24      CMP         #0,D4           *check the result register (D4)
0000102C  6700 0004                 25      BEQ         INPUT_END       *valid value. read the ending value
00001030  60D4                      26      BRA         INPUT_START     *invalid value. try inputting start value again    
00001032                            27      
00001032                            28  INPUT_END
00001032  43F9 000070D7             29      LEA         M_INPUT_END,A1  *load message
00001038  103C 000E                 30      MOVE.B      #14,D0          *display string
0000103C  4E4F                      31      TRAP        #15             *output string
0000103E  227C 00000300             32      MOVE.L      #$0300,A1       *set address of register A1 for string
00001044  103C 0002                 33      MOVE.B      #2,D0           *input string into A1 Trap
00001048  4E4F                      34      TRAP        #15             *input string from user
0000104A  6100 0014                 35      BSR         READ_CHAR       *check for valid input
0000104E  23C3 00000200             36      MOVE.L      D3,MEM_END      *put ending address into memory
00001054  B87C 0000                 37      CMP         #0,D4           *check the result register (D4)
00001058  6700 00BE                 38      BEQ         READ_MEMORY     *valid value. read the ending value
0000105C  60D4                      39      BRA         INPUT_END       *invalid value. try inputting start value again    
0000105E                            40      
0000105E                            41  GET_NEXT_INPUT
0000105E  4E75                      42      RTS
00001060                            43  
00001060                            44  READ_CHAR                       *verify that string is valid (all hexadecimal digits)
00001060  4243                      45      CLR         D3              *D3 will act as the total result
00001062  2849                      46      MOVE.L      A1,A4           *the stop address
00001064  143C 0006                 47      MOVE.B      #6,D2           *put 6 in D2
00001068  D8C2                      48      ADD.W       D2,A4           *A4 is now the stop address(A4)
0000106A                            49      
0000106A                            50  REMOVE_ZEROES
0000106A  4281                      51      CLR.L       D1              *D1 will act as the temporary value
0000106C  1211                      52      MOVE.B      (A1),D1         *read the byte from string
0000106E  143C 0030                 53      MOVE.B      #$30,D2         *put ascii zero in D2
00001072  B202                      54      CMP.B       D2,D1           *compare ascii zero and value of D1
00001074  6700 0006                 55      BEQ         REMOVE_ZERO     *skip over that character   
00001078  6000 0008                 56      BRA         READ_CHAR_LOOP  *begin converting characters to numerical values
0000107C                            57  REMOVE_ZERO
0000107C  5289                      58      ADD.L       #1,A1           *increment string start address
0000107E  528C                      59      ADD.L       #1,A4           *increment string end address
00001080  60E8                      60      BRA         REMOVE_ZEROES   *loop back and keep removing zeroes
00001082                            61  READ_CHAR_LOOP     
00001082  4281                      62      CLR.L       D1              *D1 will act as the temporary value
00001084  1211                      63      MOVE.B      (A1),D1         *read the byte from string
00001086  B27C 0000                 64      CMP         #0,D1           *compare 00 (NULL) and the byte ascii value in D1
0000108A  67D2                      65      BEQ         GET_NEXT_INPUT    *if you reached the end of the string, end loop
0000108C                            66      
0000108C  143C 0030                 67      MOVE.B      #$30,D2         *put ascii zero in D2
00001090  B202                      68      CMP.B       D2,D1           *compare ascii zero and value of D1
00001092  6D00 0036                 69      BLT         INVALID_CHAR_ERROR *branch on invalid (too small) ascii value   
00001096  143C 0066                 70      MOVE.B      #$66,D2         *put ascii f in D2
0000109A  B202                      71      CMP.B       D2,D1           *compare ascii f and value of D1
0000109C  6E2C                      72      BGT.B       INVALID_CHAR_ERROR *branch on invalid ascii value
0000109E  143C 0061                 73      MOVE.B      #$61,D2         *put ascii a in D2
000010A2  B202                      74      CMP.B       D2,D1           *compare ascii a and value of D1
000010A4  6C00 0046                 75      BGE         VALID_LETTER_LC *value is between a and f. Loop back.
000010A8                            76      
000010A8  143C 0039                 77      MOVE.B      #$39,D2         *put ascii 9 in D2
000010AC  B202                      78      CMP.B       D2,D1           *compare ascii 9 and value of D1
000010AE  6F00 002C                 79      BLE         VALID_NUMBER    *value between 0 and 9. Loop back.
000010B2                            80  
000010B2  143C 0041                 81      MOVE.B      #$41,D2         *put ascii A into D2
000010B6  B202                      82      CMP.B       D2,D1           *compare ascii A and value of D1
000010B8  6D00 0010                 83      BLT         INVALID_CHAR_ERROR    *value between 9 and A (Invalid)
000010BC                            84      
000010BC  143C 0046                 85      MOVE.B      #$46,D2         *put ascii F into D2
000010C0  B202                      86      CMP.B       D2,D1           *compare ascii F and value of D1
000010C2  6E00 0006                 87      BGT         INVALID_CHAR_ERROR    *value between F and a (Invalid)
000010C6                            88           
000010C6  6000 001C                 89      BRA         VALID_LETTER_UC *value is between A and F        
000010CA                            90  INVALID_CHAR_ERROR   
000010CA  43F9 0000710C             91      LEA         M_INVALID,A1    *load error message
000010D0  103C 000E                 92      MOVE.B      #14,D0          *display string trap
000010D4  4E4F                      93      TRAP        #15             *output error message
000010D6  183C 0001                 94      MOVE.B      #1,D4           *put invalid output in result register
000010DA  4E75                      95      RTS
000010DC                            96  VALID_NUMBER
000010DC  0401 0030                 97      SUB.B       #$30,D1         *get actual value from ascii value
000010E0  6000 0012                 98      BRA         VALID_CHAR      *read the next char in string
000010E4                            99  VALID_LETTER_UC
000010E4  0401 0037                100      SUB.B       #$37,D1         *get actual value from ascii value
000010E8  6000 000A                101      BRA         VALID_CHAR      *read the next char in string    
000010EC                           102  VALID_LETTER_LC
000010EC  0401 0057                103      SUB.B       #$57,D1         *get actual value from ascii value
000010F0  6000 0002                104      BRA         VALID_CHAR      *read the next char in string   
000010F4                           105  VALID_CHAR
000010F4  183C 0000                106      MOVE.B      #0,D4           *return valid value entry in D4    
000010F8  E98B                     107      LSL.L       #4,D3           *put hex digit in proper place
000010FA  D681                     108      ADD.L       D1,D3           *put new total in D3
000010FC  5289                     109      ADD.L       #1,A1           *increment address
000010FE  B8C9                     110      CMP         A1,A4           *if A1 > A4
00001100  6E80                     111      BGT         READ_CHAR_LOOP  *begin converting to float    
00001102  4E75                     112      RTS                         *loop back to INPUT_START || INPUT_END   
00001104                           113     
00001104                           114  TEST
00001104  23FC 00003000 00000100   115      MOVE.L      #$3000,MEM_START
0000110E  23FC 00003300 00000200   116      MOVE.L      #$3300,MEM_END
00001118                           117  READ_MEMORY   
00001118  2479 00000100            118      MOVEA.L     MEM_START,A2    *A2 will be the starting/current address
0000111E  2679 00000200            119      MOVEA.L     MEM_END,A3      *A3 will act as the ending address
00001124                           120      
00001124                           121  VALIDATE_START_END
00001124  220A                     122      MOVE.L      A2,D1           *copy start address into D1
00001126  240B                     123      MOVE.L      A3,D2           *copy end address into D2
00001128  B441                     124      CMP         D1,D2           *compare start and end values
0000112A  6700 000A                125      BEQ         EQUAL_ERROR     *Start address is equal to end address
0000112E  6D00 0016                126      BLT         SWAP_VALUES     *Start address is larger than end address
00001132  6000 002E                127      BRA         PRE_READ_MEMORY *begin reading memory
00001136                           128      
00001136                           129  EQUAL_ERROR
00001136  43F9 0000713A            130      LEA         M_EQUAL,A1      *load error message
0000113C  103C 000E                131      MOVE.B      #14,D0          *display string trap
00001140  4E4F                     132      TRAP        #15             *output error message
00001142  6000 FEC2                133      BRA         INPUT_START     *restart program (request ui again)
00001146                           134      
00001146                           135  SWAP_VALUES
00001146  2239 00000100            136      MOVE.L      MEM_START,D1    *put starting address in D1
0000114C  2439 00000200            137      MOVE.L      MEM_END,D2      *put ending address in D2
00001152  23C2 00000100            138      MOVE.L      D2,MEM_START    *swap the two values in memory
00001158  23C1 00000200            139      MOVE.L      D1,MEM_END
0000115E  2442                     140      MOVEA.L     D2,A2           *A2 will be the starting/current address
00001160  2641                     141      MOVEA.L     D1,A3           *A3 will act as the ending address
00001162                           142  PRE_READ_MEMORY
00001162  2C4A                     143      MOVE.L      A2,A6           *A6 will act as the current address for Data               
00001164                           144  READ_MEMORY_LOOP
00001164  2679 00000200            145      MOVE.L      MEM_END,A3        *put ending address in A3
0000116A  B6CA                     146      CMP         A2,A3             *compare the incrementing address and the end address
0000116C  6D00 0020                147      BLT         CONTINUE_YN       *stop if the end address is reached
00001170                           148      
00001170  E05E                     149      ROR         #8,D6               *select correct byte
00001172  BC3C 001E                150      CMP.B       #30,D6              *see if maximum lines printed
00001176  6C00 0048                151      BGE         PRESS_TO_CONTINUE
0000117A  E15E                     152      ROL         #8,D6   
0000117C                           153  READ_MEMORY_CONT                    *continue reading memory (if branched)  
0000117C  101A                     154      MOVE.B      (A2)+,D0          *get the value from incrementing address 
0000117E  E148                     155      LSL.W       #8,D0             *make room for the next byte of A2
00001180  1012                     156      MOVE.B      (A2),D0          *copy the rest of A2 to D0  
00001182  538A                     157      SUB.L       #1, A2
00001184  47F9 00000500            158      LEA         STRING_START,A3   *A3 will act as the string address  
0000118A  6000 01A6                159      BRA         VERIFY_OPCODE
0000118E                           160      
0000118E                           161      
0000118E                           162          
0000118E                           163  
0000118E                           164  EFFECTIVE_ADDRESSING
0000118E                           165  
0000118E                           166  
0000118E                           167  CONTINUE_YN
0000118E  43F9 0000719A            168      LEA         M_FINISHED,A1       *print out finished reading address
00001194  103C 000E                169      MOVE.B      #14,D0
00001198  4E4F                     170      TRAP        #15
0000119A  43F9 000071B4            171      LEA         M_CONTINUE,A1        *ask the user if they want to read again
000011A0  103C 000E                172      MOVE.B      #14,D0
000011A4  4E4F                     173      TRAP        #15
000011A6  103C 0005                174      MOVE.B      #5,D0               *get user input
000011AA  4E4F                     175      TRAP        #15
000011AC  B23C 0059                176      CMP.B       #89,D1              *compare user input and ascii 'Y'
000011B0  6700 00F8                177      BEQ         RESTART             *
000011B4  B23C 0079                178      CMP.B       #121,D1             *compare user input with ascii 'y'
000011B8  6700 00F0                179      BEQ         RESTART
000011BC  6000 5ED2                180      BRA         END
000011C0                           181      
000011C0                           182  PRESS_TO_CONTINUE
000011C0  1C3C 0000                183      MOVE.B      #00,D6              *reset counter
000011C4  E19E                     184      ROL.L       #8,D6               *put byte back in place
000011C6  43F9 00007180            185      LEA         M_PRESS_CONT,A1     *load press key to continue messageu
000011CC  103C 000E                186      MOVE.B      #14,D0              *load into D0
000011D0  4E4F                     187      TRAP        #15                 *display message
000011D2  103C 0005                188      MOVE.B      #5,D0               *read single character from keyboard
000011D6  4E4F                     189      TRAP        #15    
000011D8  6100 0122                190      BSR         IM_NEW_LINE            *add new line
000011DC  609E                     191      BRA         READ_MEMORY_CONT    *continue reading loop
000011DE                           192      
000011DE                           193  INCREMENT_LINE
000011DE  E09E                     194      ROR.L       #8,D6               *select correct byte
000011E0  5206                     195      ADD.B       #1,D6               *increment counter
000011E2  E19E                     196      ROL.L       #8,D6               *put byte back in place
000011E4  4E75                     197      RTS 
000011E6                           198      
000011E6                           199  INVALID_OPCODE
000011E6  BC3C 0008                200      CMP.B       #8,D6               *check the loop increment counter
000011EA  6D00 000A                201      BLT         INVALID_OPCODE_CONT *less than long length. continue       
000011EE  6100 000E                202      BSR         PRINT_DATA          *long amount of data. print it.
000011F2  6000 FF70                203      BRA         READ_MEMORY_LOOP    *read the next byte
000011F6                           204  INVALID_OPCODE_CONT  
000011F6  528A                     205      ADD.L       #1,A2               *increment current address  
000011F8  5206                     206      ADD.B       #1,D6               *increment counter
000011FA  6000 FF68                207      BRA         READ_MEMORY_LOOP    *data cap not reached. read next byte.    
000011FE                           208      
000011FE                           209  PRINT_DATA
000011FE  1C3C 0000                210      MOVE.B      #00,D6              *reset the increment counter
00001202  6100 0012                211      BSR         PRINT_DATA_ADDRESS       *print the data address
00001206  6100 010E                212      BSR         TAB                 *insert a space
0000120A  6100 0118                213      BSR         DATA                *print 'DATA'       
0000120E  6100 0028                214      BSR         PRINT_DATA_LOOP     *print the data
00001212  61CA                     215      BSR         INCREMENT_LINE      *increment line counter (line was printed)
00001214  4E75                     216      RTS
00001216                           217  
00001216                           218  PRINT_DATA_ADDRESS
00001216  280E                     219      MOVE.L      A6,D4               *put the address in D4
00001218  4243                     220      CLR         D3                  *counter for long
0000121A  6000 0008                221      BRA         PRINT_ADDRESS_LOOP
0000121E                           222  PRINT_ADDRESS
0000121E  280E                     223      MOVE.L      A6,D4               *put the address in D4
00001220  4243                     224      CLR         D3                  *counter for long
00001222  2C4A                     225      MOVE.L      A2, A6
00001224                           226      
00001224                           227  PRINT_ADDRESS_LOOP
00001224  B67C 0004                228      CMP         #4,D3               *if long reached
00001228  6C00 00B0                229      BGE         RETURN_TO_SUBROUTINE *exit loop
0000122C  E19C                     230      ROL.L       #8,D4               *put ending byte at beginning
0000122E  1204                     231      MOVE.B      D4,D1               *put byte in D1 for printing
00001230  6100 0022                232      BSR         OUTPUT_D1B          *print the first byte of D1
00001234  5203                     233      ADD.B       #1,D3               *increment D3 (loop counter)
00001236  60EC                     234      BRA         PRINT_ADDRESS_LOOP  *repeat loop         
00001238                           235           
00001238                           236  PRINT_DATA_LOOP
00001238  121E                     237      MOVE.B      (A6)+,D1            *get the data
0000123A  1401                     238      MOVE.B      D1,D2               *copy the data to D2
0000123C  BDCA                     239      CMP.L       A2,A6               *if current address reached
0000123E  6E00 000C                240      BGT         END_PRINT_DATA_LOOP *continue reading addresses 
00001242                           241                                      *otherwise keep printing the data
00001242  6100 0010                242      BSR         OUTPUT_D1B          *print byte in D1 in hex
00001246                           243      *---print a space----*
00001246  6100 00C2                244      BSR         IM_SPACE               *print a space                                
0000124A  60EC                     245      BRA         PRINT_DATA_LOOP     *repeat loop
0000124C                           246  
0000124C                           247  END_PRINT_DATA_LOOP
0000124C  2C4A                     248      MOVE.L      A2,A6               *set new address for data/opcode
0000124E  6100 00AC                249      BSR         IM_NEW_LINE            *end line
00001252  4E75                     250      RTS                             *repeat loop   
00001254                           251   
00001254                           252  OUTPUT_D1B
00001254                           253      *print the left character
00001254  1401                     254      MOVE.B      D1,D2               *copy D1 to D2
00001256  E809                     255      LSR.B       #4,D1               *get rid of right nibble  
00001258  6100 0082                256      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
0000125C  6100 0096                257      BSR         OUTPUT_CHAR         *print the char in D1
00001260                           258      *print the right character
00001260  E90A                     259      LSL.B       #4,D2               *get rid of left nibble
00001262  E80A                     260      LSR.B       #4,D2               *put right nibble in place
00001264  1202                     261      MOVE.B      D2,D1               *put right nibble in D1
00001266  6100 0074                262      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
0000126A  6100 0088                263      BSR         OUTPUT_CHAR         *print the char in D1
0000126E  4E75                     264      RTS
00001270                           265  VALID_OPCODE
00001270  BC3C 0000                266      CMP.B       #00,D6              *if leftover data not printed
00001274  6700 0004                267      BEQ         PRINT_OPCODE_EA     *print just the opcode
00001278  6184                     268      BSR         PRINT_DATA          *print unreadable data
0000127A                           269                                      *and the opcode
0000127A                           270  PRINT_OPCODE_EA    
0000127A  548A                     271      ADD.L       #02,A2              *increment the current address because word is valid
0000127C                           272  
0000127C  1C3C 0000                273      MOVE.B      #00,D6              *reset the increment counter
00001280  619C                     274      BSR         PRINT_ADDRESS       *print the data address
00001282  6100 0092                275      BSR         TAB                 *insert a space
00001286  6100 000E                276      BSR         PRINT_OPCODE        *print out hte opcode and eA
0000128A  6100 FF52                277      BSR         INCREMENT_LINE      *increment line counter (line was printed)
0000128E  6100 006C                278      BSR         IM_NEW_LINE
00001292  6000 FED0                279      BRA         READ_MEMORY_LOOP    *read next byte.
00001296                           280      
00001296                           281  
00001296                           282  PRINT_OPCODE
00001296  43F9 00000500            283      LEA         STRING_START,A1     *put the starting address of the string into A1
0000129C  103C 000E                284      MOVE.B      #14,D0              *print null terminated string into A
000012A0  4E4F                     285      TRAP        #15                 *output to terminal
000012A2  47F9 00000500            286      LEA         STRING_START,A3     *reset the current string pointer
000012A8  4E75                     287      RTS
000012AA                           288      
000012AA                           289  RESTART
000012AA  43F9 000071F0            290      LEA         M_NEW_LINE,A1
000012B0  103C 000E                291      MOVE.B      #14,D0
000012B4  4E4F                     292      TRAP        #15
000012B6  4280                     293      CLR.L       D0
000012B8  4281                     294      CLR.L       D1
000012BA  4282                     295      CLR.L       D2
000012BC  4283                     296      CLR.L       D3
000012BE  4284                     297      CLR.L       D4
000012C0  4285                     298      CLR.L       D5
000012C2  4286                     299      CLR.L       D6
000012C4  4287                     300      CLR.L       D7
000012C6  2040                     301      MOVE.L      D0,A0
000012C8  2240                     302      MOVE.L      D0,A1
000012CA  2440                     303      MOVE.L      D0,A2
000012CC  2640                     304      MOVE.L      D0,A3
000012CE  2840                     305      MOVE.L      D0,A4
000012D0  2A40                     306      MOVE.L      D0,A5
000012D2  2C40                     307      MOVE.L      D0,A6
000012D4  2E40                     308      MOVE.L      D0,A7
000012D6  6000 FD2E                309      BRA         INPUT_START
000012DA                           310      
000012DA                           311  RETURN_TO_SUBROUTINE
000012DA  4E75                     312      RTS
000012DC                           313    
000012DC                           314  CONVERT_TO_ASCII
000012DC  B23C 0009                315      CMP.B       #9,D1           *compare value with 9
000012E0  6E00 000C                316      BGT         ALPH_CHAR       *convert to numeric ascii
000012E4  6000 0002                317      BRA         NUMERIC_CHAR    *convert to alphabetical ascii
000012E8                           318  NUMERIC_CHAR        
000012E8  0601 0030                319      ADD.B       #48,D1          *convert to ascii value
000012EC  4E75                     320      RTS                         *continue converting
000012EE                           321  ALPH_CHAR
000012EE  0601 0037                322      ADD.B       #55,D1          *convert to ascii value
000012F2  4E75                     323      RTS                         *continue converting            
000012F4                           324  OUTPUT_CHAR
000012F4  103C 0006                325      MOVE.B      #6,D0           *output whatever's in D1
000012F8  4E4F                     326      TRAP        #15
000012FA  4E75                     327      RTS
000012FC                           328  
000012FC                           329  
000012FC                           330  IM_NEW_LINE
000012FC  43F9 000071F0            331      LEA         M_NEW_LINE,A1      *load new line
00001302  103C 000E                332      MOVE.B      #14,D0          *load message
00001306  4E4F                     333      TRAP        #15             *display message
00001308  4E75                     334      RTS
0000130A                           335  IM_SPACE
0000130A  123C 0020                336      MOVE.B      #32,D1
0000130E  103C 0006                337      MOVE.B      #6,D0
00001312  4E4F                     338      TRAP        #15
00001314  4E75                     339      RTS
00001316                           340  TAB
00001316  43F9 0000717B            341      LEA         M_TAB,A1
0000131C  103C 000E                342      MOVE.B      #14,D0
00001320  4E4F                     343      TRAP        #15
00001322  4E75                     344      RTS
00001324                           345  DATA
00001324  43F9 00007172            346      LEA         M_DATA,A1
0000132A  103C 000E                347      MOVE.B      #14,D0
0000132E  4E4F                     348      TRAP        #15
00001330  4E75                     349      RTS
00001332                           350      
00001332                           351  
00001332                           352  
00001332                           353  
00001332                           354  
00001332                           355  
00001332                           356  
00001332                           357  
00001332                           358  
00001332                           359  
00001332                           360  
00001332                           361  
00001332                           362  
00001332                           363  
00001332                           364  
00001332                           365  
00001332                           366  
00001332                           367  
00001332                           368  
00001332                           369  
00001332                           370  
00001332                           371  
00001332                           372  
00001332                           373  
00001332                           374  
00001332                           375  
00001332                           376  
00001332                           377  
00001332                           378  
00001332                           379  
00001332                           380  -------------------- end include --------------------
00001332                           381      INCLUDE         'OP_jumpTable.X68'
00001332                           382  VERIFY_OPCODE
00001332  3200                     383      MOVE.W  D0,D1   *Copy instruction for modification
00001334                           384      
00001334                           385      **ISOLATE FIRST FOUR BITS**                                             
00001334  E849                     386      LSR.W   #4,D1       *Shift left four bits
00001336  E049                     387      LSR.W   #8,D1       *Shift left again (12 shifts total)
00001338                           388      
00001338  4242                     389      CLR     D2
0000133A  1401                     390      MOVE.B  D1,D2
0000133C                           391      
0000133C  41F9 0000134A            392      LEA     OP_JTAB,A0 
00001342  C5FC 0006                393      MULS    #6, D2
00001346  4EB0 2000                394      JSR     0(A0,D2)
0000134A                           395  
0000134A                           396  
0000134A                           397  
0000134A  4EF9 000013AC            398  OP_JTAB    JMP     OP0000      *ADDI
00001350  4EF9 000013BC            399      JMP     OP0001      *MOVE.B
00001356  4EF9 000013CC            400      JMP     OP0010      *MOVE.W, MOVEA(WORD)
0000135C  4EF9 000013D0            401      JMP     OP0011      *MOVE.L, MOVEA(LONG) 
00001362  4EF9 00001408            402      JMP     OP0100      *NOP, MOVEM, LEA, CLR, JSR, RTS
00001368  4EF9 000014B0            403      JMP     OP0101      *ADDQ
0000136E  4EF9 000014C0            404      JMP     OP0110      *Bcc
00001374  4EF9 000014DA            405      JMP     OP0111      *MOVEQ
0000137A  4EF9 000014EA            406      JMP     OP1000      *DIVU, OR
00001380  4EF9 00001520            407      JMP     OP1001      *SUB
00001386  4EF8 11E6                408      JMP     INVALID_OPCODE
0000138A  4EF9 00001530            409      JMP     OP1011      *CMP
00001390  4EF9 00001540            410      JMP     OP1100      *MULS, AND
00001396  4EF9 00001578            411      JMP     OP1101      *ADD, ADDA
0000139C  4EF9 000015B0            412      JMP     OP1110      *LSR, LSL, ASR, ASL, ROL, ROR
000013A2  4EF8 11E6                413      JMP     INVALID_OPCODE
000013A6                           414  
000013A6                           415  
000013A6                           416      
000013A6  4EF8 11E6                417      JMP     INVALID_OPCODE     *Subroutine to store as non-decodable
000013AA  4E75                     418      RTS
000013AC                           419  
000013AC                           420  OP0000
000013AC                           421      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000013AC                           422      *BEGIN OUTPUT
000013AC                           423      
000013AC                           424      *MOVE.W  ADDI,(A3)+      *Load 'ADDI' to Add Reg 1 and then increment
000013AC  49F9 000071F3            425      LEA     ADDI, A4
000013B2  4EB9 00001692            426      JSR     PASTE_4
000013B8  6000 04B2                427      BRA     EA_ADDI         *Branch to EA analysis of the command
000013BC                           428  
000013BC                           429  OP0001  *SINGLE CODE, DO NOT NEED FURTHER CHECKING 
000013BC                           430          *BEGIN OUTPUT
000013BC                           431      
000013BC                           432      *MOVE.L  MOVE,(A3)+     *Load 'MOVE.B' to Add Reg 1 and then increment
000013BC  49F9 000071F8            433      LEA     MOVE, A4
000013C2  4EB9 00001692            434      JSR     PASTE_4
000013C8  6000 02E2                435      BRA     EA_MOVE        *Branch to EA analysis of the command
000013CC                           436  
000013CC                           437  OP0010
000013CC                           438      *Identical to OP0011 for these purposes, branch there
000013CC  6000 0002                439      BRA OP0011
000013D0                           440  
000013D0                           441  OP0011
000013D0                           442      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000013D0                           443  
000013D0                           444      **ISOLATE NEXT BITS TO CHECK**
000013D0  3200                     445      MOVE.W  D0,D1           *Copy instruction for modification
000013D2  EF49                     446      LSL.W   #7,D1           *Shift left 7 bits 
000013D4  EA49                     447      LSR.W   #5,D1           *Rotate right 5 bits
000013D6  E049                     448      LSR.W   #8,D1           *Shift right again (13 shifts total)
000013D8  0241 000F                449      ANDI.W  #$00F,D1        *Keep 3 bits
000013DC                           450      
000013DC  B27C 0001                451      CMP     #%001,D1      *Check for 0010 to eliminate CLR
000013E0  6700 0016                452      BEQ     _MOVEA          *If equal, branch to CLR
000013E4                           453      
000013E4  6000 0002                454      BRA     _MOVE
000013E8                           455      
000013E8                           456  _MOVE
000013E8                           457      *MOVE.L  MOVE,(A3)+     *Load 'MOVE.L' to Add Reg 1 and then increment  
000013E8  49F9 000071F8            458      LEA     MOVE, A4
000013EE  4EB9 00001692            459      JSR     PASTE_4
000013F4  6000 02B6                460      BRA     EA_MOVE        *Branch to EA analysis of the command
000013F8                           461  
000013F8                           462  _MOVEA
000013F8                           463      *MOVE.L  MOVEA,(A3)+    *Load 'MOVEA.L' to Add Reg 1 and then increment
000013F8  49F9 000071FD            464      LEA     MOVEA, A4
000013FE  4EB9 0000169C            465      JSR     PASTE_5
00001404  6000 031A                466      BRA     EA_MOVEA       *Branch to EA analysis of the command
00001408                           467  
00001408                           468  OP0100
00001408                           469      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
00001408  3200                     470       MOVE.W  D0,D1           *Copy instruction for modification
0000140A                           471      
0000140A  B27C 4E71                472      CMP     #%0100111001110001,D1   *Check to eliminate NOP
0000140E  6700 0070                473      BEQ     _NOP
00001412  B27C 4E75                474      CMP     #%0100111001110101,D1   *Check to eliminate RTS
00001416  6700 0078                475      BEQ     _RTS
0000141A                           476      
0000141A  EC49                     477      LSR.W   #6,D1                   *Shift right 6 bits
0000141C  B27C 013A                478      CMP     #%0000000100111010,D1   *Check to eliminate RTS
00001420  6700 004E                479      BEQ     _JSR
00001424                           480      
00001424                           481      **ISOLATE 4 BITS TO CHECK CLR**    
00001424  3200                     482      MOVE.W  D0,D1           *Copy instruction for modification
00001426  E949                     483      LSL.W   #4,D1           *Shift left 7 bits 
00001428  E849                     484      LSR.W   #4,D1           *Rotate right 5 bits
0000142A  E049                     485      LSR.W   #8,D1           *Shift right again (13 shifts total)
0000142C  0241 000F                486      ANDI.W  #$000F,D1       *Keep 4 bits
00001430                           487      
00001430  B27C 0002                488      CMP     #%0010,D1       *Check for 0010 to eliminate CLR
00001434  6700 001A                489      BEQ     _CLR            *If equal, branch to CLR
00001438                           490  
00001438                           491      **ISOLATE 3 BITS TO CHECK MOVEM**
00001438  3200                     492      MOVE.W  D0,D1           *Copy instruction for modification
0000143A  ED49                     493      LSL.W   #6,D1           *Shift left 6 bits 
0000143C  EA49                     494      LSR.W   #5,D1           *Shift right 5 bits
0000143E  E049                     495      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001440  0241 000F                496      ANDI.W  #$00F,D1        *Keep 3 bits
00001444                           497      
00001444  B27C 0001                498      CMP     #%001,D1
00001448  6700 0056                499      BEQ     _MOVEM
0000144C                           500      
0000144C  6000 0012                501      BRA     _LEA            *Else by process of elimination it must be LEA   
00001450                           502      
00001450                           503  _CLR
00001450                           504      *MOVE.W  OPCLR,(A3)+     *Load 'CLR' to Add Reg 1 and then increment
00001450  49F9 00007203            505      LEA     OPCLR, A4
00001456  4EB9 0000168A            506      JSR     PASTE_3
0000145C  6000 05CE                507      BRA     EA_CLR          *Branch to EA analysis of the command
00001460                           508  
00001460                           509  _LEA
00001460                           510      *MOVE.W  OPLEA,(A3)+     *Load 'LEA' to Add Reg 1 and then increment
00001460  49F9 00007207            511      LEA     OPLEA, A4
00001466  4EB9 0000168A            512      JSR     PASTE_3
0000146C  6000 0566                513      BRA     EA_LEA          *Branch to EA analysis of the command
00001470                           514  
00001470                           515  _JSR
00001470                           516      *MOVE.W  OPJSR,(A3)+     *Load 'JSR' to Add Reg 1 and then increment
00001470  49F9 0000720B            517      LEA     OPJSR, A4
00001476  4EB9 0000168A            518      JSR     PASTE_3
0000147C  6000 0706                519      BRA     EA_JSR          *Branch to EA analysis of the command
00001480                           520  
00001480                           521  _NOP
00001480                           522      *MOVE.W  OPNOP,(A3)+     *Load 'NOP' to Add Reg 1 and then increment
00001480  49F9 0000720F            523      LEA     OPNOP, A4
00001486  4EB9 0000168A            524      JSR     PASTE_3
0000148C  6000 FDE2                525      BRA     VALID_OPCODE          *Branch to EA analysis of the command      
00001490                           526  
00001490                           527  _RTS
00001490                           528      *MOVE.W  OPRTS,(A3)+     *Load 'RTS' to Add Reg 1 and then increment
00001490  49F9 00007213            529      LEA     OPRTS, A4
00001496  4EB9 0000168A            530      JSR     PASTE_3
0000149C  6000 FDD2                531      BRA     VALID_OPCODE          *Branch to EA analysis of the command      
000014A0                           532  
000014A0                           533  _MOVEM
000014A0                           534      *MOVE.W  MOVEM,(A3)+     *Load 'MOVEM' to Add Reg 1 and then increment
000014A0  49F9 00007217            535      LEA     MOVEM, A4
000014A6  4EB9 0000169C            536      JSR     PASTE_5
000014AC  6000 0714                537      BRA     EA_MOVEM        *Branch to EA analysis of the command
000014B0                           538      
000014B0                           539  OP0101
000014B0                           540      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014B0                           541      *BEGIN OUTPUT
000014B0                           542      
000014B0                           543      *MOVE.W  ADDQ,(A3)+      *Load 'AddQ' to Add Reg 1 and then increment
000014B0  49F9 0000721D            544      LEA     ADDQ, A4
000014B6  4EB9 00001692            545      JSR     PASTE_4
000014BC  6000 0410                546      BRA     EA_ADDQ         *Branch to EA analysis of the command
000014C0                           547      
000014C0                           548  OP0110
000014C0                           549      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014C0                           550      *BEGIN OUTPUT
000014C0  3200                     551      MOVE.W  D0,D1
000014C2  E949                     552      LSL.W   #4,D1
000014C4  E849                     553      LSR.W   #4,D1
000014C6  E049                     554      LSR.W   #8,D1
000014C8  B23C 0000                555      CMP.B   #0,D1
000014CC  6700 FD18                556      BEQ     INVALID_OPCODE
000014D0                           557      
000014D0  16F9 00007222            558      MOVE.B  Bcc,(A3)+       *Load 'Bcc' to Add Reg 1 and then increment 
000014D6  6000 0688                559      BRA     EA_BCC          *Branch to EA analysis of the command
000014DA                           560  
000014DA                           561  OP0111
000014DA                           562      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014DA                           563      *BEGIN OUTPUT
000014DA                           564      
000014DA                           565      *MOVE.W  MOVEQ,(A3)+     *Load 'MOVEQ' to Add Reg 1 and then increment
000014DA  49F9 00007224            566      LEA     MOVEQ, A4
000014E0  4EB9 0000169C            567      JSR     PASTE_5
000014E6  6000 0290                568      BRA     EA_MOVEQ        *Branch to EA analysis of the command
000014EA                           569      
000014EA                           570  OP1000
000014EA                           571      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000014EA                           572      
000014EA                           573      **ISOLATE NEXT BITS TO CHECK**
000014EA  3200                     574      MOVE.W  D0,D1           *Copy instruction for modification
000014EC  EF49                     575      LSL.W   #7,D1           *Shift left 7 bits 
000014EE  EA49                     576      LSR.W   #5,D1           *Rotate right 5 bits
000014F0  E049                     577      LSR.W   #8,D1           *Shift right again (13 shifts total)
000014F2  0241 000F                578      ANDI.W  #$00F,D1        *Keep 3 bits
000014F6                           579            
000014F6  B27C 0003                580      CMP     #%011,D1    *Check for 011 to eliminate DIVU
000014FA  6700 0006                581      BEQ     _DIVU        *If equal, branch to DIVU
000014FE  6000 0012                582      BRA     _OR          *Else must be OR, branch
00001502                           583      
00001502                           584  _DIVU
00001502                           585      *MOVE.W  DIVU,(A3)+      *Load 'DIVU' to Add Reg 1 and then increment
00001502  49F9 0000722A            586      LEA     DIVU, A4
00001508  4EB9 00001692            587      JSR     PASTE_4
0000150E  6000 0472                588      BRA     EA_MULS         *Branch to EA analysis of the command
00001512                           589  
00001512                           590  _OR
00001512                           591      *MOVE.W  OR,(A3)+        *Load 'OR' to Add Reg 1 and then increment
00001512  49F9 0000722F            592      LEA     OR, A4
00001518  16DC                     593      MOVE.B  (A4)+, (A3)+
0000151A  16DC                     594      MOVE.B  (A4)+, (A3)+
0000151C  6000 0294                595      BRA     EA_ADD           *Branch to EA analysis of the command
00001520                           596  
00001520                           597  OP1001
00001520                           598      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
00001520                           599      *BEGIN OUTPUT
00001520                           600      
00001520                           601      *MOVE.W  OPSUB,(A3)+     *Load 'SUB' to Add Reg 1 and then increment
00001520  49F9 00007232            602      LEA     OPSUB, A4
00001526  4EB9 0000168A            603      JSR     PASTE_3
0000152C  6000 0284                604      BRA     EA_ADD          *Branch to EA analysis of the command
00001530                           605  
00001530                           606  OP1011
00001530                           607      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
00001530                           608      *BEGIN OUTPUT
00001530                           609      *MOVE.W  CMP,(A3)+     *Load 'CMP' to Add Reg 1 and then increment
00001530  49F9 00007236            610      LEA     CMP, A4
00001536  4EB9 0000168A            611      JSR     PASTE_3
0000153C  6000 05C8                612      BRA     EA_CMP          *Branch to EA analysis of the command
00001540                           613  
00001540                           614  OP1100
00001540                           615      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
00001540                           616  
00001540  3200                     617      MOVE.W  D0,D1           *Copy instruction for modification
00001542  EF49                     618      LSL.W   #7,D1           *Shift left 7 bits 
00001544  EA49                     619      LSR.W   #5,D1           *Rotate right 5 bits
00001546  E049                     620      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001548  0241 000F                621      ANDI.W  #$00F,D1        *Keep 3 bits
0000154C                           622           
0000154C  B27C 0007                623      CMP     #%111,D1       *Check for 111 to eliminate MULS
00001550  6700 0006                624      BEQ     _MULS           *If equal, branch to MULS
00001554  6000 0012                625      BRA     _AND            *Else must be AND, branch
00001558                           626      
00001558                           627  _MULS
00001558                           628      *MOVE.W  MULS,(A3)+      *Load 'MULS' to Add Reg 1 and then increment
00001558  49F9 0000723A            629      LEA     MULS, A4
0000155E  4EB9 00001692            630      JSR     PASTE_4
00001564  6000 041C                631      BRA     EA_MULS         *Branch to EA analysis of the command
00001568                           632  
00001568                           633  _AND
00001568                           634      *MOVE.W  AND,(A3)+       *Load 'AND' to Add Reg 1 and then increment
00001568  49F9 0000723F            635      LEA     AND, A4
0000156E  4EB9 0000168A            636      JSR     PASTE_3
00001574  6000 023C                637      BRA     EA_ADD          *Branch to EA analysis of the command
00001578                           638      
00001578                           639  OP1101
00001578                           640      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS  
00001578                           641  
00001578  3200                     642      MOVE.W  D0,D1           *Copy instruction for modification
0000157A  E149                     643      LSL.W   #8,D1           *Shift left 7 bits 
0000157C  EA49                     644      LSR.W   #5,D1           *Rotate left 5 bits
0000157E  E049                     645      LSR.W   #8,D1           *Shift left again (13 shifts total)
00001580  0241 000F                646      ANDI.W  #$0F,D1         *Keep 3 bits
00001584                           647                
00001584  B27C 0003                648      CMP     #%11,D1         *Check for 011 to eliminate ADDA (Size dependant)
00001588  6700 0016                649      BEQ     _ADDA           *If equal, branch to ADDA
0000158C  6000 0002                650      BRA     _ADD            *Else must be ADD, branch
00001590                           651      
00001590                           652  _ADD
00001590                           653      *MOVE.W  ADD,(A3)+       *Load 'ADD' to Add Reg 1 and then increment
00001590  49F9 00007243            654      LEA     ADD, A4
00001596  4EB9 0000168A            655      JSR     PASTE_3
0000159C  6000 0214                656      BRA     EA_ADD          *Branch to EA analysis of the command
000015A0                           657  
000015A0                           658  _ADDA
000015A0                           659      *MOVE.W  ADDA,(A3)+      *Load 'ADDA' to Add Reg 1 and then increment
000015A0  49F9 00007247            660      LEA     ADDA, A4
000015A6  4EB9 00001692            661      JSR     PASTE_4
000015AC  6000 037A                662      BRA     EA_ADDA         *Branch to EA analysis of the command
000015B0                           663      
000015B0                           664  OP1110
000015B0                           665      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000015B0                           666        
000015B0  3200                     667      MOVE.W  D0,D1           *Copy instruction for modification
000015B2  EF49                     668      LSL.W   #7,D1           *Shift left 7 bits 
000015B4  EA49                     669      LSR.W   #5,D1           *Rotate right 5 bits
000015B6  E049                     670      LSR.W   #8,D1           *Shift right again (13 shifts total)
000015B8  0241 000F                671      ANDI.W  #$00F,D1        *Keep 3 bits
000015BC                           672                    
000015BC  B27C 0001                673      CMP     #%001,D1        *Check for 001 to eliminate LSd instructions
000015C0  6700 001C                674      BEQ     _LSd            *If equal, branch to LSd to determine LSR or LSL
000015C4                           675  
000015C4                           676      **ELSE CONTINUE CHECKING**
000015C4  3200                     677      MOVE.W  D0,D1           *Copy instruction for modification
000015C6  E149                     678      LSL.W   #8,D1          *Shift left 7 bits
000015C8  E749                     679      LSL.W   #3,D1 
000015CA  EA49                     680      LSR.W   #5,D1           *Rotate left 5 bits
000015CC  E049                     681      LSR.W   #8,D1           *Shift left again (13 shifts total)
000015CE  0241 000F                682      ANDI.W  #$0F,D1         *Keep 2 bits
000015D2                           683      
000015D2                           684      **BEGIN ELIMINATION 'IF/ELSE' STATEMENTS                   
000015D2  B27C 0000                685      CMP     #%00,D1         *Check for 00 to eliminate ASd
000015D6  6700 003E                686      BEQ     _ASd            *If equal, branch to ASd to determine ASR or ASL
000015DA  6000 0074                687      BRA     _ROd            *Else must be a ROd instruction, branch to determine
000015DE                           688      
000015DE                           689  _LSd   
000015DE                           690   
000015DE  3200                     691      MOVE.W  D0,D1           *Copy instruction for modification
000015E0  EF49                     692      LSL.W   #7,D1           *Shift left 7 bits 
000015E2  EE49                     693      LSR.W   #7,D1           *Rotate right 5 bits
000015E4  E049                     694      LSR.W   #8,D1           *Shift right again (13 shifts total)
000015E6  0241 000F                695      ANDI.W  #$F,D1          *Keep 3 bits
000015EA                           696  
000015EA  B27C 0000                697      CMP     #%0,D1        *Check for 011 to eliminate LSR
000015EE  6700 0016                698      BEQ     _LSR            *If equal, branch to LSR
000015F2  6000 0002                699      BRA     _LSL            *Else must be LSL, branch
000015F6                           700  
000015F6                           701  _LSL    
000015F6                           702      *MOVE.W  LSL,(A3)+       *Load 'LSL' to Add Reg 1 and then increment
000015F6  49F9 0000724C            703      LEA     LSL, A4
000015FC  4EB9 0000168A            704      JSR     PASTE_3
00001602  6000 046E                705      BRA     EA_LSD         *Branch to EA analysis of the command
00001606                           706  
00001606                           707  _LSR
00001606                           708      *MOVE.W  LSR,(A3)+       *Load 'LSR' to Add Reg 1 and then increment
00001606  49F9 00007250            709      LEA     LSR, A4
0000160C  4EB9 0000168A            710      JSR     PASTE_3
00001612  6000 045E                711      BRA     EA_LSD          *Branch to EA analysis of the command
00001616                           712  
00001616                           713  _ASd
00001616                           714  
00001616  3200                     715      MOVE.W  D0,D1           *Copy instruction for modification
00001618  E149                     716      LSL.W   #8,D1           *Shift left 7 bits 
0000161A  E549                     717      LSL.W   #2,D1           *Shift left 7 bits
0000161C  EA49                     718      LSR.W   #5,D1           *Rotate right 5 bits
0000161E  E049                     719      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001620  0241 000F                720      ANDI.W  #$00F,D1        *Keep 3 bits
00001624                           721     
00001624  B27C 0000                722      CMP     #%000,D1        *Check for 000 to eliminate ASR
00001628  6700 0016                723      BEQ     _ASR            *If equal, branch to ASR
0000162C  6000 0002                724      BRA     _ASL            *Else must be ASL, branch
00001630                           725  
00001630                           726  _ASL    
00001630                           727      *MOVE.W  ASL,(A3)+       *Load 'ASL' to Add Reg 1 and then increment
00001630  49F9 00007254            728      LEA     ASL, A4
00001636  4EB9 0000168A            729      JSR     PASTE_3
0000163C  6000 0434                730      BRA     EA_LSD          *Branch to EA analysis of the command
00001640                           731  
00001640                           732  _ASR
00001640                           733      *MOVE.W  ASR,(A3)+       *Load 'ASR' to Add Reg 1 and then increment
00001640  49F9 00007258            734      LEA     ASR, A4
00001646  4EB9 0000168A            735      JSR     PASTE_3
0000164C  6000 0424                736      BRA     EA_LSD          *Branch to EA analysis of the command
00001650                           737  
00001650                           738  _ROd
00001650                           739  
00001650  3200                     740      MOVE.W  D0,D1           *Copy instruction for modification
00001652  E549                     741      LSL.W   #2,D1           *Shift left 7 bits
00001654  E149                     742      LSL.W   #8,D1           *Shift left 7 bits 
00001656  EA49                     743      LSR.W   #5,D1           *Rotate right 5 bits
00001658  E049                     744      LSR.W   #8,D1           *Shift right again (13 shifts total)
0000165A  0241 000F                745      ANDI.W  #$00F,D1        *Keep 3 bits
0000165E                           746  
0000165E                           747      **BEGIN ELIMINATION 'IF/ELSE' STATEMENTS   
0000165E  B27C 0003                748      CMP     #%011,D1        *Check for 011 to eliminate ROR
00001662  6700 0016                749      BEQ     _ROR            *If equal, branch to ROR
00001666  6000 0002                750      BRA     _ROL            *Else must be ROL, branch
0000166A                           751      
0000166A                           752  _ROL    
0000166A                           753      *MOVE.W  ROL,(A3)+       *Load 'ROL' to Add Reg 1 and then increment
0000166A  49F9 0000725C            754      LEA     ROL, A4
00001670  4EB9 0000168A            755      JSR     PASTE_3
00001676  6000 03FA                756      BRA     EA_LSD          *Branch to EA analysis of the command
0000167A                           757  
0000167A                           758  _ROR
0000167A                           759      *MOVE.W  ROR,(A3)+       *Load 'ROR' to Add Reg 1 and then increment
0000167A  49F9 00007260            760      LEA     ROR, A4
00001680  4EB9 0000168A            761      JSR     PASTE_3
00001686  6000 03EA                762      BRA     EA_LSD          *Branch to EA analysis of the command
0000168A                           763      
0000168A                           764  PASTE_3
0000168A  16DC                     765      MOVE.B  (A4)+, (A3)+
0000168C  16DC                     766      MOVE.B  (A4)+, (A3)+
0000168E  16DC                     767      MOVE.B  (A4)+, (A3)+
00001690  4E75                     768      RTS
00001692                           769  
00001692                           770  PASTE_4
00001692  16DC                     771      MOVE.B  (A4)+, (A3)+
00001694  16DC                     772      MOVE.B  (A4)+, (A3)+
00001696  16DC                     773      MOVE.B  (A4)+, (A3)+
00001698  16DC                     774      MOVE.B  (A4)+, (A3)+
0000169A  4E75                     775      RTS
0000169C                           776  
0000169C                           777  PASTE_5
0000169C  16DC                     778      MOVE.B  (A4)+, (A3)+
0000169E  16DC                     779      MOVE.B  (A4)+, (A3)+
000016A0  16DC                     780      MOVE.B  (A4)+, (A3)+
000016A2  16DC                     781      MOVE.B  (A4)+, (A3)+
000016A4  16DC                     782      MOVE.B  (A4)+, (A3)+
000016A6  4E75                     783      RTS
000016A8                           784  
000016A8  FFFF FFFF                785      SIMHALT
000016AC                           786  
000016AC                           787  
000016AC                           788  
000016AC                           789  
000016AC                           790  
000016AC                           791  
000016AC                           792  -------------------- end include --------------------
000016AC                           793      INCLUDE         'EFFECTIVE_ADDRESSES.X68'
000016AC                           794  
000016AC                           795      *EXAMPLE, MOVE A HEX CODE INTO D6
000016AC                           796      *CALL THE CORRESPONDING EA CODE
000016AC                           797      *MOVE.W     #$2E7C, D6
000016AC                           798      *BRA         EA_MOVE
000016AC                           799      *END EXAMPLE
000016AC                           800      
000016AC                           801  EA_MOVE      *1 invalid; done
000016AC  3E00                     802      MOVE.W      D0, D7 *DO THIS AT THE BEGGINING OF EVERY EA 
000016AE                           803      
000016AE  3807                     804      MOVE.W      D7, D4      *
000016B0  E04C                     805      LSR.W       #8, D4      *
000016B2  E84C                     806      LSR.W       #4, D4      *D4 = SIZE
000016B4  4EB9 00001E0E            807      JSR GET_SIZE
000016BA                           808      
000016BA  3807                     809      MOVE.W      D7, D4      *
000016BC  E14C                     810      LSL.W       #8, D4      *
000016BE  E54C                     811      LSL.W       #2, D4
000016C0  E04C                     812      LSR.W       #8, D4      *
000016C2  EA4C                     813      LSR.W       #5, D4      *D4 = <0000 0000> D4 = SOURCE MODE
000016C4                           814      
000016C4  3A07                     815      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000016C6  E14D                     816      LSL.W       #8, D5  
000016C8  EB4D                     817      LSL.W       #5, D5      *
000016CA  E04D                     818      LSR.W       #8, D5
000016CC  EA4D                     819      LSR.W       #5, D5      *D5 = SOURCE REGISTER
000016CE                           820      
000016CE  4EB9 00001F04            821      JSR         MODE_CHOOSER
000016D4  41F9 00001D42            822      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000016DA  C9FC 0006                823      MULS        #6, D4          *GET JUMP
000016DE  4EB0 4000                824      JSR         0(A0, D4)       *JUMP
000016E2  4EB9 00001F80            825      JSR COMMA
000016E8  4EB9 00001FE2            826      JSR SPACE
000016EE  3807                     827      MOVE.W      D7, D4      *
000016F0  EF4C                     828      LSL.W       #7, D4      *
000016F2  EE4C                     829      LSR.W       #7, D4      *
000016F4  EC4C                     830      LSR.W       #6, D4      *D4 = DESTINATION MODE
000016F6  4EB9 00001CB8            831      JSR         MOVE_ERROR_CHECK 
000016FC                           832      
000016FC  3A07                     833      MOVE.W      D7, D5      *
000016FE  E94D                     834      LSL.W       #4, D5      *
00001700  E04D                     835      LSR.W       #8, D5      *
00001702  EA4D                     836      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
00001704                           837      
00001704  4EB9 00001F04            838      JSR         MODE_CHOOSER
0000170A  41F9 00001D42            839      LEA         MODE_JUMP, A0   *LOAD MODE JUMP
00001710  C9FC 0006                840      MULS        #6, D4          *GET JUMP
00001714  4EB0 4000                841      JSR         0(A0, D4)       *JUMP
00001718  16BC 0000                842      MOVE.B      #00, (A3) 
0000171C  6000 FB52                843      BRA         VALID_OPCODE
00001720                           844  EA_MOVEA        *0 invalid
00001720  3E00                     845      MOVE.W      D0, D7
00001722                           846  
00001722  3807                     847      MOVE.W      D7, D4      *GETTING SIZE
00001724  E04C                     848      LSR.W       #8, D4      *
00001726  E84C                     849      LSR.W       #4, D4      *SHIFT 12 BITS RIGHT
00001728  4EB9 00001E0E            850      JSR         GET_SIZE    *D4 = SIZE
0000172E                           851      
0000172E  3807                     852      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001730  E14C                     853      LSL.W       #8, D4      *
00001732  E54C                     854      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
00001734  E04C                     855      LSR.W       #8, D4      *
00001736  EA4C                     856      LSR.W       #5, D4      *D4 = SOURCE MODE
00001738                           857  
00001738  3A07                     858      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
0000173A  E14D                     859      LSL.W       #8, D5      *
0000173C  EB4D                     860      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
0000173E  E04D                     861      LSR.W       #8, D5      *
00001740  EA4D                     862      LSR.W       #5, D5      *D5 = SOURCE REGISTER
00001742                           863      
00001742  4EB9 00001F04            864      JSR         MODE_CHOOSER  *INCASE MODE IS $111
00001748  41F9 00001D42            865      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
0000174E  C9FC 0006                866      MULS        #6, D4        *GET JUMP
00001752  4EB0 4000                867      JSR         0(A0, D4)     *JUMP
00001756  4EB9 00001F80            868      JSR         COMMA
0000175C  4EB9 00001FE2            869      JSR         SPACE
00001762  3A07                     870      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
00001764  E94D                     871      LSL.W       #4, D5      *
00001766  E04D                     872      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
00001768  EA4D                     873      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
0000176A                           874      
0000176A  4EB9 00001D80            875      JSR         ADDR_1
00001770  16BC 0000                876      MOVE.B      #00, (A3)
00001774  6000 FAFA                877      BRA         VALID_OPCODE
00001778                           878  EA_MOVEQ        *0 invalid
00001778  3E00                     879      MOVE.W      D0, D7
0000177A                           880  
0000177A  4EB9 00001FE2            881      JSR SPACE
00001780  4EB9 00001F88            882      JSR POUND
00001786  4EB9 00001FEA            883      JSR CASH
0000178C  6100 07A4                884      BSR OUTPUT_HEX    
00001790  4EB9 00001F80            885      JSR COMMA
00001796  4EB9 00001FE2            886      JSR SPACE
0000179C  3A07                     887      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
0000179E  E94D                     888      LSL.W       #4, D5      *
000017A0  E04D                     889      LSR.W       #8, D5      *
000017A2  EA4D                     890      LSR.W       #5, D5      * D5 = DESTINATION REGISTER
000017A4                           891      
000017A4  4EB9 00001D72            892      JSR         DATA_0
000017AA  16BC 0000                893      MOVE.B      #00, (A3)
000017AE  6000 FAC0                894      BRA         VALID_OPCODE
000017B2                           895  EA_ADD          *3 invalid; done
000017B2                           896  
000017B2  3E00                     897      MOVE.W      D0, D7
000017B4                           898  
000017B4  3807                     899      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
000017B6  EF4C                     900      LSL.W       #7, D4      * 
000017B8  EE4C                     901      LSR.W       #7, D4      *
000017BA  EC4C                     902      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
000017BC  4EB9 00001E50            903      JSR         GET_OPMODE_MATH *PRINTS THE SIZE
000017C2                           904  
000017C2  B83C 0003                905      CMP.B       #3, D4
000017C6  6D00 000A                906      BLT         DN_VERSION
000017CA  B83C 0003                907      CMP.B       #3, D4
000017CE  6E00 004C                908      BGT         EA_VERSION
000017D2                           909  DN_VERSION *EA IS SOURCE, REGISTER IS DESTINATION <EA> + DN -> DN
000017D2  3807                     910      MOVE.W      D7, D4      
000017D4  E14C                     911      LSL.W       #8, D4      *LEFT 10; RIGHT 13
000017D6  E54C                     912      LSL.W       #2, D4
000017D8  E04C                     913      LSR.W       #8, D4      *
000017DA  EA4C                     914      LSR.W       #5, D4      *D4 = EA MODE
000017DC                           915      
000017DC  3A07                     916      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000017DE  E14D                     917      LSL.W       #8, D5  
000017E0  EB4D                     918      LSL.W       #5, D5      *
000017E2  E04D                     919      LSR.W       #8, D5
000017E4  EA4D                     920      LSR.W       #5, D5      * D5 = EA REGISTER
000017E6                           921      
000017E6  4EB9 00001F04            922      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
000017EC  41F9 00001D42            923      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000017F2  C9FC 0006                924      MULS        #6, D4          *GET JUMP
000017F6  4EB0 4000                925      JSR         0(A0, D4)       *JUMP
000017FA                           926          
000017FA  4EB9 00001F80            927      JSR         COMMA
00001800  4EB9 00001FE2            928      JSR         SPACE
00001806                           929      
00001806  3A07                     930      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
00001808  E94D                     931      LSL.W       #4, D5      *
0000180A  E04D                     932      LSR.W       #8, D5      *
0000180C  EA4D                     933      LSR.W       #5, D5      *D5 DESTINATION REGISTER
0000180E                           934      
0000180E  4EB9 00001D72            935      JSR         DATA_0
00001814  16BC 0000                936      MOVE.B      #00, (A3)
00001818  6000 FA56                937      BRA         VALID_OPCODE
0000181C                           938  EA_VERSION
0000181C  3A07                     939      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
0000181E  E94D                     940      LSL.W       #4, D5      *
00001820  E04D                     941      LSR.W       #8, D5      *
00001822  EA4D                     942      LSR.W       #5, D5      *D5 DESTINATION REGISTER
00001824  4EB9 00001D72            943      JSR         DATA_0
0000182A                           944      
0000182A  4EB9 00001F80            945      JSR         COMMA
00001830  4EB9 00001FE2            946      JSR         SPACE
00001836                           947      
00001836  3807                     948      MOVE.W      D7, D4      
00001838  E14C                     949      LSL.W       #8, D4      *LEFT 10; RIGHT 13
0000183A  E54C                     950      LSL.W       #2, D4
0000183C  E04C                     951      LSR.W       #8, D4      *
0000183E  EA4C                     952      LSR.W       #5, D4      *D4 = EA MODE
00001840                           953      
00001840  3A07                     954      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001842  E14D                     955      LSL.W       #8, D5  
00001844  EB4D                     956      LSL.W       #5, D5      *
00001846  E04D                     957      LSR.W       #8, D5
00001848  EA4D                     958      LSR.W       #5, D5      * D5 = EA REGISTER
0000184A                           959      
0000184A                           960      *the only way there could be an error is if 
0000184A                           961      *we are in THIS addressing mo
0000184A                           962      
0000184A  4EB9 00001F04            963      JSR         MODE_CHOOSER    *IF A WORD OR LONG 
00001850  4EB9 00001CC2            964      JSR         ADD_ERROR_CHECK
00001856  41F9 00001D42            965      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
0000185C  C9FC 0006                966      MULS        #6, D4          *GET JUMP
00001860  4EB0 4000                967      JSR         0(A0, D4)       *JUMP
00001864                           968      
00001864  16BC 0000                969      MOVE.B      #00, (A3)
00001868  6000 FA06                970      BRA         VALID_OPCODE
0000186C                           971  EA_ADDI  *2 invalid; DONE
0000186C  3E00                     972      MOVE.W      D0, D7
0000186E                           973      
0000186E  3807                     974      MOVE.W      D7, D4      *
00001870  E14C                     975      LSL.W       #8, D4      *
00001872  E04C                     976      LSR.W       #8, D4      *
00001874  EC4C                     977      LSR.W       #6, D4      *D4 = SIZE
00001876  4EB9 00001EA2            978      JSR         GET_SIZE_ADDI
0000187C  4EB9 00001F88            979      JSR         POUND
00001882  4EB9 00001FEA            980      JSR         CASH
00001888  6100 06A8                981      BSR         OUTPUT_HEX
0000188C  4EB9 00001F80            982      JSR         COMMA
00001892  4EB9 00001FE2            983      JSR         SPACE
00001898  3807                     984      MOVE.W      D7, D4      
0000189A  E14C                     985      LSL.W       #8, D4      *LEFT 10; RIGHT 13
0000189C  E54C                     986      LSL.W       #2, D4
0000189E  E04C                     987      LSR.W       #8, D4      *
000018A0  EA4C                     988      LSR.W       #5, D4      *D4 = EA MODE
000018A2                           989      
000018A2  3A07                     990      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000018A4  E14D                     991      LSL.W       #8, D5  
000018A6  EB4D                     992      LSL.W       #5, D5      *
000018A8  E04D                     993      LSR.W       #8, D5
000018AA  EA4D                     994      LSR.W       #5, D5      * D5 = EA REGISTER
000018AC                           995      
000018AC  4EB9 00001F04            996      JSR         MODE_CHOOSER    *IF A WORD OR LONG  
000018B2  4EB9 00001CDC            997      JSR         ADDI_ERROR_CHECK
000018B8  41F9 00001D42            998      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000018BE  C9FC 0006                999      MULS        #6, D4          *GET JUMP
000018C2  4EB0 4000               1000      JSR         0(A0, D4)       *JUMP'
000018C6                          1001      
000018C6  16BC 0000               1002      MOVE.B      #00, (A3)
000018CA  6000 F9A4               1003      BRA         VALID_OPCODE
000018CE                          1004  EA_ADDQ     *0 INVALID
000018CE  3E00                    1005      MOVE.W      D0, D7
000018D0                          1006      
000018D0  3807                    1007      MOVE.W      D7, D4
000018D2  E14C                    1008      LSL.W       #8, D4
000018D4  E04C                    1009      LSR.W       #8, D4
000018D6  EC4C                    1010      LSR.W       #6, D4
000018D8  4EB9 00001EA2           1011      JSR         GET_SIZE_ADDI    *PRINT SIZE
000018DE                          1012      
000018DE  3A07                    1013      MOVE.W      D7, D5      *GETTING DATA
000018E0  E94D                    1014      LSL.W       #4, D5      *SHIFT LEFT 4; RIGHT 13
000018E2  E04D                    1015      LSR.W       #8, D5      *
000018E4  EA4D                    1016      LSR.W       #5, D5      *D5 = DATA
000018E6  4EB9 00001E88           1017      JSR         GET_DATA
000018EC  4EB9 00001F80           1018      JSR COMMA
000018F2  4EB9 00001FE2           1019      JSR SPACE
000018F8  3807                    1020      MOVE.W      D7, D4      *GETTING EA MODE
000018FA  E14C                    1021      LSL.W       #8, D4      *
000018FC  E54C                    1022      LSL.W       #2, D4      *SHIFT 10 LEFT; 13 RIGHT
000018FE  E04C                    1023      LSR.W       #8, D4      *
00001900  EA4C                    1024      LSR.W       #5, D4      *D4 = EA MODE
00001902                          1025      
00001902  3A07                    1026      MOVE.W      D7, D5      *GETTING EA REGISTER
00001904  E14D                    1027      LSL.W       #8, D5      *
00001906  EB4D                    1028      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001908  E04D                    1029      LSR.W       #8, D5      *
0000190A  EA4D                    1030      LSR.W       #5, D5      *D5 = EA REGISTER
0000190C                          1031      
0000190C  4EB9 00001F04           1032      JSR         MODE_CHOOSER
00001912  41F9 00001D42           1033      LEA         MODE_JUMP, A0   *LOAD MODE JUMP
00001918  C9FC 0006               1034      MULS        #6, D4          *GET JUMP
0000191C  4EB0 4000               1035      JSR         0(A0, D4)       *JUMP
00001920                          1036      
00001920  16BC 0000               1037      MOVE.B      #00, (A3)
00001924                          1038      
00001924  6000 F94A               1039      BRA         VALID_OPCODE
00001928                          1040  EA_ADDA         *0 INVALID
00001928  3E00                    1041      MOVE.W      D0, D7
0000192A                          1042      
0000192A  3807                    1043      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
0000192C  EF4C                    1044      LSL.W       #7, D4      * 
0000192E  EE4C                    1045      LSR.W       #7, D4      *
00001930  EC4C                    1046      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
00001932  4EB9 00001E38           1047      JSR         GET_OPMODE
00001938                          1048      
00001938  3807                    1049      MOVE.W      D7, D4      *GETTING SOURCE MODE
0000193A  E14C                    1050      LSL.W       #8, D4      *
0000193C  E54C                    1051      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
0000193E  E04C                    1052      LSR.W       #8, D4      *
00001940  EA4C                    1053      LSR.W       #5, D4      *D4 = SOURCE MODE
00001942                          1054      
00001942  3A07                    1055      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
00001944  E14D                    1056      LSL.W       #8, D5      *
00001946  EB4D                    1057      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001948  E04D                    1058      LSR.W       #8, D5      *
0000194A  EA4D                    1059      LSR.W       #5, D5      *D5 = SOURCE REGISTER
0000194C                          1060      
0000194C  4EB9 00001F04           1061      JSR         MODE_CHOOSER  *INCASE MODE IS $111
00001952  41F9 00001D42           1062      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001958  C9FC 0006               1063      MULS        #6, D4        *GET JUMP
0000195C  4EB0 4000               1064      JSR         0(A0, D4)     *JUMP
00001960  4EB9 00001F80           1065      JSR COMMA 
00001966  4EB9 00001FE2           1066      JSR SPACE
0000196C  3A07                    1067      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
0000196E  E94D                    1068      LSL.W       #4, D5      *
00001970  E04D                    1069      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
00001972  EA4D                    1070      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
00001974                          1071      
00001974  4EB9 00001D80           1072      JSR         ADDR_1
0000197A  16BC 0000               1073      MOVE.B      #00, (A3)
0000197E                          1074      
0000197E  6000 F8F0               1075      BRA         VALID_OPCODE
00001982                          1076  EA_MULS                *1 INVALID;
00001982                          1077  
00001982  3E00                    1078      MOVE.W      D0, D7
00001984                          1079      
00001984  4EB9 00001FE2           1080      JSR         SPACE
0000198A  3807                    1081      MOVE.W      D7, D4      
0000198C  E14C                    1082      LSL.W       #8, D4      *LEFT 10; RIGHT 13
0000198E  E54C                    1083      LSL.W       #2, D4
00001990  E04C                    1084      LSR.W       #8, D4      *
00001992  EA4C                    1085      LSR.W       #5, D4      *D4 = EA MODE
00001994                          1086      
00001994  3A07                    1087      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001996  E14D                    1088      LSL.W       #8, D5  
00001998  EB4D                    1089      LSL.W       #5, D5      *
0000199A  E04D                    1090      LSR.W       #8, D5
0000199C  EA4D                    1091      LSR.W       #5, D5      * D5 = EA REGISTER
0000199E                          1092      
0000199E  4EB9 00001F04           1093      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
000019A4  41F9 00001D42           1094      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000019AA  C9FC 0006               1095      MULS        #6, D4          *GET JUMP
000019AE  4EB0 4000               1096      JSR         0(A0, D4)       *JUMP
000019B2  4EB9 00001F80           1097      JSR         COMMA
000019B8  4EB9 00001FE2           1098      JSR         SPACE
000019BE  3A07                    1099      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
000019C0  E94D                    1100      LSL.W       #4, D5      *
000019C2  E04D                    1101      LSR.W       #8, D5      *
000019C4  EA4D                    1102      LSR.W       #5, D5      *D5 DESTINATION REGISTER
000019C6                          1103      
000019C6  4EB9 00001D72           1104      JSR         DATA_0
000019CC  16BC 0000               1105      MOVE.B      #00, (A3)
000019D0                          1106      
000019D0  6000 F89E               1107      BRA         VALID_OPCODE
000019D4                          1108  EA_LEA          *5 INVALIDS; DONE
000019D4  3E00                    1109      MOVE.W      D0, D7
000019D6                          1110      
000019D6  4EB9 00001FE2           1111      JSR         SPACE
000019DC  3807                    1112      MOVE.W      D7, D4      *GETTING SOURCE MODE
000019DE  E14C                    1113      LSL.W       #8, D4      *
000019E0  E54C                    1114      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
000019E2  E04C                    1115      LSR.W       #8, D4      *
000019E4  EA4C                    1116      LSR.W       #5, D4      *D4 = SOURCE MODE
000019E6                          1117      
000019E6  3A07                    1118      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
000019E8  E14D                    1119      LSL.W       #8, D5      *
000019EA  EB4D                    1120      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
000019EC  E04D                    1121      LSR.W       #8, D5      *
000019EE  EA4D                    1122      LSR.W       #5, D5      *D5 = SOURCE REGISTER
000019F0                          1123      
000019F0  4EB9 00001F04           1124      JSR         MODE_CHOOSER  *INCASE MODE IS $111
000019F6  4EB9 00001CEE           1125      JSR         LEA_ERROR_CHECK
000019FC  41F9 00001D42           1126      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001A02  C9FC 0006               1127      MULS        #6, D4        *GET JUMP
00001A06  4EB0 4000               1128      JSR         0(A0, D4)     *JUMP
00001A0A  4EB9 00001F80           1129      JSR COMMA
00001A10  4EB9 00001FE2           1130      JSR SPACE
00001A16  3A07                    1131      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
00001A18  E94D                    1132      LSL.W       #4, D5      *
00001A1A  E04D                    1133      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
00001A1C  EA4D                    1134      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
00001A1E                          1135      
00001A1E  4EB9 00001D80           1136      JSR         ADDR_1
00001A24  16BC 0000               1137      MOVE.B      #00, (A3)
00001A28                          1138      
00001A28  6000 F846               1139      BRA         VALID_OPCODE
00001A2C                          1140  EA_CLR          *2 INVALID; DONE
00001A2C  3E00                    1141      MOVE.W      D0, D7
00001A2E                          1142      
00001A2E  3807                    1143      MOVE.W      D7, D4
00001A30  E14C                    1144      LSL.W       #8, D4      *
00001A32  E04C                    1145      LSR.W       #8, D4      *
00001A34  EC4C                    1146      LSR.W       #6, D4      *D4 = SIZE
00001A36  4EB9 00001EA2           1147      JSR         GET_SIZE_ADDI
00001A3C  3807                    1148      MOVE.W      D7, D4      
00001A3E  E14C                    1149      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001A40  E54C                    1150      LSL.W       #2, D4
00001A42  E04C                    1151      LSR.W       #8, D4      *
00001A44  EA4C                    1152      LSR.W       #5, D4      *D4 = EA MODE
00001A46                          1153      
00001A46  3A07                    1154      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001A48  E14D                    1155      LSL.W       #8, D5  
00001A4A  EB4D                    1156      LSL.W       #5, D5      *
00001A4C  E04D                    1157      LSR.W       #8, D5
00001A4E  EA4D                    1158      LSR.W       #5, D5      * D5 = EA REGISTER
00001A50                          1159      
00001A50  4EB9 00001F04           1160      JSR         MODE_CHOOSER    *IF A WORD OR LONG  
00001A56  4EB9 00001CDC           1161      JSR         ADDI_ERROR_CHECK  
00001A5C  41F9 00001D42           1162      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001A62  C9FC 0006               1163      MULS        #6, D4          *GET JUMP
00001A66  4EB0 4000               1164      JSR         0(A0, D4)       *JUMP
00001A6A                          1165      
00001A6A  16BC 0000               1166      MOVE.B      #00, (A3)
00001A6E                          1167      
00001A6E  6000 F800               1168      BRA         VALID_OPCODE
00001A72                          1169  EA_LSD          *3 INVALID; DONE
00001A72  3E00                    1170      MOVE.W      D0, D7
00001A74                          1171      
00001A74  3807                    1172      MOVE.W      D7, D4
00001A76  E14C                    1173      LSL.W       #8, D4
00001A78  E04C                    1174      LSR.W       #8, D4
00001A7A  EC4C                    1175      LSR.W       #6, D4      *ISOLATE SIZE
00001A7C  4EB9 00001EA2           1176      JSR         GET_SIZE_ADDI  *PRINT SIZE
00001A82  B83C 0003               1177      CMP.B       #3, D4      *EA SHIFT
00001A86  6700 003E               1178      BEQ         EA_SHIFT    *BRANCH TO EA SHIFT
00001A8A  3807                    1179      MOVE.W      D7, D4
00001A8C  E14C                    1180      LSL.W       #8, D4
00001A8E  E54C                    1181      LSL.W       #2, D4
00001A90  E04C                    1182      LSR.W       #8, D4
00001A92  EE4C                    1183      LSR.W       #7, D4      *D4 = TYPE
00001A94                          1184      
00001A94  3A07                    1185      MOVE.W      D7, D5      *GETTING DATA
00001A96  E94D                    1186      LSL.W       #4, D5      *SHIFT LEFT 4; RIGHT 13
00001A98  E04D                    1187      LSR.W       #8, D5      *
00001A9A  EA4D                    1188      LSR.W       #5, D5      *D5 = DATA / REGISTER
00001A9C                          1189      
00001A9C  4EB9 00001EC2           1190      JSR         TYPE_CHOOSER
00001AA2  4EB9 00001F80           1191      JSR         COMMA
00001AA8  4EB9 00001FE2           1192      JSR         SPACE
00001AAE  3A07                    1193      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001AB0  E14D                    1194      LSL.W       #8, D5  
00001AB2  EB4D                    1195      LSL.W       #5, D5      *
00001AB4  E04D                    1196      LSR.W       #8, D5
00001AB6  EA4D                    1197      LSR.W       #5, D5      * D5 = EA REGISTER
00001AB8  4EB9 00001D72           1198      JSR         DATA_0
00001ABE                          1199      
00001ABE  16BC 0000               1200      MOVE.B      #00, (A3)
00001AC2                          1201      
00001AC2  6000 F7AC               1202      BRA         VALID_OPCODE
00001AC6                          1203  EA_SHIFT
00001AC6  4EB9 00001FE2           1204      JSR         SPACE
00001ACC  3807                    1205      MOVE.W      D7, D4      *
00001ACE  E14C                    1206      LSL.W       #8, D4      *
00001AD0  E54C                    1207      LSL.W       #2, D4
00001AD2  E04C                    1208      LSR.W       #8, D4      *
00001AD4  EA4C                    1209      LSR.W       #5, D4      *D4 = EA MODE
00001AD6                          1210      
00001AD6  3A07                    1211      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001AD8  E14D                    1212      LSL.W       #8, D5  
00001ADA  EB4D                    1213      LSL.W       #5, D5      *
00001ADC  E04D                    1214      LSR.W       #8, D5
00001ADE  EA4D                    1215      LSR.W       #5, D5      * D5 = EA REGISTER
00001AE0                          1216      
00001AE0  4EB9 00001F04           1217      JSR         MODE_CHOOSER    *IF A WORD OR LONG   
00001AE6  4EB9 00001CC2           1218      JSR         ADD_ERROR_CHECK 
00001AEC  41F9 00001D42           1219      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001AF2  C9FC 0006               1220      MULS        #6, D4          *GET JUMP
00001AF6  4EB0 4000               1221      JSR         0(A0, D4)       *JUMP
00001AFA  6000 0002               1222      BRA         DONE
00001AFE                          1223  DONE
00001AFE  16BC 0000               1224      MOVE.B      #00, (A3)
00001B02                          1225      
00001B02  6000 F76C               1226      BRA         VALID_OPCODE
00001B06                          1227  
00001B06                          1228  EA_CMP          *0 INVALID
00001B06  3E00                    1229      MOVE.W      D0, D7
00001B08                          1230      
00001B08  3807                    1231      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
00001B0A  EF4C                    1232      LSL.W       #7, D4      * 
00001B0C  EE4C                    1233      LSR.W       #7, D4      *
00001B0E  EC4C                    1234      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
00001B10  4EB9 00001EA2           1235      JSR         GET_SIZE_ADDI
00001B16  3807                    1236      MOVE.W      D7, D4      
00001B18  E14C                    1237      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001B1A  E54C                    1238      LSL.W       #2, D4
00001B1C  E04C                    1239      LSR.W       #8, D4      *
00001B1E  EA4C                    1240      LSR.W       #5, D4      *D4 = EA MODE
00001B20                          1241      
00001B20  3A07                    1242      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001B22  E14D                    1243      LSL.W       #8, D5  
00001B24  EB4D                    1244      LSL.W       #5, D5      *
00001B26  E04D                    1245      LSR.W       #8, D5
00001B28  EA4D                    1246      LSR.W       #5, D5      * D5 = EA REGISTER
00001B2A                          1247      
00001B2A  4EB9 00001F04           1248      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001B30  41F9 00001D42           1249      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001B36  C9FC 0006               1250      MULS        #6, D4          *GET JUMP
00001B3A  4EB0 4000               1251      JSR         0(A0, D4)       *JUMP
00001B3E  4EB9 00001F80           1252      JSR         COMMA
00001B44  4EB9 00001FE2           1253      JSR         SPACE
00001B4A  3A07                    1254      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
00001B4C  E94D                    1255      LSL.W       #4, D5      *
00001B4E  E04D                    1256      LSR.W       #8, D5      *
00001B50  EA4D                    1257      LSR.W       #5, D5      *D5 DESTINATION REGISTER
00001B52                          1258      
00001B52  4EB9 00001D72           1259      JSR         DATA_0
00001B58  16BC 0000               1260      MOVE.B      #00, (A3)
00001B5C                          1261      
00001B5C  6000 F712               1262      BRA         VALID_OPCODE
00001B60                          1263  EA_BCC          *0 INVALID (I THINK)
00001B60  3E00                    1264      MOVE.W      D0, D7
00001B62                          1265      
00001B62  3807                    1266      MOVE.W      D7, D4
00001B64  E94C                    1267      LSL.W       #4, D4
00001B66  E04C                    1268      LSR.W       #8, D4
00001B68  E84C                    1269      LSR.W       #4, D4   *D4 = BINARY CONDITION CODE
00001B6A  4EB9 00001ED2           1270      JSR         PRINT_BCC
00001B70  4EB9 00001FE2           1271      JSR         SPACE
00001B76  4EB9 00001F32           1272      JSR         OUTPUT_HEX
00001B7C  16BC 0000               1273      MOVE.B      #00, (A3)
00001B80                          1274      
00001B80  6000 F6EE               1275      BRA         VALID_OPCODE
00001B84                          1276  EA_JSR   *5 INVALID; DONE
00001B84                          1277  
00001B84  3E00                    1278      MOVE.W      D0, D7
00001B86                          1279      
00001B86  4EB9 00001FE2           1280      JSR         SPACE
00001B8C  3807                    1281      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001B8E  E14C                    1282      LSL.W       #8, D4      *
00001B90  E54C                    1283      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
00001B92  E04C                    1284      LSR.W       #8, D4      *
00001B94  EA4C                    1285      LSR.W       #5, D4      *D4 = SOURCE MODE
00001B96                          1286      
00001B96  3A07                    1287      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
00001B98  E14D                    1288      LSL.W       #8, D5      *
00001B9A  EB4D                    1289      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001B9C  E04D                    1290      LSR.W       #8, D5      *
00001B9E  EA4D                    1291      LSR.W       #5, D5      *D5 = SOURCE REGISTER
00001BA0                          1292      
00001BA0  4EB9 00001F04           1293      JSR         MODE_CHOOSER  *INCASE MODE IS $111
00001BA6  4EB9 00001CEE           1294      JSR         LEA_ERROR_CHECK
00001BAC  41F9 00001D42           1295      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001BB2  C9FC 0006               1296      MULS        #6, D4        *GET JUMP
00001BB6  4EB0 4000               1297      JSR         0(A0, D4)     *JUM
00001BBA                          1298      
00001BBA  16BC 0000               1299      MOVE.B      #00, (A3)
00001BBE                          1300      
00001BBE  6000 F6B0               1301      BRA         VALID_OPCODE
00001BC2                          1302  EA_MOVEM
00001BC2                          1303  
00001BC2  3C00                    1304      MOVE.W      D0, D6
00001BC4  3806                    1305      MOVE.W      D6, D4
00001BC6  EB4C                    1306      LSL.W       #5, D4
00001BC8  E94C                    1307      LSL.W       #4, D4
00001BCA  E04C                    1308      LSR.W       #8, D4
00001BCC  EE4C                    1309      LSR.W       #7, D4
00001BCE  4EB9 00001EEC           1310      JSR         REG_SIZE
00001BD4  3E06                    1311      MOVE.W      D6, D7
00001BD6  EB4F                    1312      LSL.W       #5, D7
00001BD8  E04F                    1313      LSR.W       #8, D7
00001BDA  EE4F                    1314      LSR.W       #7, D7
00001BDC  BE3C 0000               1315      CMP.B       #0, D7
00001BE0  6700 003E               1316      BEQ         PRINT_LIST
00001BE4  BE7C 0000               1317  EAP CMP.W       #0, D7      *IF ITS A ZERO, THAT MEANS WE JUST JUMPED HERE 
00001BE8  6700 00A2               1318      BEQ         COMMA_SPACE *FROM CHECK TYPE, ELSE MEANS ITS UNALTERED
00001BEC  3806                    1319  EAS MOVE.W      D6, D4      
00001BEE  E14C                    1320      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001BF0  E54C                    1321      LSL.W       #2, D4
00001BF2  E04C                    1322      LSR.W       #8, D4      *
00001BF4  EA4C                    1323      LSR.W       #5, D4      *D4 = EA MODE
00001BF6                          1324      
00001BF6  3A06                    1325      MOVE.W      D6, D5      *SHIFT LEFT 13; RIGHT 13
00001BF8  E14D                    1326      LSL.W       #8, D5  
00001BFA  EB4D                    1327      LSL.W       #5, D5      *
00001BFC  E04D                    1328      LSR.W       #8, D5
00001BFE  EA4D                    1329      LSR.W       #5, D5      * D5 = EA REGISTER
00001C00                          1330      
00001C00  4EB9 00001F04           1331      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001C06  41F9 00001D42           1332      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001C0C  C9FC 0006               1333      MULS        #6, D4          *GET JUMP
00001C10  4EB0 4000               1334      JSR         0(A0, D4)       *JUMP
00001C14                          1335      
00001C14  BE7C 0001               1336      CMP.W       #1, D7 *IF ONE THEN THIS WAS PRINTED FIRST
00001C18  6700 0006               1337      BEQ         PRINT_LIST
00001C1C                          1338      
00001C1C  6000 008E               1339      BRA         DONE_PRINTING
00001C20                          1340  PRINT_LIST
00001C20  BE3C 0001               1341      CMP.B       #1, D7 
00001C24  6700 0076               1342      BEQ         COMMA_SPACE2
00001C28  2E0A                    1343  EA2 MOVE.L      A2, D7
00001C2A  548A                    1344      ADD.L       #2, A2
00001C2C  143C 0008               1345      MOVE.B      #$8, D2
00001C30  4244                    1346      CLR         D4
00001C32                          1347  FOR_LOOP    
00001C32  B404                    1348      CMP.B       D4, D2
00001C34  6700 001E               1349      BEQ         ADDRESS_REGISTERS
00001C38  E25F                    1350      ROR.W       #1, D7
00001C3A  6000 0006               1351      BRA         PRINT_CURRENT
00001C3E  5244                    1352  JFZ ADDQ        #1, D4
00001C40  60F0                    1353      BRA         FOR_LOOP
00001C42                          1354      
00001C42                          1355  PRINT_CURRENT
00001C42  64FA                    1356      BCC         JFZ
00001C44  1A04                    1357      MOVE.B      D4, D5
00001C46  4EB9 00001D72           1358      JSR         DATA_0
00001C4C  4EB9 0000200A           1359      JSR         SLASH
00001C52  60EA                    1360      BRA         JFZ
00001C54                          1361      
00001C54                          1362  ADDRESS_REGISTERS
00001C54  4244                    1363      CLR         D4
00001C56                          1364  FOR_2
00001C56  B404                    1365      CMP.B       D4, D2
00001C58  6700 001E               1366      BEQ         CHECK_TYPE
00001C5C  E25F                    1367      ROR.W       #1, D7
00001C5E  6000 0006               1368      BRA         EA_PRINT_ADDRESS
00001C62  5244                    1369  JFF ADDQ        #1, D4
00001C64  60F0                    1370      BRA         FOR_2
00001C66                          1371      
00001C66                          1372  EA_PRINT_ADDRESS
00001C66  64FA                    1373      BCC         JFF
00001C68  1A04                    1374      MOVE.B      D4, D5
00001C6A  4EB9 0000200A           1375      JSR         SLASH
00001C70  4EB9 00001D80           1376      JSR         ADDR_1
00001C76  60EA                    1377      BRA         JFF  
00001C78                          1378  CHECK_TYPE
00001C78  3E06                    1379      MOVE.W      D6, D7
00001C7A  EB4F                    1380      LSL.W       #5, D7  
00001C7C  E04F                    1381      LSR.W       #8, D7
00001C7E  EE4F                    1382      LSR.W       #7, D7
00001C80  BE3C 0000               1383      CMP.B       #0, D7   *IF TYPE IS 0 THE LIST HAS BEEN PRINTED FIRST  
00001C84  6700 FF5E               1384      BEQ         EAP      *THEREFORE ITS TIME TO PRINT THE EAP
00001C88  6600 0022               1385      BNE         DONE_PRINTING
00001C8C                          1386      
00001C8C                          1387  COMMA_SPACE
00001C8C  4EB9 00001F80           1388      JSR         COMMA
00001C92  4EB9 00001FE2           1389      JSR         SPACE
00001C98  6000 FF52               1390      BRA         EAS
00001C9C                          1391      
00001C9C                          1392  COMMA_SPACE2
00001C9C  4EB9 00001F80           1393      JSR         COMMA
00001CA2  4EB9 00001FE2           1394      JSR         SPACE
00001CA8  6000 FF7E               1395      BRA         EA2
00001CAC                          1396      
00001CAC                          1397  DONE_PRINTING
00001CAC  16BC 0000               1398      MOVE.B      #00, (A3)
00001CB0  6000 F5BE               1399      BRA         VALID_OPCODE
00001CB4                          1400  
00001CB4                          1401  
00001CB4                          1402  
00001CB4                          1403  
00001CB4                          1404  
00001CB4                          1405  
00001CB4                          1406  
00001CB4                          1407  
00001CB4                          1408  
00001CB4                          1409  
00001CB4                          1410  
00001CB4                          1411  
00001CB4                          1412  
00001CB4                          1413  
00001CB4                          1414  
00001CB4                          1415  
00001CB4                          1416  BYEBYE
00001CB4  FFFF FFFF               1417      SIMHALT
00001CB8                          1418  
00001CB8                          1419  
00001CB8                          1420  
00001CB8                          1421  
00001CB8                          1422  
00001CB8                          1423  
00001CB8                          1424  
00001CB8                          1425  
00001CB8                          1426  
00001CB8                          1427  
00001CB8                          1428  
00001CB8                          1429  
00001CB8                          1430  
00001CB8                          1431  
00001CB8                          1432  
00001CB8                          1433  MOVE_ERROR_CHECK       *only invalid move is desn addr reg
00001CB8  B83C 0001               1434      CMP.B       #1, D4 *if d4 is one, dest is addr reg
00001CBC  6700 0354               1435      BEQ         INVALID
00001CC0  4E75                    1436      RTS
00001CC2                          1437      
00001CC2                          1438  ADD_ERROR_CHECK  *COVERS ALL SHIFTS
00001CC2  B83C 0007               1439      CMP.B       #7, D4
00001CC6  6700 0072               1440      BEQ         EAT_INVALID
00001CCA  B83C 0001               1441      CMP.B       #1, D4
00001CCE  6700 0342               1442      BEQ         INVALID
00001CD2  B83C 0000               1443      CMP.B       #0, D4
00001CD6  6700 033A               1444      BEQ         INVALID
00001CDA  4E75                    1445      RTS 
00001CDC                          1446      
00001CDC                          1447  ADDI_ERROR_CHECK *COVERS CLR
00001CDC  B83C 0001               1448      CMP.B       #1, D4
00001CE0  6700 0330               1449      BEQ         INVALID
00001CE4  B83C 0007               1450      CMP.B       #7, D4
00001CE8  6700 0050               1451      BEQ         EAT_INVALID
00001CEC  4E75                    1452      RTS
00001CEE                          1453      
00001CEE                          1454  LEA_ERROR_CHECK *COVERS JSR
00001CEE  B83C 0000               1455      CMP.B       #0, D4
00001CF2  6700 031E               1456      BEQ         INVALID
00001CF6  B83C 0001               1457      CMP.B       #1, D4
00001CFA  6700 0316               1458      BEQ         INVALID
00001CFE  B83C 0003               1459      CMP.B       #3, D4
00001D02  6700 030E               1460      BEQ         INVALID
00001D06  B83C 0004               1461      CMP.B       #4, D4
00001D0A  6700 0306               1462      BEQ         INVALID
00001D0E  B83C 0007               1463      CMP.B       #7, D4
00001D12  6700 0026               1464      BEQ         EAT_INVALID
00001D16  4E75                    1465      RTS
00001D18                          1466      
00001D18                          1467  MOVEM_ERROR_CHECK *0, 1, 4, 7
00001D18  B83C 0000               1468      CMP.B       #0, D4
00001D1C  6700 02F4               1469      BEQ         INVALID
00001D20  B83C 0001               1470      CMP.B       #1, D4
00001D24  6700 02EC               1471      BEQ         INVALID
00001D28  B83C 0004               1472      CMP.B       #4, D4
00001D2C  6700 02E4               1473      BEQ         INVALID
00001D30  B83C 0007               1474      CMP.B       #7, D4
00001D34  6700 0004               1475      BEQ         EAT_INVALID
00001D38  4E75                    1476      RTS
00001D3A                          1477      
00001D3A                          1478      
00001D3A                          1479      
00001D3A                          1480      *assuming FOR NOW that it always eats a long
00001D3A                          1481  EAT_INVALID *EATS THE NEXT TWO WORD VALUES... THEN CALLS INVALID
00001D3A  548A                    1482      ADD.L       #2, A2      *EAT THE FIRST WORD
00001D3C  548A                    1483      ADD.L       #2, A2      *EAT THE SECOND WORD
00001D3E  6000 02D2               1484      BRA         INVALID
00001D42                          1485  
00001D42                          1486  
00001D42                          1487  
00001D42                          1488  
00001D42                          1489  
00001D42                          1490  
00001D42                          1491  
00001D42                          1492  
00001D42                          1493  
00001D42                          1494  
00001D42                          1495  
00001D42                          1496  
00001D42                          1497  
00001D42                          1498  
00001D42                          1499  
00001D42                          1500  
00001D42                          1501  
00001D42                          1502  
00001D42  4EF9 00001D72           1503  MODE_JUMP       JMP     DATA_0
00001D48  4EF9 00001D80           1504                  JMP     ADDR_1
00001D4E  4EF9 00001D8E           1505                  JMP     ADDI_2
00001D54  4EF9 00001DA0           1506                  JMP     ADDP_3
00001D5A  4EF9 00001DAC           1507                  JMP     ADDM_4
00001D60  4EF9 00001DB8           1508                  JMP     ABSW_5
00001D66  4EF9 00001DCE           1509                  JMP     ABSL_6
00001D6C  4EF9 00001DF2           1510                  JMP     IMME_7
00001D72                          1511  
00001D72                          1512  DATA_0 *DONE
00001D72  16F9 00007282           1513      MOVE.B      M_DREG, (A3)+
00001D78  4EB9 00001E2E           1514      JSR         GET_REG
00001D7E  4E75                    1515      RTS
00001D80                          1516  
00001D80                          1517  ADDR_1 *ADD CONDITIONS FOR SOURCE ONLY, AND NEVER BYTES
00001D80  16F9 00007284           1518      MOVE.B      M_AREG, (A3)+
00001D86  4EB9 00001E2E           1519      JSR         GET_REG
00001D8C  4E75                    1520      RTS
00001D8E                          1521   
00001D8E                          1522  ADDI_2 *DONE
00001D8E  4EB9 00001FC2           1523      JSR         OPEN
00001D94  4EB8 1D80               1524      JSR         ADDR_1
00001D98  4EB9 00001FCA           1525      JSR         CLOSE
00001D9E  4E75                    1526      RTS
00001DA0                          1527      
00001DA0                          1528  ADDP_3 *DONE
00001DA0  4EB8 1D8E               1529      JSR         ADDI_2
00001DA4  4EB9 00001FD2           1530      JSR         PLUS
00001DAA  4E75                    1531      RTS
00001DAC                          1532      
00001DAC                          1533  ADDM_4 *DONE
00001DAC  4EB9 00001FDA           1534      JSR         SUB
00001DB2  4EB8 1D8E               1535      JSR         ADDI_2
00001DB6  4E75                    1536      RTS
00001DB8                          1537      
00001DB8                          1538  ABSW_5  *DONE
00001DB8  548A                    1539      ADD.L       #2, A2      *INCREMENT INTO WORD ADDRESS
00001DBA  141A                    1540      MOVE.B      (A2)+, D2
00001DBC  E15A                    1541      ROL         #8, D2
00001DBE  1412                    1542      MOVE.B      (A2), D2
00001DC0  534A                    1543      SUB         #1, A2  
00001DC2  4EB9 00001FEA           1544      JSR         CASH
00001DC8  6100 0168               1545      BSR         OUTPUT_HEX
00001DCC  4E75                    1546      RTS
00001DCE                          1547  
00001DCE                          1548   
00001DCE                          1549  ABSL_6 *
00001DCE  4EB9 00001FEA           1550      JSR         CASH
00001DD4  548A                    1551      ADD.L       #2, A2      *INCREMENT INTO WORD
00001DD6  141A                    1552      MOVE.B      (A2)+, D2
00001DD8  E15A                    1553      ROL         #8, D2
00001DDA  1412                    1554      MOVE.B      (A2), D2
00001DDC  534A                    1555      SUB         #1, A2
00001DDE  6100 0152               1556      BSR         OUTPUT_HEX
00001DE2                          1557      
00001DE2                          1558      
00001DE2  548A                    1559      ADD.L       #2, A2      *IDCREMENT INTO NEXT WORK
00001DE4  141A                    1560      MOVE.B      (A2)+, D2
00001DE6  E15A                    1561      ROL         #8, D2
00001DE8  1412                    1562      MOVE.B      (A2), D2
00001DEA  534A                    1563      SUB         #1, A2
00001DEC  6100 0144               1564      BSR         OUTPUT_HEX
00001DF0  4E75                    1565      RTS
00001DF2                          1566      
00001DF2                          1567  IMME_7  *FOR NOW ONLY WORKING WITH IMMEDIATE HEX VALUES
00001DF2  4EB9 00001F88           1568      JSR         POUND
00001DF8  4EB9 00001FEA           1569      JSR         CASH
00001DFE                          1570      
00001DFE  548A                    1571      ADD.L       #2, A2
00001E00  141A                    1572      MOVE.B      (A2)+, D2
00001E02  E15A                    1573      ROL         #8, D2
00001E04  1412                    1574      MOVE.B      (A2), D2
00001E06  534A                    1575      SUB         #1, A2
00001E08  6100 0128               1576      BSR         OUTPUT_HEX
00001E0C                          1577      
00001E0C                          1578      
00001E0C                          1579      
00001E0C                          1580      *IDEA IS TO HAVE A FLAG HERE TO SEE IF THE DATA IS GONNA BE A LONG
00001E0C                          1581      *THEN BRANCH TO THE BELOW THREE COMMANDS IF THE IMMEDIATE DATA IS A LONG
00001E0C                          1582      
00001E0C  4E75                    1583      RTS
00001E0E                          1584  
00001E0E                          1585  GET_SIZE
00001E0E  4EB9 00001F90           1586      JSR         DOT
00001E14  B83C 0001               1587      CMP.B       #1, D4
00001E18  6700 018C               1588      BEQ         BYTE
00001E1C  B83C 0003               1589      CMP.B       #3, D4
00001E20  6700 0176               1590      BEQ         WORD
00001E24  B83C 0002               1591      CMP.B       #2, D4
00001E28  6700 018A               1592      BEQ         LONG  
00001E2C  4E75                    1593      RTS
00001E2E                          1594      
00001E2E                          1595  GET_REG ******************
00001E2E  2205                    1596      MOVE.L      D5, D1 
00001E30  4EB8 12DC               1597      JSR         CONVERT_TO_ASCII
00001E34  16C1                    1598      MOVE.B      D1, (A3)+
00001E36  4E75                    1599      RTS
00001E38                          1600      
00001E38                          1601  GET_OPMODE
00001E38  4EB9 00001F90           1602      JSR         DOT
00001E3E  B83C 0003               1603      CMP.B       #3, D4
00001E42  6700 0154               1604      BEQ         WORD
00001E46  B83C 0007               1605      CMP.B       #7, D4
00001E4A  6700 0168               1606      BEQ         LONG
00001E4E  4E75                    1607      RTS
00001E50                          1608      
00001E50                          1609  GET_OPMODE_MATH
00001E50  4EB9 00001F90           1610      JSR         DOT
00001E56  B83C 0000               1611      CMP.B       #0, D4
00001E5A  6700 014A               1612      BEQ         BYTE
00001E5E  B83C 0004               1613      CMP.B       #4, D4
00001E62  6700 0142               1614      BEQ         BYTE
00001E66  B83C 0001               1615      CMP.B       #1, D4
00001E6A  6700 012C               1616      BEQ         WORD
00001E6E  B83C 0005               1617      CMP.B       #5, D4
00001E72  6700 0124               1618      BEQ         WORD
00001E76  B83C 0002               1619      CMP.B       #2, D4
00001E7A  6700 0138               1620      BEQ         LONG
00001E7E  B83C 0006               1621      CMP.B       #6, D4
00001E82  6700 0130               1622      BEQ         LONG
00001E86  4E75                    1623      RTS
00001E88                          1624      
00001E88                          1625  GET_DATA ******************
00001E88  4EB9 00001F88           1626      JSR         POUND
00001E8E  BA3C 0000               1627      CMP.B       #0, D5
00001E92  6700 0008               1628      BEQ         PRINT_8
00001E96  2205                    1629      MOVE.L      D5, D1
00001E98  16C1                    1630      MOVE.B      D1, (A3)+
00001E9A  4E75                    1631      RTS
00001E9C                          1632      
00001E9C                          1633  PRINT_8 ********
00001E9C  7208                    1634      MOVE.L      #8, D1
00001E9E  16C1                    1635      MOVE.B      D1, (A3)+
00001EA0  4E75                    1636      RTS
00001EA2                          1637      
00001EA2                          1638  GET_SIZE_ADDI
00001EA2  4EB9 00001F90           1639      JSR         DOT
00001EA8  B83C 0000               1640      CMP.B       #0, D4
00001EAC  6700 00F8               1641      BEQ         BYTE
00001EB0  B83C 0001               1642      CMP.B       #1, D4
00001EB4  6700 00E2               1643      BEQ         WORD
00001EB8  B83C 0002               1644      CMP.B       #2, D4
00001EBC  6700 00F6               1645      BEQ         LONG  
00001EC0  4E75                    1646      RTS
00001EC2                          1647      
00001EC2                          1648  TYPE_CHOOSER
00001EC2  B83C 0000               1649      CMP.B       #0, D4      *IF IMMEDIATE
00001EC6  67C0                    1650      BEQ         GET_DATA    *IF BRANCHED  ->  #1 IS NOW PRINTED
00001EC8  B83C 0001               1651      CMP.B       #1, D4      *IF A DATA REG
00001ECC  6700 FEA4               1652      BEQ         DATA_0
00001ED0  4E75                    1653      RTS
00001ED2                          1654      
00001ED2                          1655  PRINT_BCC
00001ED2  B83C 0004               1656      CMP.B       #4, D4
00001ED6  6700 011A               1657      BEQ         CC
00001EDA  B83C 000E               1658      CMP.B       #14, D4
00001EDE  6700 011A               1659      BEQ         GT
00001EE2  B83C 000F               1660      CMP.B       #15, D4
00001EE6  6700 011A               1661      BEQ         LE
00001EEA  4E75                    1662      RTS
00001EEC                          1663      
00001EEC                          1664  REG_SIZE
00001EEC  4EB9 00001F90           1665      JSR         DOT
00001EF2  B83C 0000               1666      CMP.B       #0, D4
00001EF6  6700 00A0               1667      BEQ         WORD
00001EFA  B83C 0001               1668      CMP.B       #1, D4
00001EFE  6700 00B4               1669      BEQ         LONG
00001F02  4E75                    1670      RTS
00001F04                          1671  MODE_CHOOSER
00001F04  B83C 0007               1672      CMP.B       #7, D4
00001F08  6700 0004               1673      BEQ         NEW_MODE
00001F0C  4E75                    1674      RTS
00001F0E                          1675      
00001F0E                          1676  NEW_MODE
00001F0E  BA3C 0000               1677      CMP.B       #0, D5 *CHECK REGISTER(D5), WORD ADDRESS?
00001F12  6700 001A               1678      BEQ         TO_FIVE *CHANGE MODE (D4) TO 5
00001F16  BA3C 0001               1679      CMP.B       #1, D5 *CHECK REGISTER(D5), LONG ADDRESS?
00001F1A  6700 000E               1680      BEQ         TO_SIX *CHANGE MODE(D4) TO 6
00001F1E                          1681      
00001F1E  BA3C 0004               1682      CMP.B       #4, D5 *for immediate data
00001F22  6700 0004               1683      BEQ         TO_EIGHT
00001F26  4E75                    1684      RTS
00001F28                          1685      
00001F28                          1686  TO_EIGHT
00001F28  4E75                    1687      RTS
00001F2A                          1688      
00001F2A                          1689  TO_SIX  
00001F2A  5304                    1690      SUB.B      #1, D4
00001F2C  4E75                    1691      RTS
00001F2E                          1692  
00001F2E                          1693  TO_FIVE
00001F2E  5504                    1694      SUB.B      #2, D4
00001F30  4E75                    1695      RTS
00001F32                          1696  
00001F32                          1697  OUTPUT_HEX
00001F32                          1698      *OUTPUT 1ST
00001F32  3802                    1699      MOVE.W      D2, D4              *D7 = <1010 1111 0101 0111>
00001F34  E04C                    1700      LSR.W       #8, D4              *D7 = <0000 0000 1010 1111>
00001F36  E84C                    1701      LSR.W       #4, D4              *D7 = <0000 0000 0000 1010>
00001F38  1204                    1702      MOVE.B      D4, D1
00001F3A  6100 F3A0               1703      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
00001F3E  6100 003C               1704      BSR         ADD_CHAR         *print the char in D1  
00001F42                          1705      *OUTPUT 2ND
00001F42  3802                    1706      MOVE.W      D2, D4
00001F44  E94C                    1707      LSL.W       #4, D4              *SHIFT OUT FURTHEST RIGHT BIT
00001F46  E04C                    1708      LSR.W       #8, D4
00001F48  E84C                    1709      LSR.W       #4, D4  
00001F4A  1204                    1710      MOVE.B      D4, D1
00001F4C  6100 F38E               1711      BSR         CONVERT_TO_ASCII
00001F50  6100 002A               1712      BSR         ADD_CHAR
00001F54                          1713      *OUTPUT 3RD
00001F54  3802                    1714      MOVE.W      D2, D4
00001F56  E14C                    1715      LSL.W       #8, D4
00001F58  E04C                    1716      LSR.W       #8, D4
00001F5A  E84C                    1717      LSR.W       #4, D4
00001F5C  1204                    1718      MOVE.B      D4, D1
00001F5E  6100 F37C               1719      BSR         CONVERT_TO_ASCII
00001F62  6100 0018               1720      BSR         ADD_CHAR
00001F66                          1721      *OUTPUT 4TH
00001F66  3802                    1722      MOVE.W      D2, D4  *D7 = <1010 1111 0101 0111>
00001F68  E14C                    1723      LSL.W       #8, D4  *     <0101 0111 0000 0000>
00001F6A  E94C                    1724      LSL.W       #4, D4  *     <0111 0000 0000 0000>
00001F6C  E04C                    1725      LSR.W       #8, D4  *     <
00001F6E  E84C                    1726      LSR.W       #4, D4
00001F70  1204                    1727      MOVE.B      D4, D1
00001F72  6100 F368               1728      BSR         CONVERT_TO_ASCII
00001F76  6100 0004               1729      BSR         ADD_CHAR
00001F7A  4E75                    1730      RTS
00001F7C                          1731                                     *continue converting            
00001F7C                          1732  ADD_CHAR ********
00001F7C  16C1                    1733      MOVE.B      D1, (A3)+
00001F7E  4E75                    1734      RTS
00001F80                          1735  
00001F80                          1736  COMMA
00001F80  16F9 0000726E           1737      MOVE.B      M_COMMA, (A3)+
00001F86  4E75                    1738      RTS
00001F88                          1739      
00001F88                          1740  POUND
00001F88  16F9 00007270           1741      MOVE.B      M_POUND, (A3)+
00001F8E  4E75                    1742      RTS
00001F90                          1743          
00001F90                          1744  DOT
00001F90  16F9 00007272           1745      MOVE.B      M_DOT, (A3)+
00001F96  4E75                    1746      RTS   
00001F98                          1747  
00001F98                          1748  WORD
00001F98  16F9 00007274           1749      MOVE.B      M_WORD, (A3)+
00001F9E  4EB9 00001FE2           1750      JSR         SPACE
00001FA4  4E75                    1751      RTS
00001FA6                          1752  
00001FA6                          1753  BYTE
00001FA6  16F9 00007276           1754      MOVE.B      M_BYTE, (A3)+
00001FAC  4EB9 00001FE2           1755      JSR         SPACE
00001FB2  4E75                    1756      RTS
00001FB4                          1757      
00001FB4                          1758  LONG
00001FB4  16F9 00007278           1759      MOVE.B      M_LONG, (A3)+
00001FBA                          1760      
00001FBA  4EB9 00001FE2           1761      JSR         SPACE
00001FC0  4E75                    1762      RTS
00001FC2                          1763      
00001FC2                          1764  OPEN
00001FC2  16F9 0000727A           1765      MOVE.B      M_OPEN, (A3)+
00001FC8  4E75                    1766      RTS
00001FCA                          1767  
00001FCA                          1768  CLOSE
00001FCA  16F9 0000727C           1769      MOVE.B      M_CLOSE, (A3)+
00001FD0  4E75                    1770      RTS
00001FD2                          1771      
00001FD2                          1772  PLUS
00001FD2  16F9 0000727E           1773      MOVE.B      M_PLUS, (A3)+
00001FD8  4E75                    1774      RTS
00001FDA                          1775      
00001FDA                          1776  SUB
00001FDA  16F9 00007280           1777      MOVE.B      M_SUB, (A3)+
00001FE0  4E75                    1778      RTS
00001FE2                          1779      
00001FE2                          1780  SPACE
00001FE2  16F9 000071EE           1781      MOVE.B      M_SPACE, (A3)+
00001FE8  4E75                    1782      RTS    
00001FEA                          1783      
00001FEA                          1784  CASH
00001FEA  16F9 0000726C           1785      MOVE.B      M_CASH, (A3)+
00001FF0  4E75                    1786      RTS
00001FF2                          1787  
00001FF2                          1788  CC
00001FF2  16F9 00007286           1789      MOVE.B      M_CC, (A3)+
00001FF8  4E75                    1790      RTS
00001FFA                          1791  GT
00001FFA  16F9 00007289           1792      MOVE.B      M_GT, (A3)+
00002000  4E75                    1793      RTS
00002002                          1794  
00002002                          1795  LE
00002002  16F9 0000728C           1796      MOVE.B      M_LE, (A3)+
00002008  4E75                    1797      RTS
0000200A                          1798      
0000200A                          1799  SLASH
0000200A  16F9 0000728F           1800      MOVE.B      M_SLASH, (A3)+
00002010  4E75                    1801      RTS
00002012                          1802      
00002012                          1803  INVALID
00002012  16BC 0000               1804      MOVE.B      #00, (A3)
00002016  6000 F1CE               1805      BRA         INVALID_OPCODE
0000201A                          1806      
0000201A                          1807  
0000201A  =0000000D               1808  CR      EQU     $0D
0000201A  =0000000A               1809  LF      EQU     $0A
0000201A                          1810  
0000201A                          1811  
0000201A                          1812  
0000201A                          1813  
0000201A                          1814  
0000201A                          1815  
0000201A                          1816  
0000201A                          1817  
0000201A                          1818  
0000201A                          1819  
0000201A                          1820  
0000201A                          1821  
0000201A                          1822  
0000201A                          1823  
0000201A                          1824  
0000201A                          1825  
0000201A                          1826  
0000201A                          1827  
0000201A                          1828  -------------------- end include --------------------
0000201A                          1829      INCLUDE         'demo_test.x68'
0000201A                          1830  
0000201A  =00007000               1831  start       EQU $00007000   * ORG and END address
0000201A                          1832  
0000201A                          1833  
00007000                          1834          ORG start
00007000                          1835  
00007000                          1836  
00007000  4E71                    1837          NOP         *Required
00007002  4E75                    1838          RTS         *Required
00007004                          1839  
00007004                          1840  
00007004  D441                    1841  add_start   ADD.W   D1,D2
00007006  0641 4E71               1842                  ADDI.W  #$4E71,D1
0000700A  5E87                    1843          ADDQ.L  #07,D7      
0000700C  D6DE                    1844          ADDA.W  (A6)+,A3
0000700E  DDFC 3000AAAA           1845          ADDA.L  #$3000AAAA,A6
00007014  0685 D50000AA           1846          ADDI.L  #$D50000AA,D5
0000701A  0646 5555               1847          ADDI.W  #$5555,D6
0000701E  0600 00FE               1848          ADDI.B  #$FE,D0
00007022  9441                    1849                  SUB.W   D1,D2
00007024                          1850  
00007024  1200                    1851  moves       MOVE.B  D0,D1
00007026  33CE F30045BB           1852          MOVE.W  A6,$F30045BB
0000702C  2000                    1853          MOVE.L  D0,D0
0000702E  2CC7                    1854          MOVE.L  D7,(A6)+
00007030  36BC FFD0               1855          MOVE.W  #$FFD0,(A3)
00007034  23F9 C00022AA 3000A0F8  1856          MOVE.L  $C00022AA,$3000A0F8
0000703E  2B08                    1857          MOVE.L  A0,-(A5)
00007040  3056                    1858          MOVEA.W (A6),A0
00007042  48A7 07E0               1859          MOVEM.W A0/A1/A2/D5/D6/D7,-(SP)
00007046  4CD8 1B07               1860          MOVEM.L (A0)+,D0/D1/D2/A4/A3/A0/A1
0000704A  7401                    1861          MOVEQ   #1,D2
0000704C                          1862          
0000704C  C6B9 8000A000           1863  ands        AND.L   $8000A000,D3
00007052  E128                    1864  shifts      LSL.B   D0,D0
00007054  E848                    1865          LSR.W   #4,D0
00007056  E3DA                    1866          LSL.W   (A2)+
00007058  EC27                    1867          ASR.B   D6,D7
0000705A  EB27                    1868          ASL.B   D5,D7
0000705C  E5BB                    1869  rolls       ROL.L   D2,D3
0000705E  E89E                    1870          ROR.L   #4,D6
00007060                          1871  
00007060  4204                    1872  clear       CLR.B   D4
00007062  45F9 DC00FF00           1873  load_addr   LEA $DC00FF00,A2
00007068  49D5                    1874          LEA (A5),A4
0000706A                          1875  
0000706A  BA13                    1876  compares    CMP.B   (A3),D5
0000706C  B4B9 ABC0FF00           1877          CMP.L   $ABC0FF00,D2
00007072  B8C2                    1878          CMPA.W  D2,A4
00007074                          1879          
00007074                          1880  
00007074                          1881  
00007074  4E93                    1882  jmplabel        JSR (A3)        * Address register indirect
00007076  64E8                    1883          BCC clear       
00007078  6EF0                    1884          BGT compares        
0000707A  6F00 0002               1885          BLE multiply
0000707E                          1886          
0000707E  C7C0                    1887  multiply    MULS    D0,D3       *Optional instruction
00007080  C1D6                    1888          MULS    (A6),D0     *Optional instruction
00007082  C3FC 4567               1889          MULS    #$4567,D1   *Optional instruction
00007086  8ADB                    1890          DIVU    (A3)+,D5    *Optional instruction
00007088  4E71                    1891          NOP
0000708A  4E71                    1892          NOP
0000708C  9882                    1893          SUB.L   D2,D4
0000708E  9E93                    1894          SUB.L   (A3),D7
00007090                          1895      
00007090                          1896  
00007090                          1897  
00007090                          1898  
00007090                          1899  
00007090                          1900  
00007090                          1901  
00007090                          1902  
00007090                          1903  
00007090                          1904  
00007090                          1905  
00007090                          1906  
00007090                          1907  
00007090                          1908  -------------------- end include --------------------
00007090                          1909  END
00007090  43F9 000071DF           1910      LEA             M_END,A1
00007096  103C 000E               1911      MOVE.B          #14,D0
0000709A  4E4F                    1912      TRAP            #15
0000709C  FFFF FFFF               1913      SIMHALT             ; halt simulator
000070A0                          1914  
000070A0  =0000000D               1915  CR          EQU     $0D
000070A0  =0000000A               1916  LF          EQU     $0A
000070A0                          1917  
000070A0= 50 6C 65 61 73 65 ...   1918  M_INPUT_START DC.B 'Please enter starting memory address in hexadecimal:',CR,LF,0
000070D7= 50 6C 65 61 73 65 ...   1919  M_INPUT_END   DC.B 'Please enter ending memory address in hexadecimal:',CR,LF,0
0000710C= 49 6E 76 61 6C 69 ...   1920  M_INVALID     DC.B 'Invalid value. Please enter a valid value: ',CR,LF,0
0000713A= 45 71 75 61 6C 20 ...   1921  M_EQUAL       DC.B 'Equal values. No memory read. Please enter new values',CR,LF,0
00007172= 44 41 54 41 20 20 ...   1922  M_DATA        DC.B 'DATA    ',0
0000717B= 20 20 20 20 00          1923  M_TAB         DC.B '    ',0
00007180= 50 72 65 73 73 20 ...   1924  M_PRESS_CONT  DC.B 'Press any key to continue',0
0000719A= 46 69 6E 69 73 68 ...   1925  M_FINISHED    DC.B 'Finished Reading Memory',CR,LF,0
000071B4= 57 6F 75 6C 64 20 ...   1926  M_CONTINUE    DC.B 'Would you like to read memory again? (Y/N)',0
000071DF= 50 72 6F 67 72 61 ...   1927  M_END         DC.B 'Program Exit',CR,LF,0
000071EE                          1928  
000071EE  =00000500               1929  STRING_START    EQU     $0500
000071EE  =00000400               1930  DATA_START      EQU     $0400
000071EE                          1931  
000071EE  =00000100               1932  MEM_START       EQU     $0100
000071EE  =00000200               1933  MEM_END         EQU     $0200
000071EE                          1934  
000071EE= 20 00                   1935  M_SPACE       DC.B  ' ',0
000071F0= 0D 0A 00                1936  M_NEW_LINE    DC.B  '',CR,LF,0
000071F3                          1937  
000071F3= 41 44 44 49 00          1938  ADDI    DC.B    'ADDI',0
000071F8= 4D 4F 56 45 00          1939  MOVE    DC.B    'MOVE',0
000071FD= 4D 4F 56 45 41 00       1940  MOVEA   DC.B    'MOVEA',0
00007203= 43 4C 52 00             1941  OPCLR   DC.B    'CLR',0
00007207= 4C 45 41 00             1942  OPLEA   DC.B    'LEA',0
0000720B= 4A 53 52 00             1943  OPJSR   DC.B    'JSR',0
0000720F= 4E 4F 50 00             1944  OPNOP   DC.B    'NOP',0
00007213= 52 54 53 00             1945  OPRTS   DC.B    'RTS',0
00007217= 4D 4F 56 45 4D 00       1946  MOVEM   DC.B    'MOVEM',0
0000721D= 41 44 44 51 00          1947  ADDQ    DC.B    'ADDQ',0
00007222= 42 00                   1948  Bcc     DC.B    'B',0
00007224= 4D 4F 56 45 51 00       1949  MOVEQ   DC.B    'MOVEQ',0
0000722A= 44 49 56 55 00          1950  DIVU    DC.B    'DIVU',0
0000722F= 4F 52 00                1951  OR      DC.B    'OR',0
00007232= 53 55 42 00             1952  OPSUB   DC.B    'SUB',0
00007236= 43 4D 50 00             1953  CMP     DC.B    'CMP',0
0000723A= 4D 55 4C 53 00          1954  MULS    DC.B    'MULS',0
0000723F= 41 4E 44 00             1955  AND     DC.B    'AND',0
00007243= 41 44 44 00             1956  ADD     DC.B    'ADD',0
00007247= 41 44 44 41 00          1957  ADDA    DC.B    'ADDA',0
0000724C= 4C 53 4C 00             1958  LSL     DC.B    'LSL',0
00007250= 4C 53 52 00             1959  LSR     DC.B    'LSR',0
00007254= 41 53 4C 00             1960  ASL     DC.B    'ASL',0
00007258= 41 53 52 00             1961  ASR     DC.B    'ASR',0
0000725C= 52 4F 4C 00             1962  ROL     DC.B    'ROL',0
00007260= 52 4F 52 00             1963  ROR     DC.B    'ROR',0
00007264= 49 4E 56 41 4C 49 ...   1964  M_INVAL DC.B 'INVALID',0
0000726C= 24 00                   1965  M_CASH  DC.B '$',0
0000726E                          1966  *M_SPACE DC.B ' ',0
0000726E= 2C 00                   1967  M_COMMA DC.B ',',0
00007270= 23 00                   1968  M_POUND DC.B '#',0
00007272= 2E 00                   1969  M_DOT   DC.B '.',0
00007274= 57 00                   1970  M_WORD  DC.B 'W',0
00007276= 42 00                   1971  M_BYTE  DC.B 'B',0
00007278= 4C 00                   1972  M_LONG  DC.B 'L',0
0000727A= 28 00                   1973  M_OPEN  DC.B '(',0
0000727C= 29 00                   1974  M_CLOSE DC.B ')',0
0000727E= 2B 00                   1975  M_PLUS  DC.B '+',0
00007280= 2D 00                   1976  M_SUB   DC.B '-',0
00007282= 44 00                   1977  M_DREG  DC.B 'D',0
00007284= 41 00                   1978  M_AREG  DC.B 'A',0
00007286= 43 43 00                1979  M_CC    DC.B 'CC',0
00007289= 47 54 00                1980  M_GT    DC.B 'GT',0
0000728C= 4C 45 00                1981  M_LE    DC.B 'LE',0
0000728F= 2F 00                   1982  M_SLASH DC.B '/',0
00007291                          1983  
00007291                          1984  
00007291                          1985  STOP:
00007291                          1986      END    MAIN

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSL_6              1DCE
ABSW_5              1DB8
ADD                 7243
ADDA                7247
ADDI                71F3
ADDI_2              1D8E
ADDI_ERROR_CHECK    1CDC
ADDM_4              1DAC
ADDP_3              1DA0
ADDQ                721D
ADDRESS_REGISTERS   1C54
ADDR_1              1D80
ADD_CHAR            1F7C
ADD_ERROR_CHECK     1CC2
ADD_START           7004
ALPH_CHAR           12EE
AND                 723F
ANDS                704C
ASL                 7254
ASR                 7258
BCC                 7222
BYEBYE              1CB4
BYTE                1FA6
CASH                1FEA
CC                  1FF2
CHECK_TYPE          1C78
CLEAR               7060
CLOSE               1FCA
CMP                 7236
COMMA               1F80
COMMA_SPACE         1C8C
COMMA_SPACE2        1C9C
COMPARES            706A
CONTINUE_YN         118E
CONVERT_TO_ASCII    12DC
CR                  D
DATA                1324
DATA_0              1D72
DATA_START          400
DIVU                722A
DN_VERSION          17D2
DONE                1AFE
DONE_PRINTING       1CAC
DOT                 1F90
EA2                 1C28
EAP                 1BE4
EAS                 1BEC
EAT_INVALID         1D3A
EA_ADD              17B2
EA_ADDA             1928
EA_ADDI             186C
EA_ADDQ             18CE
EA_BCC              1B60
EA_CLR              1A2C
EA_CMP              1B06
EA_JSR              1B84
EA_LEA              19D4
EA_LSD              1A72
EA_MOVE             16AC
EA_MOVEA            1720
EA_MOVEM            1BC2
EA_MOVEQ            1778
EA_MULS             1982
EA_PRINT_ADDRESS    1C66
EA_SHIFT            1AC6
EA_VERSION          181C
EFFECTIVE_ADDRESSING  118E
END                 7090
END_PRINT_DATA_LOOP  124C
EQUAL_ERROR         1136
FOR_2               1C56
FOR_LOOP            1C32
GET_DATA            1E88
GET_NEXT_INPUT      105E
GET_OPMODE          1E38
GET_OPMODE_MATH     1E50
GET_REG             1E2E
GET_SIZE            1E0E
GET_SIZE_ADDI       1EA2
GT                  1FFA
IMME_7              1DF2
IM_NEW_LINE         12FC
IM_SPACE            130A
INCREMENT_LINE      11DE
INPUT_END           1032
INPUT_START         1006
INVALID             2012
INVALID_CHAR_ERROR  10CA
INVALID_OPCODE      11E6
INVALID_OPCODE_CONT  11F6
JFF                 1C62
JFZ                 1C3E
JMPLABEL            7074
LE                  2002
LEA_ERROR_CHECK     1CEE
LF                  A
LOAD_ADDR           7062
LONG                1FB4
LSL                 724C
LSR                 7250
MAIN                1000
MEM_END             200
MEM_START           100
MODE_CHOOSER        1F04
MODE_JUMP           1D42
MOVE                71F8
MOVEA               71FD
MOVEM               7217
MOVEM_ERROR_CHECK   1D18
MOVEQ               7224
MOVES               7024
MOVE_ERROR_CHECK    1CB8
MULS                723A
MULTIPLY            707E
M_AREG              7284
M_BYTE              7276
M_CASH              726C
M_CC                7286
M_CLOSE             727C
M_COMMA             726E
M_CONTINUE          71B4
M_DATA              7172
M_DOT               7272
M_DREG              7282
M_END               71DF
M_EQUAL             713A
M_FINISHED          719A
M_GT                7289
M_INPUT_END         70D7
M_INPUT_START       70A0
M_INVAL             7264
M_INVALID           710C
M_LE                728C
M_LONG              7278
M_NEW_LINE          71F0
M_OPEN              727A
M_PLUS              727E
M_POUND             7270
M_PRESS_CONT        7180
M_SLASH             728F
M_SPACE             71EE
M_SUB               7280
M_TAB               717B
M_WORD              7274
NEW_MODE            1F0E
NUMERIC_CHAR        12E8
OP0000              13AC
OP0001              13BC
OP0010              13CC
OP0011              13D0
OP0100              1408
OP0101              14B0
OP0110              14C0
OP0111              14DA
OP1000              14EA
OP1001              1520
OP1011              1530
OP1100              1540
OP1101              1578
OP1110              15B0
OPCLR               7203
OPEN                1FC2
OPJSR               720B
OPLEA               7207
OPNOP               720F
OPRTS               7213
OPSUB               7232
OP_JTAB             134A
OR                  722F
OUTPUT_CHAR         12F4
OUTPUT_D1B          1254
OUTPUT_HEX          1F32
PASTE_3             168A
PASTE_4             1692
PASTE_5             169C
PLUS                1FD2
POUND               1F88
PRESS_TO_CONTINUE   11C0
PRE_READ_MEMORY     1162
PRINT_8             1E9C
PRINT_ADDRESS       121E
PRINT_ADDRESS_LOOP  1224
PRINT_BCC           1ED2
PRINT_CURRENT       1C42
PRINT_DATA          11FE
PRINT_DATA_ADDRESS  1216
PRINT_DATA_LOOP     1238
PRINT_LIST          1C20
PRINT_OPCODE        1296
PRINT_OPCODE_EA     127A
READ_CHAR           1060
READ_CHAR_LOOP      1082
READ_MEMORY         1118
READ_MEMORY_CONT    117C
READ_MEMORY_LOOP    1164
REG_SIZE            1EEC
REMOVE_ZERO         107C
REMOVE_ZEROES       106A
RESTART             12AA
RETURN_TO_SUBROUTINE  12DA
ROL                 725C
ROLLS               705C
ROR                 7260
SHIFTS              7052
SLASH               200A
SPACE               1FE2
START               7000
STOP                7291
STRING_START        500
SUB                 1FDA
SWAP_VALUES         1146
TAB                 1316
TEST                1104
TO_EIGHT            1F28
TO_FIVE             1F2E
TO_SIX              1F2A
TYPE_CHOOSER        1EC2
VALIDATE_START_END  1124
VALID_CHAR          10F4
VALID_LETTER_LC     10EC
VALID_LETTER_UC     10E4
VALID_NUMBER        10DC
VALID_OPCODE        1270
VERIFY_OPCODE       1332
WORD                1F98
_ADD                1590
_ADDA               15A0
_AND                1568
_ASD                1616
_ASL                1630
_ASR                1640
_CLR                1450
_DIVU               1502
_JSR                1470
_LEA                1460
_LSD                15DE
_LSL                15F6
_LSR                1606
_MOVE               13E8
_MOVEA              13F8
_MOVEM              14A0
_MULS               1558
_NOP                1480
_OR                 1512
_ROD                1650
_ROL                166A
_ROR                167A
_RTS                1490
