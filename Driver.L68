00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/2/2016 1:20:07 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  MAIN:                  ; first instruction of program
00001000  1401                       9      MOVE.B          D1, D2
00001002  6000 0002                 10      BRA             INPUT_START
00001006                            11      
00001006                            12      INCLUDE         'Main.X68'
00001006                            13      
00001006                            14  
00001006                            15  INPUT_START
00001006  6000 0100                 16      BRA         TEST
0000100A  43F9 00003406             17      LEA         M_INPUT_START,A1      *load message
00001010  103C 000E                 18      MOVE.B      #14,D0          *display string
00001014  4E4F                      19      TRAP        #15             *output string
00001016  227C 00000300             20      MOVE.L      #$0300,A1       *set address of register A1 for string
0000101C  103C 0002                 21      MOVE.B      #2,D0           *input string into A1 Trap
00001020  4E4F                      22      TRAP        #15             *input string from user
00001022  6100 0040                 23      BSR         READ_CHAR       *check for valid input
00001026  23C3 00000100             24      MOVE.L      D3,MEM_START    *put the starting address in memory
0000102C  B87C 0000                 25      CMP         #0,D4           *check the result register (D4)
00001030  6700 0004                 26      BEQ         INPUT_END       *valid value. read the ending value
00001034  60D0                      27      BRA         INPUT_START     *invalid value. try inputting start value again    
00001036                            28      
00001036                            29  INPUT_END
00001036  43F9 0000343D             30      LEA         M_INPUT_END,A1  *load message
0000103C  103C 000E                 31      MOVE.B      #14,D0          *display string
00001040  4E4F                      32      TRAP        #15             *output string
00001042  227C 00000300             33      MOVE.L      #$0300,A1       *set address of register A1 for string
00001048  103C 0002                 34      MOVE.B      #2,D0           *input string into A1 Trap
0000104C  4E4F                      35      TRAP        #15             *input string from user
0000104E  6100 0014                 36      BSR         READ_CHAR       *check for valid input
00001052  23C3 00000200             37      MOVE.L      D3,MEM_END      *put ending address into memory
00001058  B87C 0000                 38      CMP         #0,D4           *check the result register (D4)
0000105C  6700 00BE                 39      BEQ         READ_MEMORY     *valid value. read the ending value
00001060  60D4                      40      BRA         INPUT_END       *invalid value. try inputting start value again    
00001062                            41      
00001062                            42  GET_NEXT_INPUT
00001062  4E75                      43      RTS
00001064                            44  
00001064                            45  READ_CHAR                       *verify that string is valid (all hexadecimal digits)
00001064  4243                      46      CLR         D3              *D3 will act as the total result
00001066  2849                      47      MOVE.L      A1,A4           *the stop address
00001068  143C 0006                 48      MOVE.B      #6,D2           *put 6 in D2
0000106C  D8C2                      49      ADD.W       D2,A4           *A4 is now the stop address(A4)
0000106E                            50      
0000106E                            51  REMOVE_ZEROES
0000106E  4281                      52      CLR.L       D1              *D1 will act as the temporary value
00001070  1211                      53      MOVE.B      (A1),D1         *read the byte from string
00001072  143C 0030                 54      MOVE.B      #$30,D2         *put ascii zero in D2
00001076  B202                      55      CMP.B       D2,D1           *compare ascii zero and value of D1
00001078  6700 0006                 56      BEQ         REMOVE_ZERO     *skip over that character   
0000107C  6000 0008                 57      BRA         READ_CHAR_LOOP  *begin converting characters to numerical values
00001080                            58  REMOVE_ZERO
00001080  5289                      59      ADD.L       #1,A1           *increment string start address
00001082  528C                      60      ADD.L       #1,A4           *increment string end address
00001084  60E8                      61      BRA         REMOVE_ZEROES   *loop back and keep removing zeroes
00001086                            62  READ_CHAR_LOOP     
00001086  4281                      63      CLR.L       D1              *D1 will act as the temporary value
00001088  1211                      64      MOVE.B      (A1),D1         *read the byte from string
0000108A  B27C 0000                 65      CMP         #0,D1           *compare 00 (NULL) and the byte ascii value in D1
0000108E  67D2                      66      BEQ         GET_NEXT_INPUT    *if you reached the end of the string, end loop
00001090                            67      
00001090  143C 0030                 68      MOVE.B      #$30,D2         *put ascii zero in D2
00001094  B202                      69      CMP.B       D2,D1           *compare ascii zero and value of D1
00001096  6D00 0036                 70      BLT         INVALID_CHAR_ERROR *branch on invalid (too small) ascii value   
0000109A  143C 0066                 71      MOVE.B      #$66,D2         *put ascii f in D2
0000109E  B202                      72      CMP.B       D2,D1           *compare ascii f and value of D1
000010A0  6E2C                      73      BGT.B       INVALID_CHAR_ERROR *branch on invalid ascii value
000010A2  143C 0061                 74      MOVE.B      #$61,D2         *put ascii a in D2
000010A6  B202                      75      CMP.B       D2,D1           *compare ascii a and value of D1
000010A8  6C00 0046                 76      BGE         VALID_LETTER_LC *value is between a and f. Loop back.
000010AC                            77      
000010AC  143C 0039                 78      MOVE.B      #$39,D2         *put ascii 9 in D2
000010B0  B202                      79      CMP.B       D2,D1           *compare ascii 9 and value of D1
000010B2  6F00 002C                 80      BLE         VALID_NUMBER    *value between 0 and 9. Loop back.
000010B6                            81  
000010B6  143C 0041                 82      MOVE.B      #$41,D2         *put ascii A into D2
000010BA  B202                      83      CMP.B       D2,D1           *compare ascii A and value of D1
000010BC  6D00 0010                 84      BLT         INVALID_CHAR_ERROR    *value between 9 and A (Invalid)
000010C0                            85      
000010C0  143C 0046                 86      MOVE.B      #$46,D2         *put ascii F into D2
000010C4  B202                      87      CMP.B       D2,D1           *compare ascii F and value of D1
000010C6  6E00 0006                 88      BGT         INVALID_CHAR_ERROR    *value between F and a (Invalid)
000010CA                            89           
000010CA  6000 001C                 90      BRA         VALID_LETTER_UC *value is between A and F        
000010CE                            91  INVALID_CHAR_ERROR   
000010CE  43F9 00003472             92      LEA         M_INVALID,A1    *load error message
000010D4  103C 000E                 93      MOVE.B      #14,D0          *display string trap
000010D8  4E4F                      94      TRAP        #15             *output error message
000010DA  183C 0001                 95      MOVE.B      #1,D4           *put invalid output in result register
000010DE  4E75                      96      RTS
000010E0                            97  VALID_NUMBER
000010E0  0401 0030                 98      SUB.B       #$30,D1         *get actual value from ascii value
000010E4  6000 0012                 99      BRA         VALID_CHAR      *read the next char in string
000010E8                           100  VALID_LETTER_UC
000010E8  0401 0037                101      SUB.B       #$37,D1         *get actual value from ascii value
000010EC  6000 000A                102      BRA         VALID_CHAR      *read the next char in string    
000010F0                           103  VALID_LETTER_LC
000010F0  0401 0057                104      SUB.B       #$57,D1         *get actual value from ascii value
000010F4  6000 0002                105      BRA         VALID_CHAR      *read the next char in string   
000010F8                           106  VALID_CHAR
000010F8  183C 0000                107      MOVE.B      #0,D4           *return valid value entry in D4    
000010FC  E98B                     108      LSL.L       #4,D3           *put hex digit in proper place
000010FE  D681                     109      ADD.L       D1,D3           *put new total in D3
00001100  5289                     110      ADD.L       #1,A1           *increment address
00001102  B8C9                     111      CMP         A1,A4           *if A1 > A4
00001104  6E80                     112      BGT         READ_CHAR_LOOP  *begin converting to float    
00001106  4E75                     113      RTS                         *loop back to INPUT_START || INPUT_END   
00001108                           114     
00001108                           115  TEST
00001108  23FC 00003000 00000100   116      MOVE.L      #$3000,MEM_START
00001112  23FC 00003300 00000200   117      MOVE.L      #$3300,MEM_END
0000111C                           118  READ_MEMORY   
0000111C  2479 00000100            119      MOVEA.L     MEM_START,A2    *A2 will be the starting/current address
00001122  2679 00000200            120      MOVEA.L     MEM_END,A3      *A3 will act as the ending address
00001128                           121      
00001128                           122  VALIDATE_START_END
00001128  220A                     123      MOVE.L      A2,D1           *copy start address into D1
0000112A  240B                     124      MOVE.L      A3,D2           *copy end address into D2
0000112C  B441                     125      CMP         D1,D2           *compare start and end values
0000112E  6700 000A                126      BEQ         EQUAL_ERROR     *Start address is equal to end address
00001132  6D00 0016                127      BLT         SWAP_VALUES     *Start address is larger than end address
00001136  6000 002E                128      BRA         PRE_READ_MEMORY *begin reading memory
0000113A                           129      
0000113A                           130  EQUAL_ERROR
0000113A  43F9 000034A0            131      LEA         M_EQUAL,A1      *load error message
00001140  103C 000E                132      MOVE.B      #14,D0          *display string trap
00001144  4E4F                     133      TRAP        #15             *output error message
00001146  6000 FEBE                134      BRA         INPUT_START     *restart program (request ui again)
0000114A                           135      
0000114A                           136  SWAP_VALUES
0000114A  2239 00000100            137      MOVE.L      MEM_START,D1    *put starting address in D1
00001150  2439 00000200            138      MOVE.L      MEM_END,D2      *put ending address in D2
00001156  23C2 00000100            139      MOVE.L      D2,MEM_START    *swap the two values in memory
0000115C  23C1 00000200            140      MOVE.L      D1,MEM_END
00001162  2442                     141      MOVEA.L     D2,A2           *A2 will be the starting/current address
00001164  2641                     142      MOVEA.L     D1,A3           *A3 will act as the ending address
00001166                           143  PRE_READ_MEMORY
00001166  2C4A                     144      MOVE.L      A2,A6           *A6 will act as the current address for Data               
00001168                           145  READ_MEMORY_LOOP
00001168  2679 00000200            146      MOVE.L      MEM_END,A3        *put ending address in A3
0000116E  B6CA                     147      CMP         A2,A3             *compare the incrementing address and the end address
00001170  6D00 0020                148      BLT         CONTINUE_YN       *stop if the end address is reached
00001174                           149      
00001174  E05E                     150      ROR         #8,D6               *select correct byte
00001176  BC3C 001E                151      CMP.B       #30,D6              *see if maximum lines printed
0000117A  6C00 0048                152      BGE         PRESS_TO_CONTINUE
0000117E  E15E                     153      ROL         #8,D6   
00001180                           154  READ_MEMORY_CONT                    *continue reading memory (if branched)  
00001180  101A                     155      MOVE.B      (A2)+,D0          *get the value from incrementing address 
00001182  E148                     156      LSL.W       #8,D0             *make room for the next byte of A2
00001184  1012                     157      MOVE.B      (A2),D0          *copy the rest of A2 to D0  
00001186  538A                     158      SUB.L       #1, A2
00001188  47F9 00000500            159      LEA         STRING_START,A3   *A3 will act as the string address  
0000118E  6000 019C                160      BRA         VERIFY_OPCODE
00001192                           161      
00001192                           162      
00001192                           163          
00001192                           164  
00001192                           165  EFFECTIVE_ADDRESSING
00001192                           166  
00001192                           167  
00001192                           168  CONTINUE_YN
00001192  43F9 00003500            169      LEA         M_FINISHED,A1       *print out finished reading address
00001198  103C 000E                170      MOVE.B      #14,D0
0000119C  4E4F                     171      TRAP        #15
0000119E  43F9 0000351A            172      LEA         M_CONTINUE,A1        *ask the user if they want to read again
000011A4  103C 000E                173      MOVE.B      #14,D0
000011A8  4E4F                     174      TRAP        #15
000011AA  103C 0005                175      MOVE.B      #5,D0               *get user input
000011AE  4E4F                     176      TRAP        #15
000011B0  B23C 0059                177      CMP.B       #89,D1              *compare user input and ascii 'Y'
000011B4  6700 00FA                178      BEQ         RESTART             *
000011B8  B23C 0079                179      CMP.B       #121,D1             *compare user input with ascii 'y'
000011BC  6700 00F2                180      BEQ         RESTART
000011C0  6000 2234                181      BRA         END
000011C4                           182      
000011C4                           183  PRESS_TO_CONTINUE
000011C4  1C3C 0000                184      MOVE.B      #00,D6              *reset counter
000011C8  E19E                     185      ROL.L       #8,D6               *put byte back in place
000011CA  43F9 000034E6            186      LEA         M_PRESS_CONT,A1     *load press key to continue messageu
000011D0  103C 000E                187      MOVE.B      #14,D0              *load into D0
000011D4  4E4F                     188      TRAP        #15                 *display message
000011D6  103C 0005                189      MOVE.B      #5,D0               *read single character from keyboard
000011DA  4E4F                     190      TRAP        #15    
000011DC  6100 0118                191      BSR         IM_NEW_LINE            *add new line
000011E0  609E                     192      BRA         READ_MEMORY_CONT    *continue reading loop
000011E2                           193      
000011E2                           194  INCREMENT_LINE
000011E2  E09E                     195      ROR.L       #8,D6               *select correct byte
000011E4  5206                     196      ADD.B       #1,D6               *increment counter
000011E6  E19E                     197      ROL.L       #8,D6               *put byte back in place
000011E8  4E75                     198      RTS 
000011EA                           199      
000011EA                           200  INVALID_OPCODE
000011EA  BC3C 0008                201      CMP.B       #8,D6               *check the loop increment counter
000011EE  6D00 000A                202      BLT         INVALID_OPCODE_CONT *less than long length. continue       
000011F2  6100 000E                203      BSR         PRINT_DATA          *long amount of data. print it.
000011F6  6000 FF70                204      BRA         READ_MEMORY_LOOP    *read the next byte
000011FA                           205  INVALID_OPCODE_CONT  
000011FA  528A                     206      ADD.L       #1,A2               *increment current address  
000011FC  5206                     207      ADD.B       #1,D6               *increment counter
000011FE  6000 FF68                208      BRA         READ_MEMORY_LOOP    *data cap not reached. read next byte.    
00001202                           209      
00001202                           210  PRINT_DATA
00001202  1C3C 0000                211      MOVE.B      #00,D6              *reset the increment counter
00001206  6100 0012                212      BSR         PRINT_DATA_ADDRESS       *print the data address
0000120A  6100 0104                213      BSR         TAB                 *insert a space
0000120E  6100 010E                214      BSR         DATA                *print 'DATA'       
00001212  6100 0028                215      BSR         PRINT_DATA_LOOP     *print the data
00001216  61CA                     216      BSR         INCREMENT_LINE      *increment line counter (line was printed)
00001218  4E75                     217      RTS
0000121A                           218  
0000121A                           219  PRINT_DATA_ADDRESS
0000121A  280E                     220      MOVE.L      A6,D4               *put the address in D4
0000121C  4243                     221      CLR         D3                  *counter for long
0000121E  6000 0008                222      BRA         PRINT_ADDRESS_LOOP
00001222                           223  PRINT_ADDRESS
00001222  280E                     224      MOVE.L      A6,D4               *put the address in D4
00001224  4243                     225      CLR         D3                  *counter for long
00001226  2C4A                     226      MOVE.L      A2, A6
00001228                           227      
00001228                           228  PRINT_ADDRESS_LOOP
00001228  B67C 0004                229      CMP         #4,D3               *if long reached
0000122C  6C00 00A6                230      BGE         RETURN_TO_SUBROUTINE *exit loop
00001230  E19C                     231      ROL.L       #8,D4               *put ending byte at beginning
00001232  1204                     232      MOVE.B      D4,D1               *put byte in D1 for printing
00001234  6100 0024                233      BSR         OUTPUT_D1B          *print the first byte of D1
00001238  5203                     234      ADD.B       #1,D3               *increment D3 (loop counter)
0000123A  60EC                     235      BRA         PRINT_ADDRESS_LOOP  *repeat loop         
0000123C                           236           
0000123C                           237  PRINT_DATA_LOOP
0000123C  121E                     238      MOVE.B      (A6)+,D1            *get the data
0000123E  1401                     239      MOVE.B      D1,D2               *copy the data to D2
00001240  BDCA                     240      CMP.L       A2,A6               *if current address reached
00001242  6E00 000C                241      BGT         END_PRINT_DATA_LOOP *continue reading addresses 
00001246                           242                                      *otherwise keep printing the data
00001246  6100 0012                243      BSR         OUTPUT_D1B          *print byte in D1 in hex
0000124A                           244      *---print a space----*
0000124A  6100 00B8                245      BSR         IM_SPACE               *print a space                                
0000124E  60EC                     246      BRA         PRINT_DATA_LOOP     *repeat loop
00001250                           247  
00001250                           248  END_PRINT_DATA_LOOP
00001250  2C4A                     249      MOVE.L      A2,A6               *set new address for data/opcode
00001252  6100 00A2                250      BSR         IM_NEW_LINE            *end line
00001256  618A                     251      BSR         INCREMENT_LINE      *increment line printing counter
00001258  4E75                     252      RTS                             *repeat loop   
0000125A                           253   
0000125A                           254  OUTPUT_D1B
0000125A                           255      *print the left character
0000125A  1401                     256      MOVE.B      D1,D2               *copy D1 to D2
0000125C  E809                     257      LSR.B       #4,D1               *get rid of right nibble  
0000125E  6100 0076                258      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
00001262  6100 008A                259      BSR         OUTPUT_CHAR         *print the char in D1
00001266                           260      *print the right character
00001266  E90A                     261      LSL.B       #4,D2               *get rid of left nibble
00001268  E80A                     262      LSR.B       #4,D2               *put right nibble in place
0000126A  1202                     263      MOVE.B      D2,D1               *put right nibble in D1
0000126C  6100 0068                264      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
00001270  6100 007C                265      BSR         OUTPUT_CHAR         *print the char in D1
00001274  4E75                     266      RTS
00001276                           267  VALID_OPCODE
00001276  BC3C 0000                268      CMP.B       #00,D6              *if leftover data not printed
0000127A  6700 0004                269      BEQ         PRINT_OPCODE_EA     *print just the opcode
0000127E  6182                     270      BSR         PRINT_DATA          *print unreadable data
00001280                           271                                      *and the opcode
00001280                           272  PRINT_OPCODE_EA    
00001280  548A                     273      ADD.L       #02,A2              *increment the current address because word is valid
00001282                           274  
00001282  1C3C 0000                275      MOVE.B      #00,D6              *reset the increment counter
00001286  619A                     276      BSR         PRINT_ADDRESS       *print the data address
00001288  6100 0086                277      BSR         TAB                 *insert a space
0000128C  6100 000E                278      BSR         PRINT_OPCODE        *print out hte opcode and eA
00001290  6100 FF50                279      BSR         INCREMENT_LINE      *increment line counter (line was printed)
00001294  6100 0060                280      BSR         IM_NEW_LINE
00001298  6000 FECE                281      BRA         READ_MEMORY_LOOP    *read next byte.
0000129C                           282      
0000129C                           283  
0000129C                           284  PRINT_OPCODE
0000129C  43F9 00000500            285      LEA         STRING_START,A1     *put the starting address of the string into A1
000012A2  103C 000E                286      MOVE.B      #14,D0              *print null terminated string into A
000012A6  4E4F                     287      TRAP        #15                 *output to terminal
000012A8  47F9 00000500            288      lea         STRING_START,A3     *reset the current string pointer
000012AE  4E75                     289      RTS
000012B0                           290      
000012B0                           291  RESTART
000012B0  4280                     292      CLR.L       D0
000012B2  4281                     293      CLR.L       D1
000012B4  4282                     294      CLR.L       D2
000012B6  4283                     295      CLR.L       D3
000012B8  4284                     296      CLR.L       D4
000012BA  4285                     297      CLR.L       D5
000012BC  4286                     298      CLR.L       D6
000012BE  4287                     299      CLR.L       D7
000012C0  2040                     300      MOVE.L      D0,A0
000012C2  2240                     301      MOVE.L      D0,A1
000012C4  2440                     302      MOVE.L      D0,A2
000012C6  2640                     303      MOVE.L      D0,A3
000012C8  2840                     304      MOVE.L      D0,A4
000012CA  2A40                     305      MOVE.L      D0,A5
000012CC  2C40                     306      MOVE.L      D0,A6
000012CE  2E40                     307      MOVE.L      D0,A7
000012D0  6000 FD34                308      BRA         INPUT_START
000012D4                           309      
000012D4                           310  RETURN_TO_SUBROUTINE
000012D4  4E75                     311      RTS
000012D6                           312    
000012D6                           313  CONVERT_TO_ASCII
000012D6  B23C 0009                314      CMP.B       #9,D1           *compare value with 9
000012DA  6E00 000C                315      BGT         ALPH_CHAR       *convert to numeric ascii
000012DE  6000 0002                316      BRA         NUMERIC_CHAR    *convert to alphabetical ascii
000012E2                           317  NUMERIC_CHAR        
000012E2  0601 0030                318      ADD.B       #48,D1          *convert to ascii value
000012E6  4E75                     319      RTS                         *continue converting
000012E8                           320  ALPH_CHAR
000012E8  0601 0037                321      ADD.B       #55,D1          *convert to ascii value
000012EC  4E75                     322      RTS                         *continue converting            
000012EE                           323  OUTPUT_CHAR
000012EE  103C 0006                324      MOVE.B      #6,D0           *output whatever's in D1
000012F2  4E4F                     325      TRAP        #15
000012F4  4E75                     326      RTS
000012F6                           327  
000012F6                           328  
000012F6                           329  IM_NEW_LINE
000012F6  43F9 00003556            330      LEA         M_NEW_LINE,A1      *load new line
000012FC  103C 000E                331      MOVE.B      #14,D0          *load message
00001300  4E4F                     332      TRAP        #15             *display message
00001302  4E75                     333      RTS
00001304                           334  IM_SPACE
00001304  123C 0020                335      MOVE.B      #32,D1
00001308  103C 0006                336      MOVE.B      #6,D0
0000130C  4E4F                     337      TRAP        #15
0000130E  4E75                     338      RTS
00001310                           339  TAB
00001310  43F9 000034E1            340      LEA         M_TAB,A1
00001316  103C 000E                341      MOVE.B      #14,D0
0000131A  4E4F                     342      TRAP        #15
0000131C  4E75                     343      RTS
0000131E                           344  DATA
0000131E  43F9 000034D8            345      LEA         M_DATA,A1
00001324  103C 000E                346      MOVE.B      #14,D0
00001328  4E4F                     347      TRAP        #15
0000132A  4E75                     348      RTS
0000132C                           349      
0000132C                           350  
0000132C                           351  
0000132C                           352  
0000132C                           353  
0000132C                           354  
0000132C                           355  
0000132C                           356  
0000132C                           357  
0000132C                           358  
0000132C                           359  
0000132C                           360  
0000132C                           361  
0000132C                           362  
0000132C                           363  
0000132C                           364  
0000132C                           365  
0000132C                           366  
0000132C                           367  
0000132C                           368  
0000132C                           369  
0000132C                           370  
0000132C                           371  
0000132C                           372  
0000132C                           373  
0000132C                           374  
0000132C                           375  
0000132C                           376  
0000132C                           377  
0000132C                           378  
0000132C                           379  -------------------- end include --------------------
0000132C                           380      INCLUDE         'OP_jumpTable.X68'
0000132C                           381  VERIFY_OPCODE
0000132C  3200                     382      MOVE.W  D0,D1   *Copy instruction for modification
0000132E                           383      
0000132E                           384      **ISOLATE FIRST FOUR BITS**                                             
0000132E  E849                     385      LSR.W   #4,D1       *Shift left four bits
00001330  E049                     386      LSR.W   #8,D1       *Shift left again (12 shifts total)
00001332                           387      
00001332  4242                     388      CLR     D2
00001334  1401                     389      MOVE.B  D1,D2
00001336                           390      
00001336  41F9 00001344            391      LEA     OP_JTAB,A0 
0000133C  C5FC 0006                392      MULS    #6, D2
00001340  4EB0 2000                393      JSR     0(A0,D2)
00001344                           394  
00001344                           395  
00001344                           396  
00001344  4EF9 000013A6            397  OP_JTAB    JMP     OP0000      *ADDI
0000134A  4EF9 000013B6            398      JMP     OP0001      *MOVE.B
00001350  4EF9 000013C6            399      JMP     OP0010      *MOVE.W, MOVEA(WORD)
00001356  4EF9 000013CA            400      JMP     OP0011      *MOVE.L, MOVEA(LONG) 
0000135C  4EF9 00001402            401      JMP     OP0100      *NOP, MOVEM, LEA, CLR, JSR, RTS
00001362  4EF9 000014AA            402      JMP     OP0101      *ADDQ
00001368  4EF9 000014BA            403      JMP     OP0110      *Bcc
0000136E  4EF9 000014D4            404      JMP     OP0111      *MOVEQ
00001374  4EF9 000014E4            405      JMP     OP1000      *DIVU, OR
0000137A  4EF9 0000151A            406      JMP     OP1001      *SUB
00001380  4EF8 11EA                407      JMP     INVALID_OPCODE
00001384  4EF9 0000152A            408      JMP     OP1011      *CMP
0000138A  4EF9 0000153A            409      JMP     OP1100      *MULS, AND
00001390  4EF9 00001572            410      JMP     OP1101      *ADD, ADDA
00001396  4EF9 000015AA            411      JMP     OP1110      *LSR, LSL, ASR, ASL, ROL, ROR
0000139C  4EF8 11EA                412      JMP     INVALID_OPCODE
000013A0                           413  
000013A0                           414  
000013A0                           415      
000013A0  6000 FE48                416      BRA    INVALID_OPCODE     *Subroutine to store as non-decodable
000013A4  4E75                     417      RTS
000013A6                           418  
000013A6                           419  OP0000
000013A6                           420      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000013A6                           421      *BEGIN OUTPUT
000013A6                           422      
000013A6                           423      *MOVE.W  ADDI,(A3)+      *Load 'ADDI' to Add Reg 1 and then increment
000013A6  49F9 00003559            424      LEA     ADDI, A4
000013AC  4EB9 0000168C            425      JSR     PASTE_4
000013B2  6000 04B2                426      BRA     EA_ADDI         *Branch to EA analysis of the command
000013B6                           427  
000013B6                           428  OP0001  *SINGLE CODE, DO NOT NEED FURTHER CHECKING 
000013B6                           429          *BEGIN OUTPUT
000013B6                           430      
000013B6                           431      *MOVE.L  MOVE,(A3)+     *Load 'MOVE.B' to Add Reg 1 and then increment
000013B6  49F9 0000355E            432      LEA     MOVE, A4
000013BC  4EB9 0000168C            433      JSR     PASTE_4
000013C2  6000 02E2                434      BRA     EA_MOVE        *Branch to EA analysis of the command
000013C6                           435  
000013C6                           436  OP0010
000013C6                           437      *Identical to OP0011 for these purposes, branch there
000013C6  6000 0002                438      BRA OP0011
000013CA                           439  
000013CA                           440  OP0011
000013CA                           441      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000013CA                           442  
000013CA                           443      **ISOLATE NEXT BITS TO CHECK**
000013CA  3200                     444      MOVE.W  D0,D1           *Copy instruction for modification
000013CC  EF49                     445      LSL.W   #7,D1           *Shift left 7 bits 
000013CE  EA49                     446      LSR.W   #5,D1           *Rotate right 5 bits
000013D0  E049                     447      LSR.W   #8,D1           *Shift right again (13 shifts total)
000013D2  0241 000F                448      ANDI.W  #$00F,D1        *Keep 3 bits
000013D6                           449      
000013D6  B27C 0001                450      CMP     #%001,D1      *Check for 0010 to eliminate CLR
000013DA  6700 0016                451      BEQ     _MOVEA          *If equal, branch to CLR
000013DE                           452      
000013DE  6000 0002                453      BRA     _MOVE
000013E2                           454      
000013E2                           455  _MOVE
000013E2                           456      *MOVE.L  MOVE,(A3)+     *Load 'MOVE.L' to Add Reg 1 and then increment  
000013E2  49F9 0000355E            457      LEA     MOVE, A4
000013E8  4EB9 0000168C            458      JSR     PASTE_4
000013EE  6000 02B6                459      BRA     EA_MOVE        *Branch to EA analysis of the command
000013F2                           460  
000013F2                           461  _MOVEA
000013F2                           462      *MOVE.L  MOVEA,(A3)+    *Load 'MOVEA.L' to Add Reg 1 and then increment
000013F2  49F9 00003563            463      LEA     MOVEA, A4
000013F8  4EB9 00001696            464      JSR     PASTE_5
000013FE  6000 031A                465      BRA     EA_MOVEA       *Branch to EA analysis of the command
00001402                           466  
00001402                           467  OP0100
00001402                           468      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
00001402  3200                     469       MOVE.W  D0,D1           *Copy instruction for modification
00001404                           470      
00001404  B27C 4E71                471      CMP     #%0100111001110001,D1   *Check to eliminate NOP
00001408  6700 0070                472      BEQ     _NOP
0000140C  B27C 4E75                473      CMP     #%0100111001110101,D1   *Check to eliminate RTS
00001410  6700 0078                474      BEQ     _RTS
00001414                           475      
00001414  EC49                     476      LSR.W   #6,D1                   *Shift right 6 bits
00001416  B27C 013A                477      CMP     #%0000000100111010,D1   *Check to eliminate RTS
0000141A  6700 004E                478      BEQ     _JSR
0000141E                           479      
0000141E                           480      **ISOLATE 4 BITS TO CHECK CLR**    
0000141E  3200                     481      MOVE.W  D0,D1           *Copy instruction for modification
00001420  E949                     482      LSL.W   #4,D1           *Shift left 7 bits 
00001422  E849                     483      LSR.W   #4,D1           *Rotate right 5 bits
00001424  E049                     484      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001426  0241 000F                485      ANDI.W  #$000F,D1       *Keep 4 bits
0000142A                           486      
0000142A  B27C 0002                487      CMP     #%0010,D1       *Check for 0010 to eliminate CLR
0000142E  6700 001A                488      BEQ     _CLR            *If equal, branch to CLR
00001432                           489  
00001432                           490      **ISOLATE 3 BITS TO CHECK MOVEM**
00001432  3200                     491      MOVE.W  D0,D1           *Copy instruction for modification
00001434  ED49                     492      LSL.W   #6,D1           *Shift left 6 bits 
00001436  EA49                     493      LSR.W   #5,D1           *Shift right 5 bits
00001438  E049                     494      LSR.W   #8,D1           *Shift right again (13 shifts total)
0000143A  0241 000F                495      ANDI.W  #$00F,D1        *Keep 3 bits
0000143E                           496      
0000143E  B27C 0001                497      CMP     #%001,D1
00001442  6700 0056                498      BEQ     _MOVEM
00001446                           499      
00001446  6000 0012                500      BRA     _LEA            *Else by process of elimination it must be LEA   
0000144A                           501      
0000144A                           502  _CLR
0000144A                           503      *MOVE.W  OPCLR,(A3)+     *Load 'CLR' to Add Reg 1 and then increment
0000144A  49F9 00003569            504      LEA     OPCLR, A4
00001450  4EB9 00001684            505      JSR     PASTE_3
00001456  6000 05CE                506      BRA     EA_CLR          *Branch to EA analysis of the command
0000145A                           507  
0000145A                           508  _LEA
0000145A                           509      *MOVE.W  OPLEA,(A3)+     *Load 'LEA' to Add Reg 1 and then increment
0000145A  49F9 0000356D            510      LEA     OPLEA, A4
00001460  4EB9 00001684            511      JSR     PASTE_3
00001466  6000 0566                512      BRA     EA_LEA          *Branch to EA analysis of the command
0000146A                           513  
0000146A                           514  _JSR
0000146A                           515      *MOVE.W  OPJSR,(A3)+     *Load 'JSR' to Add Reg 1 and then increment
0000146A  49F9 00003571            516      LEA     OPJSR, A4
00001470  4EB9 00001684            517      JSR     PASTE_3
00001476  6000 0706                518      BRA     EA_JSR          *Branch to EA analysis of the command
0000147A                           519  
0000147A                           520  _NOP
0000147A                           521      *MOVE.W  OPNOP,(A3)+     *Load 'NOP' to Add Reg 1 and then increment
0000147A  49F9 00003575            522      LEA     OPNOP, A4
00001480  4EB9 00001684            523      JSR     PASTE_3
00001486  6000 FDEE                524      BRA     VALID_OPCODE          *Branch to EA analysis of the command      
0000148A                           525  
0000148A                           526  _RTS
0000148A                           527      *MOVE.W  OPRTS,(A3)+     *Load 'RTS' to Add Reg 1 and then increment
0000148A  49F9 00003579            528      LEA     OPRTS, A4
00001490  4EB9 00001684            529      JSR     PASTE_3
00001496  6000 FDDE                530      BRA     VALID_OPCODE          *Branch to EA analysis of the command      
0000149A                           531  
0000149A                           532  _MOVEM
0000149A                           533      *MOVE.W  MOVEM,(A3)+     *Load 'MOVEM' to Add Reg 1 and then increment
0000149A  49F9 0000357D            534      LEA     MOVEM, A4
000014A0  4EB9 00001696            535      JSR     PASTE_5
000014A6  6000 0714                536      BRA     EA_MOVEM        *Branch to EA analysis of the command
000014AA                           537      
000014AA                           538  OP0101
000014AA                           539      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014AA                           540      *BEGIN OUTPUT
000014AA                           541      
000014AA                           542      *MOVE.W  ADDQ,(A3)+      *Load 'AddQ' to Add Reg 1 and then increment
000014AA  49F9 00003583            543      LEA     ADDQ, A4
000014B0  4EB9 0000168C            544      JSR     PASTE_4
000014B6  6000 0410                545      BRA     EA_ADDQ         *Branch to EA analysis of the command
000014BA                           546      
000014BA                           547  OP0110
000014BA                           548      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014BA                           549      *BEGIN OUTPUT
000014BA  3200                     550      MOVE.W  D0,D1
000014BC  E949                     551      LSL.W   #4,D1
000014BE  E849                     552      LSR.W   #4,D1
000014C0  E049                     553      LSR.W   #8,D1
000014C2  B23C 0000                554      CMP.B   #0,D1
000014C6  6700 FD22                555      BEQ     INVALID_OPCODE
000014CA                           556      
000014CA  16F9 00003588            557      MOVE.B  Bcc,(A3)+       *Load 'Bcc' to Add Reg 1 and then increment 
000014D0  6000 0688                558      BRA     EA_BCC          *Branch to EA analysis of the command
000014D4                           559  
000014D4                           560  OP0111
000014D4                           561      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014D4                           562      *BEGIN OUTPUT
000014D4                           563      
000014D4                           564      *MOVE.W  MOVEQ,(A3)+     *Load 'MOVEQ' to Add Reg 1 and then increment
000014D4  49F9 0000358A            565      LEA     MOVEQ, A4
000014DA  4EB9 00001696            566      JSR     PASTE_5
000014E0  6000 0290                567      BRA     EA_MOVEQ        *Branch to EA analysis of the command
000014E4                           568      
000014E4                           569  OP1000
000014E4                           570      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000014E4                           571      
000014E4                           572      **ISOLATE NEXT BITS TO CHECK**
000014E4  3200                     573      MOVE.W  D0,D1           *Copy instruction for modification
000014E6  EF49                     574      LSL.W   #7,D1           *Shift left 7 bits 
000014E8  EA49                     575      LSR.W   #5,D1           *Rotate right 5 bits
000014EA  E049                     576      LSR.W   #8,D1           *Shift right again (13 shifts total)
000014EC  0241 000F                577      ANDI.W  #$00F,D1        *Keep 3 bits
000014F0                           578            
000014F0  B27C 0003                579      CMP     #%011,D1    *Check for 011 to eliminate DIVU
000014F4  6700 0006                580      BEQ     _DIVU        *If equal, branch to DIVU
000014F8  6000 0012                581      BRA     _OR          *Else must be OR, branch
000014FC                           582      
000014FC                           583  _DIVU
000014FC                           584      *MOVE.W  DIVU,(A3)+      *Load 'DIVU' to Add Reg 1 and then increment
000014FC  49F9 00003590            585      LEA     DIVU, A4
00001502  4EB9 0000168C            586      JSR     PASTE_4
00001508  6000 0472                587      BRA     EA_MULS         *Branch to EA analysis of the command
0000150C                           588  
0000150C                           589  _OR
0000150C                           590      *MOVE.W  OR,(A3)+        *Load 'OR' to Add Reg 1 and then increment
0000150C  49F9 00003595            591      LEA     OR, A4
00001512  16DC                     592      MOVE.B  (A4)+, (A3)+
00001514  16DC                     593      MOVE.B  (A4)+, (A3)+
00001516  6000 0294                594      BRA     EA_ADD           *Branch to EA analysis of the command
0000151A                           595  
0000151A                           596  OP1001
0000151A                           597      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
0000151A                           598      *BEGIN OUTPUT
0000151A                           599      
0000151A                           600      *MOVE.W  OPSUB,(A3)+     *Load 'SUB' to Add Reg 1 and then increment
0000151A  49F9 00003598            601      LEA     OPSUB, A4
00001520  4EB9 00001684            602      JSR     PASTE_3
00001526  6000 0284                603      BRA     EA_ADD          *Branch to EA analysis of the command
0000152A                           604  
0000152A                           605  OP1011
0000152A                           606      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
0000152A                           607      *BEGIN OUTPUT
0000152A                           608      *MOVE.W  CMP,(A3)+     *Load 'CMP' to Add Reg 1 and then increment
0000152A  49F9 0000359C            609      LEA     CMP, A4
00001530  4EB9 00001684            610      JSR     PASTE_3
00001536  6000 05C8                611      BRA     EA_CMP          *Branch to EA analysis of the command
0000153A                           612  
0000153A                           613  OP1100
0000153A                           614      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
0000153A                           615  
0000153A  3200                     616      MOVE.W  D0,D1           *Copy instruction for modification
0000153C  EF49                     617      LSL.W   #7,D1           *Shift left 7 bits 
0000153E  EA49                     618      LSR.W   #5,D1           *Rotate right 5 bits
00001540  E049                     619      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001542  0241 000F                620      ANDI.W  #$00F,D1        *Keep 3 bits
00001546                           621           
00001546  B27C 0007                622      CMP     #%111,D1       *Check for 111 to eliminate MULS
0000154A  6700 0006                623      BEQ     _MULS           *If equal, branch to MULS
0000154E  6000 0012                624      BRA     _AND            *Else must be AND, branch
00001552                           625      
00001552                           626  _MULS
00001552                           627      *MOVE.W  MULS,(A3)+      *Load 'MULS' to Add Reg 1 and then increment
00001552  49F9 000035A0            628      LEA     MULS, A4
00001558  4EB9 0000168C            629      JSR     PASTE_4
0000155E  6000 041C                630      BRA     EA_MULS         *Branch to EA analysis of the command
00001562                           631  
00001562                           632  _AND
00001562                           633      *MOVE.W  AND,(A3)+       *Load 'AND' to Add Reg 1 and then increment
00001562  49F9 000035A5            634      LEA     AND, A4
00001568  4EB9 00001684            635      JSR     PASTE_3
0000156E  6000 023C                636      BRA     EA_ADD          *Branch to EA analysis of the command
00001572                           637      
00001572                           638  OP1101
00001572                           639      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS  
00001572                           640  
00001572  3200                     641      MOVE.W  D0,D1           *Copy instruction for modification
00001574  E149                     642      LSL.W   #8,D1           *Shift left 7 bits 
00001576  EA49                     643      LSR.W   #5,D1           *Rotate left 5 bits
00001578  E049                     644      LSR.W   #8,D1           *Shift left again (13 shifts total)
0000157A  0241 000F                645      ANDI.W  #$0F,D1         *Keep 3 bits
0000157E                           646                
0000157E  B27C 0003                647      CMP     #%11,D1         *Check for 011 to eliminate ADDA (Size dependant)
00001582  6700 0016                648      BEQ     _ADDA           *If equal, branch to ADDA
00001586  6000 0002                649      BRA     _ADD            *Else must be ADD, branch
0000158A                           650      
0000158A                           651  _ADD
0000158A                           652      *MOVE.W  ADD,(A3)+       *Load 'ADD' to Add Reg 1 and then increment
0000158A  49F9 000035A9            653      LEA     ADD, A4
00001590  4EB9 00001684            654      JSR     PASTE_3
00001596  6000 0214                655      BRA     EA_ADD          *Branch to EA analysis of the command
0000159A                           656  
0000159A                           657  _ADDA
0000159A                           658      *MOVE.W  ADDA,(A3)+      *Load 'ADDA' to Add Reg 1 and then increment
0000159A  49F9 000035AD            659      LEA     ADDA, A4
000015A0  4EB9 0000168C            660      JSR     PASTE_4
000015A6  6000 037A                661      BRA     EA_ADDA         *Branch to EA analysis of the command
000015AA                           662      
000015AA                           663  OP1110
000015AA                           664      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000015AA                           665        
000015AA  3200                     666      MOVE.W  D0,D1           *Copy instruction for modification
000015AC  EF49                     667      LSL.W   #7,D1           *Shift left 7 bits 
000015AE  EA49                     668      LSR.W   #5,D1           *Rotate right 5 bits
000015B0  E049                     669      LSR.W   #8,D1           *Shift right again (13 shifts total)
000015B2  0241 000F                670      ANDI.W  #$00F,D1        *Keep 3 bits
000015B6                           671                    
000015B6  B27C 0001                672      CMP     #%001,D1        *Check for 001 to eliminate LSd instructions
000015BA  6700 001C                673      BEQ     _LSd            *If equal, branch to LSd to determine LSR or LSL
000015BE                           674  
000015BE                           675      **ELSE CONTINUE CHECKING**
000015BE  3200                     676      MOVE.W  D0,D1           *Copy instruction for modification
000015C0  E149                     677      LSL.W   #8,D1          *Shift left 7 bits
000015C2  E749                     678      LSL.W   #3,D1 
000015C4  EA49                     679      LSR.W   #5,D1           *Rotate left 5 bits
000015C6  E049                     680      LSR.W   #8,D1           *Shift left again (13 shifts total)
000015C8  0241 000F                681      ANDI.W  #$0F,D1         *Keep 2 bits
000015CC                           682      
000015CC                           683      **BEGIN ELIMINATION 'IF/ELSE' STATEMENTS                   
000015CC  B27C 0000                684      CMP     #%00,D1         *Check for 00 to eliminate ASd
000015D0  6700 003E                685      BEQ     _ASd            *If equal, branch to ASd to determine ASR or ASL
000015D4  6000 0074                686      BRA     _ROd            *Else must be a ROd instruction, branch to determine
000015D8                           687      
000015D8                           688  _LSd   
000015D8                           689   
000015D8  3200                     690      MOVE.W  D0,D1           *Copy instruction for modification
000015DA  EF49                     691      LSL.W   #7,D1           *Shift left 7 bits 
000015DC  EE49                     692      LSR.W   #7,D1           *Rotate right 5 bits
000015DE  E049                     693      LSR.W   #8,D1           *Shift right again (13 shifts total)
000015E0  0241 000F                694      ANDI.W  #$F,D1          *Keep 3 bits
000015E4                           695  
000015E4  B27C 0000                696      CMP     #%0,D1        *Check for 011 to eliminate LSR
000015E8  6700 0016                697      BEQ     _LSR            *If equal, branch to LSR
000015EC  6000 0002                698      BRA     _LSL            *Else must be LSL, branch
000015F0                           699  
000015F0                           700  _LSL    
000015F0                           701      *MOVE.W  LSL,(A3)+       *Load 'LSL' to Add Reg 1 and then increment
000015F0  49F9 000035B2            702      LEA     LSL, A4
000015F6  4EB9 00001684            703      JSR     PASTE_3
000015FC  6000 046E                704      BRA     EA_LSD         *Branch to EA analysis of the command
00001600                           705  
00001600                           706  _LSR
00001600                           707      *MOVE.W  LSR,(A3)+       *Load 'LSR' to Add Reg 1 and then increment
00001600  49F9 000035B6            708      LEA     LSR, A4
00001606  4EB9 00001684            709      JSR     PASTE_3
0000160C  6000 045E                710      BRA     EA_LSD          *Branch to EA analysis of the command
00001610                           711  
00001610                           712  _ASd
00001610                           713  
00001610  3200                     714      MOVE.W  D0,D1           *Copy instruction for modification
00001612  E149                     715      LSL.W   #8,D1           *Shift left 7 bits 
00001614  E549                     716      LSL.W   #2,D1           *Shift left 7 bits
00001616  EA49                     717      LSR.W   #5,D1           *Rotate right 5 bits
00001618  E049                     718      LSR.W   #8,D1           *Shift right again (13 shifts total)
0000161A  0241 000F                719      ANDI.W  #$00F,D1        *Keep 3 bits
0000161E                           720     
0000161E  B27C 0000                721      CMP     #%000,D1        *Check for 000 to eliminate ASR
00001622  6700 0016                722      BEQ     _ASR            *If equal, branch to ASR
00001626  6000 0002                723      BRA     _ASL            *Else must be ASL, branch
0000162A                           724  
0000162A                           725  _ASL    
0000162A                           726      *MOVE.W  ASL,(A3)+       *Load 'ASL' to Add Reg 1 and then increment
0000162A  49F9 000035BA            727      LEA     ASL, A4
00001630  4EB9 00001684            728      JSR     PASTE_3
00001636  6000 0434                729      BRA     EA_LSD          *Branch to EA analysis of the command
0000163A                           730  
0000163A                           731  _ASR
0000163A                           732      *MOVE.W  ASR,(A3)+       *Load 'ASR' to Add Reg 1 and then increment
0000163A  49F9 000035BE            733      LEA     ASR, A4
00001640  4EB9 00001684            734      JSR     PASTE_3
00001646  6000 0424                735      BRA     EA_LSD          *Branch to EA analysis of the command
0000164A                           736  
0000164A                           737  _ROd
0000164A                           738  
0000164A  3200                     739      MOVE.W  D0,D1           *Copy instruction for modification
0000164C  E549                     740      LSL.W   #2,D1           *Shift left 7 bits
0000164E  E149                     741      LSL.W   #8,D1           *Shift left 7 bits 
00001650  EA49                     742      LSR.W   #5,D1           *Rotate right 5 bits
00001652  E049                     743      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001654  0241 000F                744      ANDI.W  #$00F,D1        *Keep 3 bits
00001658                           745  
00001658                           746      **BEGIN ELIMINATION 'IF/ELSE' STATEMENTS   
00001658  B27C 0003                747      CMP     #%011,D1        *Check for 011 to eliminate ROR
0000165C  6700 0016                748      BEQ     _ROR            *If equal, branch to ROR
00001660  6000 0002                749      BRA     _ROL            *Else must be ROL, branch
00001664                           750      
00001664                           751  _ROL    
00001664                           752      *MOVE.W  ROL,(A3)+       *Load 'ROL' to Add Reg 1 and then increment
00001664  49F9 000035C2            753      LEA     ROL, A4
0000166A  4EB9 00001684            754      JSR     PASTE_3
00001670  6000 03FA                755      BRA     EA_LSD          *Branch to EA analysis of the command
00001674                           756  
00001674                           757  _ROR
00001674                           758      *MOVE.W  ROR,(A3)+       *Load 'ROR' to Add Reg 1 and then increment
00001674  49F9 000035C6            759      LEA     ROR, A4
0000167A  4EB9 00001684            760      JSR     PASTE_3
00001680  6000 03EA                761      BRA     EA_LSD          *Branch to EA analysis of the command
00001684                           762      
00001684                           763  PASTE_3
00001684  16DC                     764      MOVE.B  (A4)+, (A3)+
00001686  16DC                     765      MOVE.B  (A4)+, (A3)+
00001688  16DC                     766      MOVE.B  (A4)+, (A3)+
0000168A  4E75                     767      RTS
0000168C                           768  
0000168C                           769  PASTE_4
0000168C  16DC                     770      MOVE.B  (A4)+, (A3)+
0000168E  16DC                     771      MOVE.B  (A4)+, (A3)+
00001690  16DC                     772      MOVE.B  (A4)+, (A3)+
00001692  16DC                     773      MOVE.B  (A4)+, (A3)+
00001694  4E75                     774      RTS
00001696                           775  
00001696                           776  PASTE_5
00001696  16DC                     777      MOVE.B  (A4)+, (A3)+
00001698  16DC                     778      MOVE.B  (A4)+, (A3)+
0000169A  16DC                     779      MOVE.B  (A4)+, (A3)+
0000169C  16DC                     780      MOVE.B  (A4)+, (A3)+
0000169E  16DC                     781      MOVE.B  (A4)+, (A3)+
000016A0  4E75                     782      RTS
000016A2                           783  
000016A2  FFFF FFFF                784      SIMHALT
000016A6                           785  
000016A6                           786  
000016A6                           787  
000016A6                           788  
000016A6                           789  
000016A6                           790  -------------------- end include --------------------
000016A6                           791      INCLUDE         'EFFECTIVE_ADDRESSES.X68'
000016A6                           792  
000016A6                           793      *EXAMPLE, MOVE A HEX CODE INTO D6
000016A6                           794      *CALL THE CORRESPONDING EA CODE
000016A6                           795      *MOVE.W     #$2E7C, D6
000016A6                           796      *BRA         EA_MOVE
000016A6                           797      *END EXAMPLE
000016A6                           798      
000016A6                           799  EA_MOVE      *1 invalid; done
000016A6  3E00                     800      MOVE.W      D0, D7 *DO THIS AT THE BEGGINING OF EVERY EA 
000016A8                           801      
000016A8  3807                     802      MOVE.W      D7, D4      *
000016AA  E04C                     803      LSR.W       #8, D4      *
000016AC  E84C                     804      LSR.W       #4, D4      *D4 = SIZE
000016AE  4EB9 00001E08            805      JSR GET_SIZE
000016B4                           806      
000016B4  3807                     807      MOVE.W      D7, D4      *
000016B6  E14C                     808      LSL.W       #8, D4      *
000016B8  E54C                     809      LSL.W       #2, D4
000016BA  E04C                     810      LSR.W       #8, D4      *
000016BC  EA4C                     811      LSR.W       #5, D4      *D4 = <0000 0000> D4 = SOURCE MODE
000016BE                           812      
000016BE  3A07                     813      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000016C0  E14D                     814      LSL.W       #8, D5  
000016C2  EB4D                     815      LSL.W       #5, D5      *
000016C4  E04D                     816      LSR.W       #8, D5
000016C6  EA4D                     817      LSR.W       #5, D5      *D5 = SOURCE REGISTER
000016C8                           818      
000016C8  4EB9 00001EFE            819      JSR         MODE_CHOOSER
000016CE  41F9 00001D3C            820      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000016D4  C9FC 0006                821      MULS        #6, D4          *GET JUMP
000016D8  4EB0 4000                822      JSR         0(A0, D4)       *JUMP
000016DC  4EB9 00001F7A            823      JSR COMMA
000016E2  4EB9 00001FDC            824      JSR SPACE
000016E8  3807                     825      MOVE.W      D7, D4      *
000016EA  EF4C                     826      LSL.W       #7, D4      *
000016EC  EE4C                     827      LSR.W       #7, D4      *
000016EE  EC4C                     828      LSR.W       #6, D4      *D4 = DESTINATION MODE
000016F0  4EB9 00001CB2            829      JSR         MOVE_ERROR_CHECK 
000016F6                           830      
000016F6  3A07                     831      MOVE.W      D7, D5      *
000016F8  E94D                     832      LSL.W       #4, D5      *
000016FA  E04D                     833      LSR.W       #8, D5      *
000016FC  EA4D                     834      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
000016FE                           835      
000016FE  4EB9 00001EFE            836      JSR         MODE_CHOOSER
00001704  41F9 00001D3C            837      LEA         MODE_JUMP, A0   *LOAD MODE JUMP
0000170A  C9FC 0006                838      MULS        #6, D4          *GET JUMP
0000170E  4EB0 4000                839      JSR         0(A0, D4)       *JUMP
00001712  16BC 0000                840      MOVE.B      #00, (A3) 
00001716  6000 FB5E                841      BRA         VALID_OPCODE
0000171A                           842  EA_MOVEA        *0 invalid
0000171A  3E00                     843      MOVE.W      D0, D7
0000171C                           844  
0000171C  3807                     845      MOVE.W      D7, D4      *GETTING SIZE
0000171E  E04C                     846      LSR.W       #8, D4      *
00001720  E84C                     847      LSR.W       #4, D4      *SHIFT 12 BITS RIGHT
00001722  4EB9 00001E08            848      JSR         GET_SIZE    *D4 = SIZE
00001728                           849      
00001728  3807                     850      MOVE.W      D7, D4      *GETTING SOURCE MODE
0000172A  E14C                     851      LSL.W       #8, D4      *
0000172C  E54C                     852      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
0000172E  E04C                     853      LSR.W       #8, D4      *
00001730  EA4C                     854      LSR.W       #5, D4      *D4 = SOURCE MODE
00001732                           855  
00001732  3A07                     856      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
00001734  E14D                     857      LSL.W       #8, D5      *
00001736  EB4D                     858      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001738  E04D                     859      LSR.W       #8, D5      *
0000173A  EA4D                     860      LSR.W       #5, D5      *D5 = SOURCE REGISTER
0000173C                           861      
0000173C  4EB9 00001EFE            862      JSR         MODE_CHOOSER  *INCASE MODE IS $111
00001742  41F9 00001D3C            863      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001748  C9FC 0006                864      MULS        #6, D4        *GET JUMP
0000174C  4EB0 4000                865      JSR         0(A0, D4)     *JUMP
00001750  4EB9 00001F7A            866      JSR         COMMA
00001756  4EB9 00001FDC            867      JSR         SPACE
0000175C  3A07                     868      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
0000175E  E94D                     869      LSL.W       #4, D5      *
00001760  E04D                     870      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
00001762  EA4D                     871      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
00001764                           872      
00001764  4EB9 00001D7A            873      JSR         ADDR_1
0000176A  16BC 0000                874      MOVE.B      #00, (A3)
0000176E  6000 FB06                875      BRA         VALID_OPCODE
00001772                           876  EA_MOVEQ        *0 invalid
00001772  3E00                     877      MOVE.W      D0, D7
00001774                           878  
00001774  4EB9 00001FDC            879      JSR SPACE
0000177A  4EB9 00001F82            880      JSR POUND
00001780  4EB9 00001FE4            881      JSR CASH
00001786  6100 07A4                882      BSR OUTPUT_HEX    
0000178A  4EB9 00001F7A            883      JSR COMMA
00001790  4EB9 00001FDC            884      JSR SPACE
00001796  3A07                     885      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
00001798  E94D                     886      LSL.W       #4, D5      *
0000179A  E04D                     887      LSR.W       #8, D5      *
0000179C  EA4D                     888      LSR.W       #5, D5      * D5 = DESTINATION REGISTER
0000179E                           889      
0000179E  4EB9 00001D6C            890      JSR         DATA_0
000017A4  16BC 0000                891      MOVE.B      #00, (A3)
000017A8  6000 FACC                892      BRA         VALID_OPCODE
000017AC                           893  EA_ADD          *3 invalid; done
000017AC                           894  
000017AC  3E00                     895      MOVE.W      D0, D7
000017AE                           896  
000017AE  3807                     897      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
000017B0  EF4C                     898      LSL.W       #7, D4      * 
000017B2  EE4C                     899      LSR.W       #7, D4      *
000017B4  EC4C                     900      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
000017B6  4EB9 00001E4A            901      JSR         GET_OPMODE_MATH *PRINTS THE SIZE
000017BC                           902  
000017BC  B83C 0003                903      CMP.B       #3, D4
000017C0  6D00 000A                904      BLT         DN_VERSION
000017C4  B83C 0003                905      CMP.B       #3, D4
000017C8  6E00 004C                906      BGT         EA_VERSION
000017CC                           907  DN_VERSION *EA IS SOURCE, REGISTER IS DESTINATION <EA> + DN -> DN
000017CC  3807                     908      MOVE.W      D7, D4      
000017CE  E14C                     909      LSL.W       #8, D4      *LEFT 10; RIGHT 13
000017D0  E54C                     910      LSL.W       #2, D4
000017D2  E04C                     911      LSR.W       #8, D4      *
000017D4  EA4C                     912      LSR.W       #5, D4      *D4 = EA MODE
000017D6                           913      
000017D6  3A07                     914      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000017D8  E14D                     915      LSL.W       #8, D5  
000017DA  EB4D                     916      LSL.W       #5, D5      *
000017DC  E04D                     917      LSR.W       #8, D5
000017DE  EA4D                     918      LSR.W       #5, D5      * D5 = EA REGISTER
000017E0                           919      
000017E0  4EB9 00001EFE            920      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
000017E6  41F9 00001D3C            921      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000017EC  C9FC 0006                922      MULS        #6, D4          *GET JUMP
000017F0  4EB0 4000                923      JSR         0(A0, D4)       *JUMP
000017F4                           924          
000017F4  4EB9 00001F7A            925      JSR         COMMA
000017FA  4EB9 00001FDC            926      JSR         SPACE
00001800                           927      
00001800  3A07                     928      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
00001802  E94D                     929      LSL.W       #4, D5      *
00001804  E04D                     930      LSR.W       #8, D5      *
00001806  EA4D                     931      LSR.W       #5, D5      *D5 DESTINATION REGISTER
00001808                           932      
00001808  4EB9 00001D6C            933      JSR         DATA_0
0000180E  16BC 0000                934      MOVE.B      #00, (A3)
00001812  6000 FA62                935      BRA         VALID_OPCODE
00001816                           936  EA_VERSION
00001816  3A07                     937      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
00001818  E94D                     938      LSL.W       #4, D5      *
0000181A  E04D                     939      LSR.W       #8, D5      *
0000181C  EA4D                     940      LSR.W       #5, D5      *D5 DESTINATION REGISTER
0000181E  4EB9 00001D6C            941      JSR         DATA_0
00001824                           942      
00001824  4EB9 00001F7A            943      JSR         COMMA
0000182A  4EB9 00001FDC            944      JSR         SPACE
00001830                           945      
00001830  3807                     946      MOVE.W      D7, D4      
00001832  E14C                     947      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001834  E54C                     948      LSL.W       #2, D4
00001836  E04C                     949      LSR.W       #8, D4      *
00001838  EA4C                     950      LSR.W       #5, D4      *D4 = EA MODE
0000183A                           951      
0000183A  3A07                     952      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
0000183C  E14D                     953      LSL.W       #8, D5  
0000183E  EB4D                     954      LSL.W       #5, D5      *
00001840  E04D                     955      LSR.W       #8, D5
00001842  EA4D                     956      LSR.W       #5, D5      * D5 = EA REGISTER
00001844                           957      
00001844                           958      *the only way there could be an error is if 
00001844                           959      *we are in THIS addressing mo
00001844                           960      
00001844  4EB9 00001EFE            961      JSR         MODE_CHOOSER    *IF A WORD OR LONG 
0000184A  4EB9 00001CBC            962      JSR         ADD_ERROR_CHECK
00001850  41F9 00001D3C            963      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001856  C9FC 0006                964      MULS        #6, D4          *GET JUMP
0000185A  4EB0 4000                965      JSR         0(A0, D4)       *JUMP
0000185E                           966      
0000185E  16BC 0000                967      MOVE.B      #00, (A3)
00001862  6000 FA12                968      BRA         VALID_OPCODE
00001866                           969  EA_ADDI  *2 invalid; DONE
00001866  3E00                     970      MOVE.W      D0, D7
00001868                           971      
00001868  3807                     972      MOVE.W      D7, D4      *
0000186A  E14C                     973      LSL.W       #8, D4      *
0000186C  E04C                     974      LSR.W       #8, D4      *
0000186E  EC4C                     975      LSR.W       #6, D4      *D4 = SIZE
00001870  4EB9 00001E9C            976      JSR         GET_SIZE_ADDI
00001876  4EB9 00001F82            977      JSR         POUND
0000187C  4EB9 00001FE4            978      JSR         CASH
00001882  6100 06A8                979      BSR         OUTPUT_HEX
00001886  4EB9 00001F7A            980      JSR         COMMA
0000188C  4EB9 00001FDC            981      JSR         SPACE
00001892  3807                     982      MOVE.W      D7, D4      
00001894  E14C                     983      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001896  E54C                     984      LSL.W       #2, D4
00001898  E04C                     985      LSR.W       #8, D4      *
0000189A  EA4C                     986      LSR.W       #5, D4      *D4 = EA MODE
0000189C                           987      
0000189C  3A07                     988      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
0000189E  E14D                     989      LSL.W       #8, D5  
000018A0  EB4D                     990      LSL.W       #5, D5      *
000018A2  E04D                     991      LSR.W       #8, D5
000018A4  EA4D                     992      LSR.W       #5, D5      * D5 = EA REGISTER
000018A6                           993      
000018A6  4EB9 00001EFE            994      JSR         MODE_CHOOSER    *IF A WORD OR LONG  
000018AC  4EB9 00001CD6            995      JSR         ADDI_ERROR_CHECK
000018B2  41F9 00001D3C            996      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000018B8  C9FC 0006                997      MULS        #6, D4          *GET JUMP
000018BC  4EB0 4000                998      JSR         0(A0, D4)       *JUMP'
000018C0                           999      
000018C0  16BC 0000               1000      MOVE.B      #00, (A3)
000018C4  6000 F9B0               1001      BRA         VALID_OPCODE
000018C8                          1002  EA_ADDQ     *0 INVALID
000018C8  3E00                    1003      MOVE.W      D0, D7
000018CA                          1004      
000018CA  3807                    1005      MOVE.W      D7, D4
000018CC  E14C                    1006      LSL.W       #8, D4
000018CE  E04C                    1007      LSR.W       #8, D4
000018D0  EC4C                    1008      LSR.W       #6, D4
000018D2  4EB9 00001E9C           1009      JSR         GET_SIZE_ADDI    *PRINT SIZE
000018D8                          1010      
000018D8  3A07                    1011      MOVE.W      D7, D5      *GETTING DATA
000018DA  E94D                    1012      LSL.W       #4, D5      *SHIFT LEFT 4; RIGHT 13
000018DC  E04D                    1013      LSR.W       #8, D5      *
000018DE  EA4D                    1014      LSR.W       #5, D5      *D5 = DATA
000018E0  4EB9 00001E82           1015      JSR         GET_DATA
000018E6  4EB9 00001F7A           1016      JSR COMMA
000018EC  4EB9 00001FDC           1017      JSR SPACE
000018F2  3807                    1018      MOVE.W      D7, D4      *GETTING EA MODE
000018F4  E14C                    1019      LSL.W       #8, D4      *
000018F6  E54C                    1020      LSL.W       #2, D4      *SHIFT 10 LEFT; 13 RIGHT
000018F8  E04C                    1021      LSR.W       #8, D4      *
000018FA  EA4C                    1022      LSR.W       #5, D4      *D4 = EA MODE
000018FC                          1023      
000018FC  3A07                    1024      MOVE.W      D7, D5      *GETTING EA REGISTER
000018FE  E14D                    1025      LSL.W       #8, D5      *
00001900  EB4D                    1026      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001902  E04D                    1027      LSR.W       #8, D5      *
00001904  EA4D                    1028      LSR.W       #5, D5      *D5 = EA REGISTER
00001906                          1029      
00001906  4EB9 00001EFE           1030      JSR         MODE_CHOOSER
0000190C  41F9 00001D3C           1031      LEA         MODE_JUMP, A0   *LOAD MODE JUMP
00001912  C9FC 0006               1032      MULS        #6, D4          *GET JUMP
00001916  4EB0 4000               1033      JSR         0(A0, D4)       *JUMP
0000191A                          1034      
0000191A  16BC 0000               1035      MOVE.B      #00, (A3)
0000191E                          1036      
0000191E  6000 F956               1037      BRA         VALID_OPCODE
00001922                          1038  EA_ADDA         *0 INVALID
00001922  3E00                    1039      MOVE.W      D0, D7
00001924                          1040      
00001924  3807                    1041      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
00001926  EF4C                    1042      LSL.W       #7, D4      * 
00001928  EE4C                    1043      LSR.W       #7, D4      *
0000192A  EC4C                    1044      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
0000192C  4EB9 00001E32           1045      JSR         GET_OPMODE
00001932                          1046      
00001932  3807                    1047      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001934  E14C                    1048      LSL.W       #8, D4      *
00001936  E54C                    1049      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
00001938  E04C                    1050      LSR.W       #8, D4      *
0000193A  EA4C                    1051      LSR.W       #5, D4      *D4 = SOURCE MODE
0000193C                          1052      
0000193C  3A07                    1053      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
0000193E  E14D                    1054      LSL.W       #8, D5      *
00001940  EB4D                    1055      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001942  E04D                    1056      LSR.W       #8, D5      *
00001944  EA4D                    1057      LSR.W       #5, D5      *D5 = SOURCE REGISTER
00001946                          1058      
00001946  4EB9 00001EFE           1059      JSR         MODE_CHOOSER  *INCASE MODE IS $111
0000194C  41F9 00001D3C           1060      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001952  C9FC 0006               1061      MULS        #6, D4        *GET JUMP
00001956  4EB0 4000               1062      JSR         0(A0, D4)     *JUMP
0000195A  4EB9 00001F7A           1063      JSR COMMA 
00001960  4EB9 00001FDC           1064      JSR SPACE
00001966  3A07                    1065      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
00001968  E94D                    1066      LSL.W       #4, D5      *
0000196A  E04D                    1067      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
0000196C  EA4D                    1068      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
0000196E                          1069      
0000196E  4EB9 00001D7A           1070      JSR         ADDR_1
00001974  16BC 0000               1071      MOVE.B      #00, (A3)
00001978                          1072      
00001978  6000 F8FC               1073      BRA         VALID_OPCODE
0000197C                          1074  EA_MULS                *1 INVALID;
0000197C                          1075  
0000197C  3E00                    1076      MOVE.W      D0, D7
0000197E                          1077      
0000197E  4EB9 00001FDC           1078      JSR         SPACE
00001984  3807                    1079      MOVE.W      D7, D4      
00001986  E14C                    1080      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001988  E54C                    1081      LSL.W       #2, D4
0000198A  E04C                    1082      LSR.W       #8, D4      *
0000198C  EA4C                    1083      LSR.W       #5, D4      *D4 = EA MODE
0000198E                          1084      
0000198E  3A07                    1085      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001990  E14D                    1086      LSL.W       #8, D5  
00001992  EB4D                    1087      LSL.W       #5, D5      *
00001994  E04D                    1088      LSR.W       #8, D5
00001996  EA4D                    1089      LSR.W       #5, D5      * D5 = EA REGISTER
00001998                          1090      
00001998  4EB9 00001EFE           1091      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
0000199E  41F9 00001D3C           1092      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000019A4  C9FC 0006               1093      MULS        #6, D4          *GET JUMP
000019A8  4EB0 4000               1094      JSR         0(A0, D4)       *JUMP
000019AC  4EB9 00001F7A           1095      JSR         COMMA
000019B2  4EB9 00001FDC           1096      JSR         SPACE
000019B8  3A07                    1097      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
000019BA  E94D                    1098      LSL.W       #4, D5      *
000019BC  E04D                    1099      LSR.W       #8, D5      *
000019BE  EA4D                    1100      LSR.W       #5, D5      *D5 DESTINATION REGISTER
000019C0                          1101      
000019C0  4EB9 00001D6C           1102      JSR         DATA_0
000019C6  16BC 0000               1103      MOVE.B      #00, (A3)
000019CA                          1104      
000019CA  6000 F8AA               1105      BRA         VALID_OPCODE
000019CE                          1106  EA_LEA          *5 INVALIDS; DONE
000019CE  3E00                    1107      MOVE.W      D0, D7
000019D0                          1108      
000019D0  4EB9 00001FDC           1109      JSR         SPACE
000019D6  3807                    1110      MOVE.W      D7, D4      *GETTING SOURCE MODE
000019D8  E14C                    1111      LSL.W       #8, D4      *
000019DA  E54C                    1112      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
000019DC  E04C                    1113      LSR.W       #8, D4      *
000019DE  EA4C                    1114      LSR.W       #5, D4      *D4 = SOURCE MODE
000019E0                          1115      
000019E0  3A07                    1116      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
000019E2  E14D                    1117      LSL.W       #8, D5      *
000019E4  EB4D                    1118      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
000019E6  E04D                    1119      LSR.W       #8, D5      *
000019E8  EA4D                    1120      LSR.W       #5, D5      *D5 = SOURCE REGISTER
000019EA                          1121      
000019EA  4EB9 00001EFE           1122      JSR         MODE_CHOOSER  *INCASE MODE IS $111
000019F0  4EB9 00001CE8           1123      JSR         LEA_ERROR_CHECK
000019F6  41F9 00001D3C           1124      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
000019FC  C9FC 0006               1125      MULS        #6, D4        *GET JUMP
00001A00  4EB0 4000               1126      JSR         0(A0, D4)     *JUMP
00001A04  4EB9 00001F7A           1127      JSR COMMA
00001A0A  4EB9 00001FDC           1128      JSR SPACE
00001A10  3A07                    1129      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
00001A12  E94D                    1130      LSL.W       #4, D5      *
00001A14  E04D                    1131      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
00001A16  EA4D                    1132      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
00001A18                          1133      
00001A18  4EB9 00001D7A           1134      JSR         ADDR_1
00001A1E  16BC 0000               1135      MOVE.B      #00, (A3)
00001A22                          1136      
00001A22  6000 F852               1137      BRA         VALID_OPCODE
00001A26                          1138  EA_CLR          *2 INVALID; DONE
00001A26  3E00                    1139      MOVE.W      D0, D7
00001A28                          1140      
00001A28  3807                    1141      MOVE.W      D7, D4
00001A2A  E14C                    1142      LSL.W       #8, D4      *
00001A2C  E04C                    1143      LSR.W       #8, D4      *
00001A2E  EC4C                    1144      LSR.W       #6, D4      *D4 = SIZE
00001A30  4EB9 00001E9C           1145      JSR         GET_SIZE_ADDI
00001A36  3807                    1146      MOVE.W      D7, D4      
00001A38  E14C                    1147      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001A3A  E54C                    1148      LSL.W       #2, D4
00001A3C  E04C                    1149      LSR.W       #8, D4      *
00001A3E  EA4C                    1150      LSR.W       #5, D4      *D4 = EA MODE
00001A40                          1151      
00001A40  3A07                    1152      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001A42  E14D                    1153      LSL.W       #8, D5  
00001A44  EB4D                    1154      LSL.W       #5, D5      *
00001A46  E04D                    1155      LSR.W       #8, D5
00001A48  EA4D                    1156      LSR.W       #5, D5      * D5 = EA REGISTER
00001A4A                          1157      
00001A4A  4EB9 00001EFE           1158      JSR         MODE_CHOOSER    *IF A WORD OR LONG  
00001A50  4EB9 00001CD6           1159      JSR         ADDI_ERROR_CHECK  
00001A56  41F9 00001D3C           1160      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001A5C  C9FC 0006               1161      MULS        #6, D4          *GET JUMP
00001A60  4EB0 4000               1162      JSR         0(A0, D4)       *JUMP
00001A64                          1163      
00001A64  16BC 0000               1164      MOVE.B      #00, (A3)
00001A68                          1165      
00001A68  6000 F80C               1166      BRA         VALID_OPCODE
00001A6C                          1167  EA_LSD          *3 INVALID; DONE
00001A6C  3E00                    1168      MOVE.W      D0, D7
00001A6E                          1169      
00001A6E  3807                    1170      MOVE.W      D7, D4
00001A70  E14C                    1171      LSL.W       #8, D4
00001A72  E04C                    1172      LSR.W       #8, D4
00001A74  EC4C                    1173      LSR.W       #6, D4      *ISOLATE SIZE
00001A76  4EB9 00001E9C           1174      JSR         GET_SIZE_ADDI  *PRINT SIZE
00001A7C  B83C 0003               1175      CMP.B       #3, D4      *EA SHIFT
00001A80  6700 003E               1176      BEQ         EA_SHIFT    *BRANCH TO EA SHIFT
00001A84  3807                    1177      MOVE.W      D7, D4
00001A86  E14C                    1178      LSL.W       #8, D4
00001A88  E54C                    1179      LSL.W       #2, D4
00001A8A  E04C                    1180      LSR.W       #8, D4
00001A8C  EE4C                    1181      LSR.W       #7, D4      *D4 = TYPE
00001A8E                          1182      
00001A8E  3A07                    1183      MOVE.W      D7, D5      *GETTING DATA
00001A90  E94D                    1184      LSL.W       #4, D5      *SHIFT LEFT 4; RIGHT 13
00001A92  E04D                    1185      LSR.W       #8, D5      *
00001A94  EA4D                    1186      LSR.W       #5, D5      *D5 = DATA / REGISTER
00001A96                          1187      
00001A96  4EB9 00001EBC           1188      JSR         TYPE_CHOOSER
00001A9C  4EB9 00001F7A           1189      JSR         COMMA
00001AA2  4EB9 00001FDC           1190      JSR         SPACE
00001AA8  3A07                    1191      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001AAA  E14D                    1192      LSL.W       #8, D5  
00001AAC  EB4D                    1193      LSL.W       #5, D5      *
00001AAE  E04D                    1194      LSR.W       #8, D5
00001AB0  EA4D                    1195      LSR.W       #5, D5      * D5 = EA REGISTER
00001AB2  4EB9 00001D6C           1196      JSR         DATA_0
00001AB8                          1197      
00001AB8  16BC 0000               1198      MOVE.B      #00, (A3)
00001ABC                          1199      
00001ABC  6000 F7B8               1200      BRA         VALID_OPCODE
00001AC0                          1201  EA_SHIFT
00001AC0  4EB9 00001FDC           1202      JSR         SPACE
00001AC6  3807                    1203      MOVE.W      D7, D4      *
00001AC8  E14C                    1204      LSL.W       #8, D4      *
00001ACA  E54C                    1205      LSL.W       #2, D4
00001ACC  E04C                    1206      LSR.W       #8, D4      *
00001ACE  EA4C                    1207      LSR.W       #5, D4      *D4 = EA MODE
00001AD0                          1208      
00001AD0  3A07                    1209      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001AD2  E14D                    1210      LSL.W       #8, D5  
00001AD4  EB4D                    1211      LSL.W       #5, D5      *
00001AD6  E04D                    1212      LSR.W       #8, D5
00001AD8  EA4D                    1213      LSR.W       #5, D5      * D5 = EA REGISTER
00001ADA                          1214      
00001ADA  4EB9 00001EFE           1215      JSR         MODE_CHOOSER    *IF A WORD OR LONG   
00001AE0  4EB9 00001CBC           1216      JSR         ADD_ERROR_CHECK 
00001AE6  41F9 00001D3C           1217      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001AEC  C9FC 0006               1218      MULS        #6, D4          *GET JUMP
00001AF0  4EB0 4000               1219      JSR         0(A0, D4)       *JUMP
00001AF4  6000 0002               1220      BRA         DONE
00001AF8                          1221  DONE
00001AF8  16BC 0000               1222      MOVE.B      #00, (A3)
00001AFC                          1223      
00001AFC  6000 F778               1224      BRA         VALID_OPCODE
00001B00                          1225  
00001B00                          1226  EA_CMP          *0 INVALID
00001B00  3E00                    1227      MOVE.W      D0, D7
00001B02                          1228      
00001B02  3807                    1229      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
00001B04  EF4C                    1230      LSL.W       #7, D4      * 
00001B06  EE4C                    1231      LSR.W       #7, D4      *
00001B08  EC4C                    1232      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
00001B0A  4EB9 00001E9C           1233      JSR         GET_SIZE_ADDI
00001B10  3807                    1234      MOVE.W      D7, D4      
00001B12  E14C                    1235      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001B14  E54C                    1236      LSL.W       #2, D4
00001B16  E04C                    1237      LSR.W       #8, D4      *
00001B18  EA4C                    1238      LSR.W       #5, D4      *D4 = EA MODE
00001B1A                          1239      
00001B1A  3A07                    1240      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001B1C  E14D                    1241      LSL.W       #8, D5  
00001B1E  EB4D                    1242      LSL.W       #5, D5      *
00001B20  E04D                    1243      LSR.W       #8, D5
00001B22  EA4D                    1244      LSR.W       #5, D5      * D5 = EA REGISTER
00001B24                          1245      
00001B24  4EB9 00001EFE           1246      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001B2A  41F9 00001D3C           1247      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001B30  C9FC 0006               1248      MULS        #6, D4          *GET JUMP
00001B34  4EB0 4000               1249      JSR         0(A0, D4)       *JUMP
00001B38  4EB9 00001F7A           1250      JSR         COMMA
00001B3E  4EB9 00001FDC           1251      JSR         SPACE
00001B44  3A07                    1252      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
00001B46  E94D                    1253      LSL.W       #4, D5      *
00001B48  E04D                    1254      LSR.W       #8, D5      *
00001B4A  EA4D                    1255      LSR.W       #5, D5      *D5 DESTINATION REGISTER
00001B4C                          1256      
00001B4C  4EB9 00001D6C           1257      JSR         DATA_0
00001B52  16BC 0000               1258      MOVE.B      #00, (A3)
00001B56                          1259      
00001B56  6000 F71E               1260      BRA         VALID_OPCODE
00001B5A                          1261  EA_BCC          *0 INVALID (I THINK)
00001B5A  3E00                    1262      MOVE.W      D0, D7
00001B5C                          1263      
00001B5C  3807                    1264      MOVE.W      D7, D4
00001B5E  E94C                    1265      LSL.W       #4, D4
00001B60  E04C                    1266      LSR.W       #8, D4
00001B62  E84C                    1267      LSR.W       #4, D4   *D4 = BINARY CONDITION CODE
00001B64  4EB9 00001ECC           1268      JSR         PRINT_BCC
00001B6A  4EB9 00001FDC           1269      JSR         SPACE
00001B70  4EB9 00001F2C           1270      JSR         OUTPUT_HEX
00001B76  16BC 0000               1271      MOVE.B      #00, (A3)
00001B7A                          1272      
00001B7A  6000 F6FA               1273      BRA         VALID_OPCODE
00001B7E                          1274  EA_JSR   *5 INVALID; DONE
00001B7E                          1275  
00001B7E  3E00                    1276      MOVE.W      D0, D7
00001B80                          1277      
00001B80  4EB9 00001FDC           1278      JSR         SPACE
00001B86  3807                    1279      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001B88  E14C                    1280      LSL.W       #8, D4      *
00001B8A  E54C                    1281      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
00001B8C  E04C                    1282      LSR.W       #8, D4      *
00001B8E  EA4C                    1283      LSR.W       #5, D4      *D4 = SOURCE MODE
00001B90                          1284      
00001B90  3A07                    1285      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
00001B92  E14D                    1286      LSL.W       #8, D5      *
00001B94  EB4D                    1287      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001B96  E04D                    1288      LSR.W       #8, D5      *
00001B98  EA4D                    1289      LSR.W       #5, D5      *D5 = SOURCE REGISTER
00001B9A                          1290      
00001B9A  4EB9 00001EFE           1291      JSR         MODE_CHOOSER  *INCASE MODE IS $111
00001BA0  4EB9 00001CE8           1292      JSR         LEA_ERROR_CHECK
00001BA6  41F9 00001D3C           1293      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001BAC  C9FC 0006               1294      MULS        #6, D4        *GET JUMP
00001BB0  4EB0 4000               1295      JSR         0(A0, D4)     *JUM
00001BB4                          1296      
00001BB4  16BC 0000               1297      MOVE.B      #00, (A3)
00001BB8                          1298      
00001BB8  6000 F6BC               1299      BRA         VALID_OPCODE
00001BBC                          1300  EA_MOVEM
00001BBC                          1301  
00001BBC  3C00                    1302      MOVE.W      D0, D6
00001BBE  3806                    1303      MOVE.W      D6, D4
00001BC0  EB4C                    1304      LSL.W       #5, D4
00001BC2  E94C                    1305      LSL.W       #4, D4
00001BC4  E04C                    1306      LSR.W       #8, D4
00001BC6  EE4C                    1307      LSR.W       #7, D4
00001BC8  4EB9 00001EE6           1308      JSR         REG_SIZE
00001BCE  3E06                    1309      MOVE.W      D6, D7
00001BD0  EB4F                    1310      LSL.W       #5, D7
00001BD2  E04F                    1311      LSR.W       #8, D7
00001BD4  EE4F                    1312      LSR.W       #7, D7
00001BD6  BE3C 0000               1313      CMP.B       #0, D7
00001BDA  6700 003E               1314      BEQ         PRINT_LIST
00001BDE  BE7C 0000               1315  EAP CMP.W       #0, D7      *IF ITS A ZERO, THAT MEANS WE JUST JUMPED HERE 
00001BE2  6700 00A2               1316      BEQ         COMMA_SPACE *FROM CHECK TYPE, ELSE MEANS ITS UNALTERED
00001BE6  3806                    1317  EAS MOVE.W      D6, D4      
00001BE8  E14C                    1318      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001BEA  E54C                    1319      LSL.W       #2, D4
00001BEC  E04C                    1320      LSR.W       #8, D4      *
00001BEE  EA4C                    1321      LSR.W       #5, D4      *D4 = EA MODE
00001BF0                          1322      
00001BF0  3A06                    1323      MOVE.W      D6, D5      *SHIFT LEFT 13; RIGHT 13
00001BF2  E14D                    1324      LSL.W       #8, D5  
00001BF4  EB4D                    1325      LSL.W       #5, D5      *
00001BF6  E04D                    1326      LSR.W       #8, D5
00001BF8  EA4D                    1327      LSR.W       #5, D5      * D5 = EA REGISTER
00001BFA                          1328      
00001BFA  4EB9 00001EFE           1329      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001C00  41F9 00001D3C           1330      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001C06  C9FC 0006               1331      MULS        #6, D4          *GET JUMP
00001C0A  4EB0 4000               1332      JSR         0(A0, D4)       *JUMP
00001C0E                          1333      
00001C0E  BE7C 0001               1334      CMP.W       #1, D7 *IF ONE THEN THIS WAS PRINTED FIRST
00001C12  6700 0006               1335      BEQ         PRINT_LIST
00001C16                          1336      
00001C16  6000 008E               1337      BRA         DONE_PRINTING
00001C1A                          1338  PRINT_LIST
00001C1A  BE3C 0001               1339      CMP.B       #1, D7 
00001C1E  6700 0076               1340      BEQ         COMMA_SPACE2
00001C22  2E0A                    1341  EA2 MOVE.L      A2, D7
00001C24  548A                    1342      ADD.L       #2, A2
00001C26  143C 0008               1343      MOVE.B      #$8, D2
00001C2A  4244                    1344      CLR         D4
00001C2C                          1345  FOR_LOOP    
00001C2C  B404                    1346      CMP.B       D4, D2
00001C2E  6700 001E               1347      BEQ         ADDRESS_REGISTERS
00001C32  E25F                    1348      ROR.W       #1, D7
00001C34  6000 0006               1349      BRA         PRINT_CURRENT
00001C38  5244                    1350  JFZ ADDQ        #1, D4
00001C3A  60F0                    1351      BRA         FOR_LOOP
00001C3C                          1352      
00001C3C                          1353  PRINT_CURRENT
00001C3C  64FA                    1354      BCC         JFZ
00001C3E  1A04                    1355      MOVE.B      D4, D5
00001C40  4EB9 00001D6C           1356      JSR         DATA_0
00001C46  4EB9 00002004           1357      JSR         SLASH
00001C4C  60EA                    1358      BRA         JFZ
00001C4E                          1359      
00001C4E                          1360  ADDRESS_REGISTERS
00001C4E  4244                    1361      CLR         D4
00001C50                          1362  FOR_2
00001C50  B404                    1363      CMP.B       D4, D2
00001C52  6700 001E               1364      BEQ         CHECK_TYPE
00001C56  E25F                    1365      ROR.W       #1, D7
00001C58  6000 0006               1366      BRA         EA_PRINT_ADDRESS
00001C5C  5244                    1367  JFF ADDQ        #1, D4
00001C5E  60F0                    1368      BRA         FOR_2
00001C60                          1369      
00001C60                          1370  EA_PRINT_ADDRESS
00001C60  64FA                    1371      BCC         JFF
00001C62  1A04                    1372      MOVE.B      D4, D5
00001C64  4EB9 00002004           1373      JSR         SLASH
00001C6A  4EB9 00001D7A           1374      JSR         ADDR_1
00001C70  60EA                    1375      BRA         JFF  
00001C72                          1376  CHECK_TYPE
00001C72  3E06                    1377      MOVE.W      D6, D7
00001C74  EB4F                    1378      LSL.W       #5, D7  
00001C76  E04F                    1379      LSR.W       #8, D7
00001C78  EE4F                    1380      LSR.W       #7, D7
00001C7A  BE3C 0000               1381      CMP.B       #0, D7   *IF TYPE IS 0 THE LIST HAS BEEN PRINTED FIRST  
00001C7E  6700 FF5E               1382      BEQ         EAP      *THEREFORE ITS TIME TO PRINT THE EAP
00001C82  6600 0022               1383      BNE         DONE_PRINTING
00001C86                          1384      
00001C86                          1385  COMMA_SPACE
00001C86  4EB9 00001F7A           1386      JSR         COMMA
00001C8C  4EB9 00001FDC           1387      JSR         SPACE
00001C92  6000 FF52               1388      BRA         EAS
00001C96                          1389      
00001C96                          1390  COMMA_SPACE2
00001C96  4EB9 00001F7A           1391      JSR         COMMA
00001C9C  4EB9 00001FDC           1392      JSR         SPACE
00001CA2  6000 FF7E               1393      BRA         EA2
00001CA6                          1394      
00001CA6                          1395  DONE_PRINTING
00001CA6  16BC 0000               1396      MOVE.B      #00, (A3)
00001CAA  6000 F5CA               1397      BRA         VALID_OPCODE
00001CAE                          1398  
00001CAE                          1399  
00001CAE                          1400  
00001CAE                          1401  
00001CAE                          1402  
00001CAE                          1403  
00001CAE                          1404  
00001CAE                          1405  
00001CAE                          1406  
00001CAE                          1407  
00001CAE                          1408  
00001CAE                          1409  
00001CAE                          1410  
00001CAE                          1411  
00001CAE                          1412  
00001CAE                          1413  
00001CAE                          1414  BYEBYE
00001CAE  FFFF FFFF               1415      SIMHALT
00001CB2                          1416  
00001CB2                          1417  
00001CB2                          1418  
00001CB2                          1419  
00001CB2                          1420  
00001CB2                          1421  
00001CB2                          1422  
00001CB2                          1423  
00001CB2                          1424  
00001CB2                          1425  
00001CB2                          1426  
00001CB2                          1427  
00001CB2                          1428  
00001CB2                          1429  
00001CB2                          1430  
00001CB2                          1431  MOVE_ERROR_CHECK       *only invalid move is desn addr reg
00001CB2  B83C 0001               1432      CMP.B       #1, D4 *if d4 is one, dest is addr reg
00001CB6  6700 0354               1433      BEQ         INVALID
00001CBA  4E75                    1434      RTS
00001CBC                          1435      
00001CBC                          1436  ADD_ERROR_CHECK  *COVERS ALL SHIFTS
00001CBC  B83C 0007               1437      CMP.B       #7, D4
00001CC0  6700 0072               1438      BEQ         EAT_INVALID
00001CC4  B83C 0001               1439      CMP.B       #1, D4
00001CC8  6700 0342               1440      BEQ         INVALID
00001CCC  B83C 0000               1441      CMP.B       #0, D4
00001CD0  6700 033A               1442      BEQ         INVALID
00001CD4  4E75                    1443      RTS 
00001CD6                          1444      
00001CD6                          1445  ADDI_ERROR_CHECK *COVERS CLR
00001CD6  B83C 0001               1446      CMP.B       #1, D4
00001CDA  6700 0330               1447      BEQ         INVALID
00001CDE  B83C 0007               1448      CMP.B       #7, D4
00001CE2  6700 0050               1449      BEQ         EAT_INVALID
00001CE6  4E75                    1450      RTS
00001CE8                          1451      
00001CE8                          1452  LEA_ERROR_CHECK *COVERS JSR
00001CE8  B83C 0000               1453      CMP.B       #0, D4
00001CEC  6700 031E               1454      BEQ         INVALID
00001CF0  B83C 0001               1455      CMP.B       #1, D4
00001CF4  6700 0316               1456      BEQ         INVALID
00001CF8  B83C 0003               1457      CMP.B       #3, D4
00001CFC  6700 030E               1458      BEQ         INVALID
00001D00  B83C 0004               1459      CMP.B       #4, D4
00001D04  6700 0306               1460      BEQ         INVALID
00001D08  B83C 0007               1461      CMP.B       #7, D4
00001D0C  6700 0026               1462      BEQ         EAT_INVALID
00001D10  4E75                    1463      RTS
00001D12                          1464      
00001D12                          1465  MOVEM_ERROR_CHECK *0, 1, 4, 7
00001D12  B83C 0000               1466      CMP.B       #0, D4
00001D16  6700 02F4               1467      BEQ         INVALID
00001D1A  B83C 0001               1468      CMP.B       #1, D4
00001D1E  6700 02EC               1469      BEQ         INVALID
00001D22  B83C 0004               1470      CMP.B       #4, D4
00001D26  6700 02E4               1471      BEQ         INVALID
00001D2A  B83C 0007               1472      CMP.B       #7, D4
00001D2E  6700 0004               1473      BEQ         EAT_INVALID
00001D32  4E75                    1474      RTS
00001D34                          1475      
00001D34                          1476      
00001D34                          1477      
00001D34                          1478      *assuming FOR NOW that it always eats a long
00001D34                          1479  EAT_INVALID *EATS THE NEXT TWO WORD VALUES... THEN CALLS INVALID
00001D34  548A                    1480      ADD.L       #2, A2      *EAT THE FIRST WORD
00001D36  548A                    1481      ADD.L       #2, A2      *EAT THE SECOND WORD
00001D38  6000 02D2               1482      BRA         INVALID
00001D3C                          1483  
00001D3C                          1484  
00001D3C                          1485  
00001D3C                          1486  
00001D3C                          1487  
00001D3C                          1488  
00001D3C                          1489  
00001D3C                          1490  
00001D3C                          1491  
00001D3C                          1492  
00001D3C                          1493  
00001D3C                          1494  
00001D3C                          1495  
00001D3C                          1496  
00001D3C                          1497  
00001D3C                          1498  
00001D3C                          1499  
00001D3C                          1500  
00001D3C  4EF9 00001D6C           1501  MODE_JUMP       JMP     DATA_0
00001D42  4EF9 00001D7A           1502                  JMP     ADDR_1
00001D48  4EF9 00001D88           1503                  JMP     ADDI_2
00001D4E  4EF9 00001D9A           1504                  JMP     ADDP_3
00001D54  4EF9 00001DA6           1505                  JMP     ADDM_4
00001D5A  4EF9 00001DB2           1506                  JMP     ABSW_5
00001D60  4EF9 00001DC8           1507                  JMP     ABSL_6
00001D66  4EF9 00001DEC           1508                  JMP     IMME_7
00001D6C                          1509  
00001D6C                          1510  DATA_0 *DONE
00001D6C  16F9 000035E8           1511      MOVE.B      M_DREG, (A3)+
00001D72  4EB9 00001E28           1512      JSR         GET_REG
00001D78  4E75                    1513      RTS
00001D7A                          1514  
00001D7A                          1515  ADDR_1 *ADD CONDITIONS FOR SOURCE ONLY, AND NEVER BYTES
00001D7A  16F9 000035EA           1516      MOVE.B      M_AREG, (A3)+
00001D80  4EB9 00001E28           1517      JSR         GET_REG
00001D86  4E75                    1518      RTS
00001D88                          1519   
00001D88                          1520  ADDI_2 *DONE
00001D88  4EB9 00001FBC           1521      JSR         OPEN
00001D8E  4EB8 1D7A               1522      JSR         ADDR_1
00001D92  4EB9 00001FC4           1523      JSR         CLOSE
00001D98  4E75                    1524      RTS
00001D9A                          1525      
00001D9A                          1526  ADDP_3 *DONE
00001D9A  4EB8 1D88               1527      JSR         ADDI_2
00001D9E  4EB9 00001FCC           1528      JSR         PLUS
00001DA4  4E75                    1529      RTS
00001DA6                          1530      
00001DA6                          1531  ADDM_4 *DONE
00001DA6  4EB9 00001FD4           1532      JSR         SUB
00001DAC  4EB8 1D88               1533      JSR         ADDI_2
00001DB0  4E75                    1534      RTS
00001DB2                          1535      
00001DB2                          1536  ABSW_5  *DONE
00001DB2  548A                    1537      ADD.L       #2, A2      *INCREMENT INTO WORD ADDRESS
00001DB4  141A                    1538      MOVE.B      (A2)+, D2
00001DB6  E15A                    1539      ROL         #8, D2
00001DB8  1412                    1540      MOVE.B      (A2), D2
00001DBA  534A                    1541      SUB         #1, A2  
00001DBC  4EB9 00001FE4           1542      JSR         CASH
00001DC2  6100 0168               1543      BSR         OUTPUT_HEX
00001DC6  4E75                    1544      RTS
00001DC8                          1545  
00001DC8                          1546   
00001DC8                          1547  ABSL_6 *
00001DC8  4EB9 00001FE4           1548      JSR         CASH
00001DCE  548A                    1549      ADD.L       #2, A2      *INCREMENT INTO WORD
00001DD0  141A                    1550      MOVE.B      (A2)+, D2
00001DD2  E15A                    1551      ROL         #8, D2
00001DD4  1412                    1552      MOVE.B      (A2), D2
00001DD6  534A                    1553      SUB         #1, A2
00001DD8  6100 0152               1554      BSR         OUTPUT_HEX
00001DDC                          1555      
00001DDC                          1556      
00001DDC  548A                    1557      ADD.L       #2, A2      *IDCREMENT INTO NEXT WORK
00001DDE  141A                    1558      MOVE.B      (A2)+, D2
00001DE0  E15A                    1559      ROL         #8, D2
00001DE2  1412                    1560      MOVE.B      (A2), D2
00001DE4  534A                    1561      SUB         #1, A2
00001DE6  6100 0144               1562      BSR         OUTPUT_HEX
00001DEA  4E75                    1563      RTS
00001DEC                          1564      
00001DEC                          1565  IMME_7  *FOR NOW ONLY WORKING WITH IMMEDIATE HEX VALUES
00001DEC  4EB9 00001F82           1566      JSR         POUND
00001DF2  4EB9 00001FE4           1567      JSR         CASH
00001DF8                          1568      
00001DF8  548A                    1569      ADD.L       #2, A2
00001DFA  141A                    1570      MOVE.B      (A2)+, D2
00001DFC  E15A                    1571      ROL         #8, D2
00001DFE  1412                    1572      MOVE.B      (A2), D2
00001E00  534A                    1573      SUB         #1, A2
00001E02  6100 0128               1574      BSR         OUTPUT_HEX
00001E06                          1575      
00001E06                          1576      
00001E06                          1577      
00001E06                          1578      *IDEA IS TO HAVE A FLAG HERE TO SEE IF THE DATA IS GONNA BE A LONG
00001E06                          1579      *THEN BRANCH TO THE BELOW THREE COMMANDS IF THE IMMEDIATE DATA IS A LONG
00001E06                          1580      
00001E06  4E75                    1581      RTS
00001E08                          1582  
00001E08                          1583  GET_SIZE
00001E08  4EB9 00001F8A           1584      JSR         DOT
00001E0E  B83C 0001               1585      CMP.B       #1, D4
00001E12  6700 018C               1586      BEQ         BYTE
00001E16  B83C 0003               1587      CMP.B       #3, D4
00001E1A  6700 0176               1588      BEQ         WORD
00001E1E  B83C 0002               1589      CMP.B       #2, D4
00001E22  6700 018A               1590      BEQ         LONG  
00001E26  4E75                    1591      RTS
00001E28                          1592      
00001E28                          1593  GET_REG ******************
00001E28  2205                    1594      MOVE.L      D5, D1 
00001E2A  4EB8 12D6               1595      JSR         CONVERT_TO_ASCII
00001E2E  16C1                    1596      MOVE.B      D1, (A3)+
00001E30  4E75                    1597      RTS
00001E32                          1598      
00001E32                          1599  GET_OPMODE
00001E32  4EB9 00001F8A           1600      JSR         DOT
00001E38  B83C 0003               1601      CMP.B       #3, D4
00001E3C  6700 0154               1602      BEQ         WORD
00001E40  B83C 0007               1603      CMP.B       #7, D4
00001E44  6700 0168               1604      BEQ         LONG
00001E48  4E75                    1605      RTS
00001E4A                          1606      
00001E4A                          1607  GET_OPMODE_MATH
00001E4A  4EB9 00001F8A           1608      JSR         DOT
00001E50  B83C 0000               1609      CMP.B       #0, D4
00001E54  6700 014A               1610      BEQ         BYTE
00001E58  B83C 0004               1611      CMP.B       #4, D4
00001E5C  6700 0142               1612      BEQ         BYTE
00001E60  B83C 0001               1613      CMP.B       #1, D4
00001E64  6700 012C               1614      BEQ         WORD
00001E68  B83C 0005               1615      CMP.B       #5, D4
00001E6C  6700 0124               1616      BEQ         WORD
00001E70  B83C 0002               1617      CMP.B       #2, D4
00001E74  6700 0138               1618      BEQ         LONG
00001E78  B83C 0006               1619      CMP.B       #6, D4
00001E7C  6700 0130               1620      BEQ         LONG
00001E80  4E75                    1621      RTS
00001E82                          1622      
00001E82                          1623  GET_DATA ******************
00001E82  4EB9 00001F82           1624      JSR         POUND
00001E88  BA3C 0000               1625      CMP.B       #0, D5
00001E8C  6700 0008               1626      BEQ         PRINT_8
00001E90  2205                    1627      MOVE.L      D5, D1
00001E92  16C1                    1628      MOVE.B      D1, (A3)+
00001E94  4E75                    1629      RTS
00001E96                          1630      
00001E96                          1631  PRINT_8 ********
00001E96  7208                    1632      MOVE.L      #8, D1
00001E98  16C1                    1633      MOVE.B      D1, (A3)+
00001E9A  4E75                    1634      RTS
00001E9C                          1635      
00001E9C                          1636  GET_SIZE_ADDI
00001E9C  4EB9 00001F8A           1637      JSR         DOT
00001EA2  B83C 0000               1638      CMP.B       #0, D4
00001EA6  6700 00F8               1639      BEQ         BYTE
00001EAA  B83C 0001               1640      CMP.B       #1, D4
00001EAE  6700 00E2               1641      BEQ         WORD
00001EB2  B83C 0002               1642      CMP.B       #2, D4
00001EB6  6700 00F6               1643      BEQ         LONG  
00001EBA  4E75                    1644      RTS
00001EBC                          1645      
00001EBC                          1646  TYPE_CHOOSER
00001EBC  B83C 0000               1647      CMP.B       #0, D4      *IF IMMEDIATE
00001EC0  67C0                    1648      BEQ         GET_DATA    *IF BRANCHED  ->  #1 IS NOW PRINTED
00001EC2  B83C 0001               1649      CMP.B       #1, D4      *IF A DATA REG
00001EC6  6700 FEA4               1650      BEQ         DATA_0
00001ECA  4E75                    1651      RTS
00001ECC                          1652      
00001ECC                          1653  PRINT_BCC
00001ECC  B83C 0004               1654      CMP.B       #4, D4
00001ED0  6700 011A               1655      BEQ         CC
00001ED4  B83C 000E               1656      CMP.B       #14, D4
00001ED8  6700 011A               1657      BEQ         GT
00001EDC  B83C 000F               1658      CMP.B       #15, D4
00001EE0  6700 011A               1659      BEQ         LE
00001EE4  4E75                    1660      RTS
00001EE6                          1661      
00001EE6                          1662  REG_SIZE
00001EE6  4EB9 00001F8A           1663      JSR         DOT
00001EEC  B83C 0000               1664      CMP.B       #0, D4
00001EF0  6700 00A0               1665      BEQ         WORD
00001EF4  B83C 0001               1666      CMP.B       #1, D4
00001EF8  6700 00B4               1667      BEQ         LONG
00001EFC  4E75                    1668      RTS
00001EFE                          1669  MODE_CHOOSER
00001EFE  B83C 0007               1670      CMP.B       #7, D4
00001F02  6700 0004               1671      BEQ         NEW_MODE
00001F06  4E75                    1672      RTS
00001F08                          1673      
00001F08                          1674  NEW_MODE
00001F08  BA3C 0000               1675      CMP.B       #0, D5 *CHECK REGISTER(D5), WORD ADDRESS?
00001F0C  6700 001A               1676      BEQ         TO_FIVE *CHANGE MODE (D4) TO 5
00001F10  BA3C 0001               1677      CMP.B       #1, D5 *CHECK REGISTER(D5), LONG ADDRESS?
00001F14  6700 000E               1678      BEQ         TO_SIX *CHANGE MODE(D4) TO 6
00001F18                          1679      
00001F18  BA3C 0004               1680      CMP.B       #4, D5 *for immediate data
00001F1C  6700 0004               1681      BEQ         TO_EIGHT
00001F20  4E75                    1682      RTS
00001F22                          1683      
00001F22                          1684  TO_EIGHT
00001F22  4E75                    1685      RTS
00001F24                          1686      
00001F24                          1687  TO_SIX  
00001F24  5304                    1688      SUB.B      #1, D4
00001F26  4E75                    1689      RTS
00001F28                          1690  
00001F28                          1691  TO_FIVE
00001F28  5504                    1692      SUB.B      #2, D4
00001F2A  4E75                    1693      RTS
00001F2C                          1694  
00001F2C                          1695  OUTPUT_HEX
00001F2C                          1696      *OUTPUT 1ST
00001F2C  3802                    1697      MOVE.W      D2, D4              *D7 = <1010 1111 0101 0111>
00001F2E  E04C                    1698      LSR.W       #8, D4              *D7 = <0000 0000 1010 1111>
00001F30  E84C                    1699      LSR.W       #4, D4              *D7 = <0000 0000 0000 1010>
00001F32  1204                    1700      MOVE.B      D4, D1
00001F34  6100 F3A0               1701      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
00001F38  6100 003C               1702      BSR         ADD_CHAR         *print the char in D1  
00001F3C                          1703      *OUTPUT 2ND
00001F3C  3802                    1704      MOVE.W      D2, D4
00001F3E  E94C                    1705      LSL.W       #4, D4              *SHIFT OUT FURTHEST RIGHT BIT
00001F40  E04C                    1706      LSR.W       #8, D4
00001F42  E84C                    1707      LSR.W       #4, D4  
00001F44  1204                    1708      MOVE.B      D4, D1
00001F46  6100 F38E               1709      BSR         CONVERT_TO_ASCII
00001F4A  6100 002A               1710      BSR         ADD_CHAR
00001F4E                          1711      *OUTPUT 3RD
00001F4E  3802                    1712      MOVE.W      D2, D4
00001F50  E14C                    1713      LSL.W       #8, D4
00001F52  E04C                    1714      LSR.W       #8, D4
00001F54  E84C                    1715      LSR.W       #4, D4
00001F56  1204                    1716      MOVE.B      D4, D1
00001F58  6100 F37C               1717      BSR         CONVERT_TO_ASCII
00001F5C  6100 0018               1718      BSR         ADD_CHAR
00001F60                          1719      *OUTPUT 4TH
00001F60  3802                    1720      MOVE.W      D2, D4  *D7 = <1010 1111 0101 0111>
00001F62  E14C                    1721      LSL.W       #8, D4  *     <0101 0111 0000 0000>
00001F64  E94C                    1722      LSL.W       #4, D4  *     <0111 0000 0000 0000>
00001F66  E04C                    1723      LSR.W       #8, D4  *     <
00001F68  E84C                    1724      LSR.W       #4, D4
00001F6A  1204                    1725      MOVE.B      D4, D1
00001F6C  6100 F368               1726      BSR         CONVERT_TO_ASCII
00001F70  6100 0004               1727      BSR         ADD_CHAR
00001F74  4E75                    1728      RTS
00001F76                          1729                                     *continue converting            
00001F76                          1730  ADD_CHAR ********
00001F76  16C1                    1731      MOVE.B      D1, (A3)+
00001F78  4E75                    1732      RTS
00001F7A                          1733  
00001F7A                          1734  COMMA
00001F7A  16F9 000035D4           1735      MOVE.B      M_COMMA, (A3)+
00001F80  4E75                    1736      RTS
00001F82                          1737      
00001F82                          1738  POUND
00001F82  16F9 000035D6           1739      MOVE.B      M_POUND, (A3)+
00001F88  4E75                    1740      RTS
00001F8A                          1741          
00001F8A                          1742  DOT
00001F8A  16F9 000035D8           1743      MOVE.B      M_DOT, (A3)+
00001F90  4E75                    1744      RTS   
00001F92                          1745  
00001F92                          1746  WORD
00001F92  16F9 000035DA           1747      MOVE.B      M_WORD, (A3)+
00001F98  4EB9 00001FDC           1748      JSR         SPACE
00001F9E  4E75                    1749      RTS
00001FA0                          1750  
00001FA0                          1751  BYTE
00001FA0  16F9 000035DC           1752      MOVE.B      M_BYTE, (A3)+
00001FA6  4EB9 00001FDC           1753      JSR         SPACE
00001FAC  4E75                    1754      RTS
00001FAE                          1755      
00001FAE                          1756  LONG
00001FAE  16F9 000035DE           1757      MOVE.B      M_LONG, (A3)+
00001FB4                          1758      
00001FB4  4EB9 00001FDC           1759      JSR         SPACE
00001FBA  4E75                    1760      RTS
00001FBC                          1761      
00001FBC                          1762  OPEN
00001FBC  16F9 000035E0           1763      MOVE.B      M_OPEN, (A3)+
00001FC2  4E75                    1764      RTS
00001FC4                          1765  
00001FC4                          1766  CLOSE
00001FC4  16F9 000035E2           1767      MOVE.B      M_CLOSE, (A3)+
00001FCA  4E75                    1768      RTS
00001FCC                          1769      
00001FCC                          1770  PLUS
00001FCC  16F9 000035E4           1771      MOVE.B      M_PLUS, (A3)+
00001FD2  4E75                    1772      RTS
00001FD4                          1773      
00001FD4                          1774  SUB
00001FD4  16F9 000035E6           1775      MOVE.B      M_SUB, (A3)+
00001FDA  4E75                    1776      RTS
00001FDC                          1777      
00001FDC                          1778  SPACE
00001FDC  16F9 00003554           1779      MOVE.B      M_SPACE, (A3)+
00001FE2  4E75                    1780      RTS    
00001FE4                          1781      
00001FE4                          1782  CASH
00001FE4  16F9 000035D2           1783      MOVE.B      M_CASH, (A3)+
00001FEA  4E75                    1784      RTS
00001FEC                          1785  
00001FEC                          1786  CC
00001FEC  16F9 000035EC           1787      MOVE.B      M_CC, (A3)+
00001FF2  4E75                    1788      RTS
00001FF4                          1789  GT
00001FF4  16F9 000035EF           1790      MOVE.B      M_GT, (A3)+
00001FFA  4E75                    1791      RTS
00001FFC                          1792  
00001FFC                          1793  LE
00001FFC  16F9 000035F2           1794      MOVE.B      M_LE, (A3)+
00002002  4E75                    1795      RTS
00002004                          1796      
00002004                          1797  SLASH
00002004  16F9 000035F5           1798      MOVE.B      M_SLASH, (A3)+
0000200A  4E75                    1799      RTS
0000200C                          1800      
0000200C                          1801  INVALID
0000200C  16BC 0000               1802      MOVE.B      #00, (A3)
00002010  6000 F1D8               1803      BRA         INVALID_OPCODE
00002014                          1804      
00002014                          1805  
00002014  =0000000D               1806  CR      EQU     $0D
00002014  =0000000A               1807  LF      EQU     $0A
00002014                          1808  
00002014                          1809  
00002014                          1810  
00002014                          1811  
00002014                          1812  
00002014                          1813  
00002014                          1814  
00002014                          1815  
00002014                          1816  
00002014                          1817  
00002014                          1818  
00002014                          1819  
00002014                          1820  
00002014                          1821  
00002014                          1822  
00002014                          1823  
00002014                          1824  
00002014                          1825  
00002014                          1826  -------------------- end include --------------------
00002014                          1827      INCLUDE         'testingFile.x68'
00003000                          1828      ORG    $3000
00003000                          1829          
00003000                          1830  
00003000                          1831      *NOP* DONE
00003000                          1832      *NOP
00003000                          1833      
00003000                          1834      *MOVE* DONE
00003000                          1835      *MOVE SOURCE: DATA REGISTER -> DN
00003000= 44 41 54 41 20 20 ...   1836  TEST1        DC.B 'DATA    ',0
0000300A  1401                    1837      MOVE.B      D1, D2
0000300C= 44 41 54 41 20 20 ...   1838  TEST2        DC.B 'DATA    ',0
00003016  1281                    1839      MOVE.B      D1, (A1)
00003018  12C1                    1840      MOVE.B      D1, (A1)+
0000301A  1301                    1841      MOVE.B      D1, -(A1)
0000301C  11C1 1234               1842      MOVE.B      D1, $1234
00003020  13C1 12345678           1843      MOVE.B      D1, $12345678
00003026  3401                    1844      MOVE.W      D1, D2
00003028  3281                    1845      MOVE.W      D1, (A1)
0000302A  32C1                    1846      MOVE.W      D1, (A1)+
0000302C  3301                    1847      MOVE.W      D1, -(A1)
0000302E  31C1 1234               1848      MOVE.W      D1, $1234
00003032  33C1 12345678           1849      MOVE.W      D1, $12345678
00003038  2401                    1850      MOVE.L      D1, D2
0000303A  2281                    1851      MOVE.L      D1, (A1)
0000303C  22C1                    1852      MOVE.L      D1, (A1)+
0000303E  2301                    1853      MOVE.L      D1, -(A1)
00003040  21C1 1234               1854      MOVE.L      D1, $1234
00003044  23C1 12345678           1855      MOVE.L      D1, $12345678
0000304A                          1856      *MOVE SOURCE: ADDRESS REGISTER -> AN
0000304A                          1857      *INVALID: MOVE.B      
0000304A  3209                    1858      MOVE.W       A1, D1
0000304C  3449                    1859      MOVE.W       A1, A2
0000304E  3489                    1860      MOVE.W       A1, (A2)
00003050  3509                    1861      MOVE.W       A1, -(A2)
00003052  34C9                    1862      MOVE.W       A1, (A2)+
00003054  31C9 1234               1863      MOVE.W       A1, $1234
00003058  33C9 12345678           1864      MOVE.W       A1, $12345678
0000305E  2209                    1865      MOVE.L      A1, D1
00003060  2449                    1866      MOVE.L      A1, A2
00003062  2489                    1867      MOVE.L      A1, (A2)
00003064  2509                    1868      MOVE.L      A1, -(A2)
00003066  24C9                    1869      MOVE.L      A1, (A2)+
00003068  21C9 1234               1870      MOVE.L      A1, $1234
0000306C  23C9 12345678           1871      MOVE.L      A1, $12345678
00003072                          1872      *MOVE SOURCE: ADDRESS REGISTER INDIRECT -> (AN)
00003072  1211                    1873      MOVE.B       (A1), D1
00003074  1491                    1874      MOVE.B       (A1), (A2)
00003076  1511                    1875      MOVE.B       (A1), -(A2)
00003078  14D1                    1876      MOVE.B       (A1), (A2)+
0000307A  11D1 1234               1877      MOVE.B       (A1), $1234
0000307E  13D1 12345678           1878      MOVE.B       (A1), $12345678
00003084  3211                    1879      MOVE.W       (A1), D1
00003086  3491                    1880      MOVE.W       (A1), (A2)
00003088  3511                    1881      MOVE.W       (A1), -(A2)
0000308A  34D1                    1882      MOVE.W       (A1), (A2)+
0000308C  31D1 1234               1883      MOVE.W       (A1), $1234
00003090  33D1 12345678           1884      MOVE.W       (A1), $12345678
00003096  2211                    1885      MOVE.L      (A1), D1
00003098  2491                    1886      MOVE.L      (A1), (A2)
0000309A  2511                    1887      MOVE.L      (A1), -(A2)
0000309C  24D1                    1888      MOVE.L      (A1), (A2)+
0000309E  21D1 1234               1889      MOVE.L      (A1), $1234
000030A2  23D1 12345678           1890      MOVE.L      (A1), $12345678
000030A8                          1891      *MOVE SOURCE: ADDRESS REG IND POST INCREMENT
000030A8  1219                    1892      MOVE.B       (A1)+, D1
000030AA  1499                    1893      MOVE.B       (A1)+, (A2)
000030AC  14D9                    1894      MOVE.B       (A1)+, (A2)+
000030AE  1519                    1895      MOVE.B       (A1)+, -(A2)
000030B0  11D9 1234               1896      MOVE.B       (A1)+, $1234
000030B4  13D9 12345678           1897      MOVE.B       (A1)+, $12345678
000030BA  3219                    1898      MOVE.W       (A1)+, D1
000030BC  3499                    1899      MOVE.W       (A1)+, (A2)
000030BE  34D9                    1900      MOVE.W       (A1)+, (A2)+
000030C0  3519                    1901      MOVE.W       (A1)+, -(A2)
000030C2  31D9 1234               1902      MOVE.W       (A1)+, $1234
000030C6  33D9 12345678           1903      MOVE.W       (A1)+, $12345678
000030CC  2219                    1904      MOVE.L      (A1)+, D1
000030CE  2499                    1905      MOVE.L      (A1)+, (A2)
000030D0  24D9                    1906      MOVE.L      (A1)+, (A2)+
000030D2  2519                    1907      MOVE.L      (A1)+, -(A2)
000030D4  21D9 1234               1908      MOVE.L      (A1)+, $1234
000030D8  23D9 12345678           1909      MOVE.L      (A1)+, $12345678
000030DE                          1910      *MOVE SOURCE: ADDRESS REG IND PRE DECREMENT
000030DE  1221                    1911      MOVE.B       -(A1), D1
000030E0  14A1                    1912      MOVE.B       -(A1), (A2)
000030E2  14E1                    1913      MOVE.B       -(A1), (A2)+
000030E4  1521                    1914      MOVE.B       -(A1), -(A2)
000030E6  11E1 1234               1915      MOVE.B       -(A1), $1234
000030EA  13E1 12345678           1916      MOVE.B       -(A1), $12345678
000030F0  3221                    1917      MOVE.W       -(A1), D1
000030F2  34A1                    1918      MOVE.W       -(A1), (A2)
000030F4  34E1                    1919      MOVE.W       -(A1), (A2)+
000030F6  3521                    1920      MOVE.W       -(A1), -(A2)
000030F8  31E1 1234               1921      MOVE.W       -(A1), $1234
000030FC  33E1 12345678           1922      MOVE.W       -(A1), $12345678
00003102  2221                    1923      MOVE.L      -(A1), D1
00003104  24A1                    1924      MOVE.L      -(A1), (A2)
00003106  24E1                    1925      MOVE.L      -(A1), (A2)+
00003108  2521                    1926      MOVE.L      -(A1), -(A2)
0000310A  21E1 1234               1927      MOVE.L      -(A1), $1234
0000310E  23E1 12345678           1928      MOVE.L      -(A1), $12345678
00003114                          1929      *MOVE SOURCE: ABSOLUTE WORD -> (XXX).W      
00003114  1238 1234               1930      MOVE.B       $1234, D1
00003118  14B8 1235               1931      MOVE.B       $1235, (A2)
0000311C  14F9 00009987           1932      MOVE.B       $9987, (A2)+
00003122  1538 5543               1933      MOVE.B       $5543, -(A2)
00003126  11F8 1123 1111          1934      MOVE.B       $1123, $1111
0000312C  13F9 00009980 AAA89999  1935      MOVE.B       $9980, $AAA89999
00003136  3238 1234               1936      MOVE.W       $1234, D1
0000313A  34B8 1235               1937      MOVE.W       $1235, (A2)
0000313E  34F9 00009987           1938      MOVE.W       $9987, (A2)+
00003144  3538 5543               1939      MOVE.W       $5543, -(A2)
00003148  31F8 1123 1111          1940      MOVE.W       $1123, $1111
0000314E  33F9 00009980 AAA89999  1941      MOVE.W       $9980, $AAA89999
00003158  2238 1234               1942      MOVE.L      $1234, D1
0000315C  24B8 1235               1943      MOVE.L      $1235, (A2)
00003160  24F9 00009987           1944      MOVE.L      $9987, (A2)+
00003166  2538 5543               1945      MOVE.L      $5543, -(A2)
0000316A  21F8 1123 1111          1946      MOVE.L      $1123, $1111
00003170  23F9 00009980 AAA89999  1947      MOVE.L      $9980, $AAA89999
0000317A                          1948      *MOVE SOURCE: ABSOLUTE LONG -> (XXX).L
0000317A  1239 0FFF8111           1949      MOVE.B       $0FFF8111, D1
00003180  12B9 0FFF8222           1950      MOVE.B       $0FFF8222, (A1)
00003186  12F9 0FFF9999           1951      MOVE.B       $0FFF9999, (A1)+
0000318C  1339 0FFF1111           1952      MOVE.B       $0FFF1111, -(A1)
00003192  13F9 0FFF8799 00009879  1953      MOVE.B       $0FFF8799, $9879
0000319C  13F9 0FFF1222 0FFF8878  1954      MOVE.B       $0FFF1222, $0FFF8878
000031A6  3239 0FFF8111           1955      MOVE.W       $0FFF8111, D1
000031AC  32B9 0FFF8222           1956      MOVE.W       $0FFF8222, (A1)
000031B2  32F9 0FFF9999           1957      MOVE.W       $0FFF9999, (A1)+
000031B8  3339 0FFF1111           1958      MOVE.W       $0FFF1111, -(A1)
000031BE  33F9 0FFF8799 00009879  1959      MOVE.W       $0FFF8799, $9879
000031C8  33F9 0FFF1222 0FFF8878  1960      MOVE.W       $0FFF1222, $0FFF8878
000031D2  2239 0FFF8111           1961      MOVE.L      $0FFF8111, D1
000031D8  22B9 0FFF8222           1962      MOVE.L      $0FFF8222, (A1)
000031DE  22F9 0FFF9999           1963      MOVE.L      $0FFF9999, (A1)+
000031E4  2339 0FFF1111           1964      MOVE.L      $0FFF1111, -(A1)
000031EA  23F9 0FFF8799 00009879  1965      MOVE.L      $0FFF8799, $9879
000031F4  23F9 0FFF1222 0FFF8878  1966      MOVE.L      $0FFF1222, $0FFF8878
000031FE                          1967      *MOVE SOURCE: IMMEDIATE DATA -> #<DATA>
000031FE  123C 0001               1968      MOVE.B       #1, D1
00003202  12BC 0002               1969      MOVE.B       #2, (A1)
00003206  12FC 0003               1970      MOVE.B       #3, (A1)+
0000320A  133C 0004               1971      MOVE.B       #4, -(A1)
0000320E  11FC 0005 1234          1972      MOVE.B       #5, $1234
00003214  13FC 0006 0FFF1234      1973      MOVE.B       #6, $0FFF1234
0000321C  323C 0457               1974      MOVE.W       #1111, D1
00003220  32BC 08AE               1975      MOVE.W       #2222, (A1)
00003224  32FC 0D05               1976      MOVE.W       #3333, (A1)+
00003228  333C 115C               1977      MOVE.W       #4444, -(A1)
0000322C  31FC 15B3 1234          1978      MOVE.W       #5555, $1234
00003232  33FC 1A0A 0FFF1234      1979      MOVE.W       #6666, $0FFF1234
0000323A  223C 00A98B42           1980      MOVE.L      #11111234, D1
00003240  22BC 00BC53CE           1981      MOVE.L      #12342222, (A1)
00003246  22FC 00BC5825           1982      MOVE.L      #12343333, (A1)+
0000324C  233C 00BC5C7C           1983      MOVE.L      #12344444, -(A1)
00003252  21FC 00BC60D3 1234      1984      MOVE.L      #12345555, $1234
0000325A  23FC 00BC652A 0FFF1234  1985      MOVE.L      #12346666, $0FFF1234
00003264                          1986  
00003264                          1987      *MOVEA* (good) BYTES INVALID
00003264  3442                    1988      MOVEA.W       D2, A2
00003266  344B                    1989      MOVEA.W       A3, A2
00003268  3453                    1990      MOVEA.W       (A3), A2
0000326A  345B                    1991      MOVEA.W       (A3)+, A2
0000326C  3463                    1992      MOVEA.W       -(A3), A2
0000326E  3478 1050               1993      MOVEA.W       $1050, A2
00003272  3479 000F1050           1994      MOVEA.W       $000F1050, A2
00003278  347C 1050               1995      MOVEA.W       #$1050, A2
0000327C  2442                    1996      MOVEA.L      D2, A2
0000327E  244B                    1997      MOVEA.L      A3, A2
00003280  2453                    1998      MOVEA.L      (A3), A2
00003282  245B                    1999      MOVEA.L      (A3)+, A2
00003284  2463                    2000      MOVEA.L      -(A3), A2
00003286  2478 1050               2001      MOVEA.L      $1050, A2
0000328A  2479 000F1050           2002      MOVEA.L      $000F1050, A2
00003290  247C 00001050           2003      MOVEA.L      #$1050, A2
00003296                          2004      
00003296                          2005      *MOVEQ* (good) ONLY WORKS ON LONGS
00003296  74FF                    2006      MOVEQ.L      #255, D2
00003298  7411                    2007      MOVEQ.L      #$00000011, D2
0000329A                          2008      
0000329A                          2009      *MOVEM* move multiple registers... saving this for last i think
0000329A                          2010      
0000329A                          2011      *ADD* this one also weird with the whole effecive address thing...
0000329A                          2012      
0000329A                          2013      *ADDA* *good) ADDA CANT OPERATE ON BYTES
0000329A  D4C2                    2014      ADDA.W       D2, A2
0000329C  D4CB                    2015      ADDA.W       A3, A2
0000329E  D4D3                    2016      ADDA.W       (A3), A2
000032A0  D4DB                    2017      ADDA.W       (A3)+, A2
000032A2  D4E3                    2018      ADDA.W       -(A3), A2
000032A4  D4F8 1050               2019      ADDA.W       $1050, A2
000032A8  D4F9 000F1050           2020      ADDA.W       $000F1050, A2
000032AE  D4FC 1050               2021      ADDA.W       #$1050, A2
000032B2  D5C2                    2022      ADDA.L      D2, A2
000032B4  D5CB                    2023      ADDA.L      A3, A2
000032B6  D5D3                    2024      ADDA.L      (A3), A2
000032B8  D5DB                    2025      ADDA.L      (A3)+, A2
000032BA  D5E3                    2026      ADDA.L      -(A3), A2
000032BC  D5F8 1050               2027      ADDA.L      $1050, A2
000032C0  D5F9 000F1050           2028      ADDA.L      $000F1050, A2
000032C6  D5FC 00001050           2029      ADDA.L      #$1050, A2
000032CC                          2030      
000032CC                          2031      *ADDI*  (good) BYTE DONE
000032CC  0602 0012               2032      ADDI.B       #$12, D2
000032D0  0612 0045               2033      ADDI.B       #$45, (A2)
000032D4  061A 0056               2034      ADDI.B       #$56, (A2)+
000032D8  0622 0067               2035      ADDI.B       #$67, -(A2)
000032DC  0638 0056 1060          2036      ADDI.B       #$56, $1060
000032E2  0639 0089 000F1060      2037      ADDI.B       #$89, $000F1060
000032EA  0642 1234               2038      ADDI.W       #$1234, D2
000032EE  0652 2345               2039      ADDI.W       #$2345, (A2)
000032F2  065A 3456               2040      ADDI.W       #$3456, (A2)+
000032F6  0662 4567               2041      ADDI.W       #$4567, -(A2)
000032FA  0678 5678 1060          2042      ADDI.W       #$5678, $1060
00003300  0679 6789 000F1060      2043      ADDI.W       #$6789, $000F1060
00003308  0682 00001234           2044      ADDI.L      #$1234, D2
0000330E  0692 00002345           2045      ADDI.L      #$2345, (A2)
00003314  069A 00003456           2046      ADDI.L      #$3456, (A2)+
0000331A  06A2 00004567           2047      ADDI.L      #$4567, -(A2)
00003320  06B8 00005678 1060      2048      ADDI.L      #$5678, $1060
00003328  06B9 00006789 000F1060  2049      ADDI.L      #$6789, $000F1060
00003332                          2050      
00003332                          2051      *ADDQ* (good) BYTE DONE, cant move a byte into an address reg...
00003332  5203                    2052      ADDQ.B        #1, D3
00003334  561B                    2053      ADDQ.B        #3, (A3)+
00003336  5823                    2054      ADDQ.B        #4, -(A3)
00003338  5A38 1234               2055      ADDQ.B        #5, $1234
0000333C  5C39 000F1234           2056      ADDQ.B        #6, $000F1234
00003342  5243                    2057      ADDQ.W        #1, D3
00003344  544B                    2058      ADDQ.W        #2, A3
00003346  565B                    2059      ADDQ.W        #3, (A3)+
00003348  5863                    2060      ADDQ.W        #4, -(A3)
0000334A  5A78 1234               2061      ADDQ.W        #5, $1234
0000334E  5C79 000F1234           2062      ADDQ.W        #6, $000F1234
00003354  5283                    2063      ADDQ.L       #1, D3
00003356  548B                    2064      ADDQ.L       #2, A3
00003358  569B                    2065      ADDQ.L       #3, (A3)+
0000335A  58A3                    2066      ADDQ.L       #4, -(A3)
0000335C  5AB8 1234               2067      ADDQ.L       #5, $1234
00003360  5CB9 000F1234           2068      ADDQ.L       #6, $000F1234
00003366                          2069      
00003366                          2070      *SUB*  same with the effective address thing
00003366                          2071      
00003366                          2072      *MULS*  same as sub and add
00003366                          2073      
00003366                          2074      *DIVU* same as sub add muls
00003366                          2075      
00003366                          2076      *LEA*   (good)
00003366  47D4                    2077      LEA (A4), A3
00003368  47F8 1234               2078      LEA $1234, A3
0000336C  47F9 12345678           2079      LEA $12345678, A3
00003372  47F9 000033E8           2080      LEA TEST_MESSAGE, A3
00003378                          2081      
00003378                          2082      *CLR*   (good) BYTE DONE
00003378  4201                    2083      CLR.B         D1
0000337A  4211                    2084      CLR.B         (A1)
0000337C  4219                    2085      CLR.B         (A1)+
0000337E  4221                    2086      CLR.B         -(A1)
00003380  4238 1234               2087      CLR.B         $1234
00003384  4239 12345678           2088      CLR.B         $12345678
0000338A  4241                    2089      CLR.W         D1
0000338C  4251                    2090      CLR.W         (A1)
0000338E  4259                    2091      CLR.W         (A1)+
00003390  4261                    2092      CLR.W         -(A1)
00003392  4278 1234               2093      CLR.W         $1234
00003396  4279 12345678           2094      CLR.W         $12345678
0000339C  4281                    2095      CLR.L        D1
0000339E  4291                    2096      CLR.L        (A1)
000033A0  4299                    2097      CLR.L        (A1)+
000033A2  42A1                    2098      CLR.L        -(A1)
000033A4  42B8 1234               2099      CLR.L        $1234
000033A8  42B9 12345678           2100      CLR.L        $12345678
000033AE                          2101      
000033AE                          2102      
000033AE                          2103      *AND*  damn it gonna have to look this up on github
000033AE                          2104      
000033AE                          2105      *OR*    and this
000033AE                          2106      
000033AE                          2107      *LSL* look up this
000033AE                          2108      
000033AE                          2109      *LSR*  and this
000033AE                          2110      
000033AE                          2111      *ASR*  and this
000033AE                          2112      
000033AE                          2113      *ASL*  and this
000033AE                          2114      
000033AE                          2115      *ROL*  and this
000033AE                          2116      
000033AE                          2117      *ROR*  and this
000033AE                          2118      
000033AE                          2119      *CMP*   (good) BYTE DONE.... cant do     CMP.B         A1, D2
000033AE  B401                    2120      CMP.B         D1, D2
000033B0  B411                    2121      CMP.B         (A1), D2
000033B2  B419                    2122      CMP.B         (A1)+, D2
000033B4  B421                    2123      CMP.B         -(A1), D2
000033B6  B438 1000               2124      CMP.B         $1000, D2
000033BA  B438 1002               2125      CMP.B         $00001002, D2
000033BE  B441                    2126      CMP.W         D1, D2
000033C0  B449                    2127      CMP.W         A1, D2
000033C2  B451                    2128      CMP.W         (A1), D2
000033C4  B459                    2129      CMP.W         (A1)+, D2
000033C6  B461                    2130      CMP.W         -(A1), D2
000033C8  B478 1000               2131      CMP.W         $1000, D2
000033CC  B478 1002               2132      CMP.W         $00001002, D2
000033D0  B481                    2133      CMP.L        D1, D2
000033D2  B489                    2134      CMP.L        A1, D2
000033D4  B491                    2135      CMP.L        (A1), D2
000033D6  B499                    2136      CMP.L        (A1)+, D2
000033D8  B4A1                    2137      CMP.L        -(A1), D2
000033DA  B4B8 1000               2138      CMP.L        $1000, D2
000033DE  B4B8 1002               2139      CMP.L        $00001002, D2
000033E2                          2140      
000033E2                          2141      *BCC*  look these up
000033E2                          2142      
000033E2                          2143      *BGT*   look these up 
000033E2                          2144      
000033E2                          2145      *BLE*   look these up
000033E2                          2146      
000033E2                          2147      *JSR*  (NOT SURE HOW TO TEST THIS CORRECTLY
000033E2                          2148      *JSR $1234
000033E2                          2149      *JSR $12345678
000033E2                          2150      *JSR (A4)
000033E2                          2151      
000033E2                          2152      *RTS* (good)
000033E2  4E75                    2153      RTS
000033E4                          2154      
000033E4                          2155      
000033E4                          2156      
000033E4  FFFF FFFF               2157      SIMHALT             ; halt simulator
000033E8                          2158  
000033E8= 49 20 4C 4F 56 45 ...   2159  TEST_MESSAGE    DC.B       'I LOVE APPLES',0
000033F6                          2160  
000033F6                          2161  
000033F6                          2162  
000033F6                          2163  
000033F6                          2164  
000033F6                          2165  
000033F6                          2166  
000033F6                          2167  
000033F6                          2168  
000033F6                          2169  
000033F6                          2170  
000033F6                          2171  -------------------- end include --------------------
000033F6                          2172  END
000033F6  43F9 00003545           2173      LEA             M_END,A1
000033FC  103C 000E               2174      MOVE.B          #14,D0
00003400  4E4F                    2175      TRAP            #15
00003402  FFFF FFFF               2176      SIMHALT             ; halt simulator
00003406                          2177  
00003406  =0000000D               2178  CR          EQU     $0D
00003406  =0000000A               2179  LF          EQU     $0A
00003406                          2180  
00003406= 50 6C 65 61 73 65 ...   2181  M_INPUT_START DC.B 'Please enter starting memory address in hexadecimal:',CR,LF,0
0000343D= 50 6C 65 61 73 65 ...   2182  M_INPUT_END   DC.B 'Please enter ending memory address in hexadecimal:',CR,LF,0
00003472= 49 6E 76 61 6C 69 ...   2183  M_INVALID     DC.B 'Invalid value. Please enter a valid value: ',CR,LF,0
000034A0= 45 71 75 61 6C 20 ...   2184  M_EQUAL       DC.B 'Equal values. No memory read. Please enter new values',CR,LF,0
000034D8= 44 41 54 41 20 20 ...   2185  M_DATA        DC.B 'DATA    ',0
000034E1= 20 20 20 20 00          2186  M_TAB         DC.B '    ',0
000034E6= 50 72 65 73 73 20 ...   2187  M_PRESS_CONT  DC.B 'Press any key to continue',0
00003500= 46 69 6E 69 73 68 ...   2188  M_FINISHED    DC.B 'Finished Reading Memory',CR,LF,0
0000351A= 57 6F 75 6C 64 20 ...   2189  M_CONTINUE    DC.B 'Would you like to read memory again? (Y/N)',0
00003545= 50 72 6F 67 72 61 ...   2190  M_END         DC.B 'Program Exit',CR,LF,0
00003554                          2191  
00003554  =00000500               2192  STRING_START    EQU     $0500
00003554  =00000400               2193  DATA_START      EQU     $0400
00003554                          2194  
00003554  =00000100               2195  MEM_START       EQU     $0100
00003554  =00000200               2196  MEM_END         EQU     $0200
00003554                          2197  
00003554= 20 00                   2198  M_SPACE       DC.B  ' ',0
00003556= 0D 0A 00                2199  M_NEW_LINE    DC.B  '',CR,LF,0
00003559                          2200  
00003559= 41 44 44 49 00          2201  ADDI    DC.B    'ADDI',0
0000355E= 4D 4F 56 45 00          2202  MOVE    DC.B    'MOVE',0
00003563= 4D 4F 56 45 41 00       2203  MOVEA   DC.B    'MOVEA',0
00003569= 43 4C 52 00             2204  OPCLR   DC.B    'CLR',0
0000356D= 4C 45 41 00             2205  OPLEA   DC.B    'LEA',0
00003571= 4A 53 52 00             2206  OPJSR   DC.B    'JSR',0
00003575= 4E 4F 50 00             2207  OPNOP   DC.B    'NOP',0
00003579= 52 54 53 00             2208  OPRTS   DC.B    'RTS',0
0000357D= 4D 4F 56 45 4D 00       2209  MOVEM   DC.B    'MOVEM',0
00003583= 41 44 44 51 00          2210  ADDQ    DC.B    'ADDQ',0
00003588= 42 00                   2211  Bcc     DC.B    'B',0
0000358A= 4D 4F 56 45 51 00       2212  MOVEQ   DC.B    'MOVEQ',0
00003590= 44 49 56 55 00          2213  DIVU    DC.B    'DIVU',0
00003595= 4F 52 00                2214  OR      DC.B    'OR',0
00003598= 53 55 42 00             2215  OPSUB   DC.B    'SUB',0
0000359C= 43 4D 50 00             2216  CMP     DC.B    'CMP',0
000035A0= 4D 55 4C 53 00          2217  MULS    DC.B    'MULS',0
000035A5= 41 4E 44 00             2218  AND     DC.B    'AND',0
000035A9= 41 44 44 00             2219  ADD     DC.B    'ADD',0
000035AD= 41 44 44 41 00          2220  ADDA    DC.B    'ADDA',0
000035B2= 4C 53 4C 00             2221  LSL     DC.B    'LSL',0
000035B6= 4C 53 52 00             2222  LSR     DC.B    'LSR',0
000035BA= 41 53 4C 00             2223  ASL     DC.B    'ASL',0
000035BE= 41 53 52 00             2224  ASR     DC.B    'ASR',0
000035C2= 52 4F 4C 00             2225  ROL     DC.B    'ROL',0
000035C6= 52 4F 52 00             2226  ROR     DC.B    'ROR',0
000035CA= 49 4E 56 41 4C 49 ...   2227  M_INVAL DC.B 'INVALID',0
000035D2= 24 00                   2228  M_CASH  DC.B '$',0
000035D4                          2229  *M_SPACE DC.B ' ',0
000035D4= 2C 00                   2230  M_COMMA DC.B ',',0
000035D6= 23 00                   2231  M_POUND DC.B '#',0
000035D8= 2E 00                   2232  M_DOT   DC.B '.',0
000035DA= 57 00                   2233  M_WORD  DC.B 'W',0
000035DC= 42 00                   2234  M_BYTE  DC.B 'B',0
000035DE= 4C 00                   2235  M_LONG  DC.B 'L',0
000035E0= 28 00                   2236  M_OPEN  DC.B '(',0
000035E2= 29 00                   2237  M_CLOSE DC.B ')',0
000035E4= 2B 00                   2238  M_PLUS  DC.B '+',0
000035E6= 2D 00                   2239  M_SUB   DC.B '-',0
000035E8= 44 00                   2240  M_DREG  DC.B 'D',0
000035EA= 41 00                   2241  M_AREG  DC.B 'A',0
000035EC= 43 43 00                2242  M_CC    DC.B 'CC',0
000035EF= 47 54 00                2243  M_GT    DC.B 'GT',0
000035F2= 4C 45 00                2244  M_LE    DC.B 'LE',0
000035F5= 2F 00                   2245  M_SLASH DC.B '/',0
000035F7                          2246  
000035F7                          2247  
000035F7                          2248  STOP:
000035F7                          2249      END    MAIN

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSL_6              1DC8
ABSW_5              1DB2
ADD                 35A9
ADDA                35AD
ADDI                3559
ADDI_2              1D88
ADDI_ERROR_CHECK    1CD6
ADDM_4              1DA6
ADDP_3              1D9A
ADDQ                3583
ADDRESS_REGISTERS   1C4E
ADDR_1              1D7A
ADD_CHAR            1F76
ADD_ERROR_CHECK     1CBC
ALPH_CHAR           12E8
AND                 35A5
ASL                 35BA
ASR                 35BE
BCC                 3588
BYEBYE              1CAE
BYTE                1FA0
CASH                1FE4
CC                  1FEC
CHECK_TYPE          1C72
CLOSE               1FC4
CMP                 359C
COMMA               1F7A
COMMA_SPACE         1C86
COMMA_SPACE2        1C96
CONTINUE_YN         1192
CONVERT_TO_ASCII    12D6
CR                  D
DATA                131E
DATA_0              1D6C
DATA_START          400
DIVU                3590
DN_VERSION          17CC
DONE                1AF8
DONE_PRINTING       1CA6
DOT                 1F8A
EA2                 1C22
EAP                 1BDE
EAS                 1BE6
EAT_INVALID         1D34
EA_ADD              17AC
EA_ADDA             1922
EA_ADDI             1866
EA_ADDQ             18C8
EA_BCC              1B5A
EA_CLR              1A26
EA_CMP              1B00
EA_JSR              1B7E
EA_LEA              19CE
EA_LSD              1A6C
EA_MOVE             16A6
EA_MOVEA            171A
EA_MOVEM            1BBC
EA_MOVEQ            1772
EA_MULS             197C
EA_PRINT_ADDRESS    1C60
EA_SHIFT            1AC0
EA_VERSION          1816
EFFECTIVE_ADDRESSING  1192
END                 33F6
END_PRINT_DATA_LOOP  1250
EQUAL_ERROR         113A
FOR_2               1C50
FOR_LOOP            1C2C
GET_DATA            1E82
GET_NEXT_INPUT      1062
GET_OPMODE          1E32
GET_OPMODE_MATH     1E4A
GET_REG             1E28
GET_SIZE            1E08
GET_SIZE_ADDI       1E9C
GT                  1FF4
IMME_7              1DEC
IM_NEW_LINE         12F6
IM_SPACE            1304
INCREMENT_LINE      11E2
INPUT_END           1036
INPUT_START         1006
INVALID             200C
INVALID_CHAR_ERROR  10CE
INVALID_OPCODE      11EA
INVALID_OPCODE_CONT  11FA
JFF                 1C5C
JFZ                 1C38
LE                  1FFC
LEA_ERROR_CHECK     1CE8
LF                  A
LONG                1FAE
LSL                 35B2
LSR                 35B6
MAIN                1000
MEM_END             200
MEM_START           100
MODE_CHOOSER        1EFE
MODE_JUMP           1D3C
MOVE                355E
MOVEA               3563
MOVEM               357D
MOVEM_ERROR_CHECK   1D12
MOVEQ               358A
MOVE_ERROR_CHECK    1CB2
MULS                35A0
M_AREG              35EA
M_BYTE              35DC
M_CASH              35D2
M_CC                35EC
M_CLOSE             35E2
M_COMMA             35D4
M_CONTINUE          351A
M_DATA              34D8
M_DOT               35D8
M_DREG              35E8
M_END               3545
M_EQUAL             34A0
M_FINISHED          3500
M_GT                35EF
M_INPUT_END         343D
M_INPUT_START       3406
M_INVAL             35CA
M_INVALID           3472
M_LE                35F2
M_LONG              35DE
M_NEW_LINE          3556
M_OPEN              35E0
M_PLUS              35E4
M_POUND             35D6
M_PRESS_CONT        34E6
M_SLASH             35F5
M_SPACE             3554
M_SUB               35E6
M_TAB               34E1
M_WORD              35DA
NEW_MODE            1F08
NUMERIC_CHAR        12E2
OP0000              13A6
OP0001              13B6
OP0010              13C6
OP0011              13CA
OP0100              1402
OP0101              14AA
OP0110              14BA
OP0111              14D4
OP1000              14E4
OP1001              151A
OP1011              152A
OP1100              153A
OP1101              1572
OP1110              15AA
OPCLR               3569
OPEN                1FBC
OPJSR               3571
OPLEA               356D
OPNOP               3575
OPRTS               3579
OPSUB               3598
OP_JTAB             1344
OR                  3595
OUTPUT_CHAR         12EE
OUTPUT_D1B          125A
OUTPUT_HEX          1F2C
PASTE_3             1684
PASTE_4             168C
PASTE_5             1696
PLUS                1FCC
POUND               1F82
PRESS_TO_CONTINUE   11C4
PRE_READ_MEMORY     1166
PRINT_8             1E96
PRINT_ADDRESS       1222
PRINT_ADDRESS_LOOP  1228
PRINT_BCC           1ECC
PRINT_CURRENT       1C3C
PRINT_DATA          1202
PRINT_DATA_ADDRESS  121A
PRINT_DATA_LOOP     123C
PRINT_LIST          1C1A
PRINT_OPCODE        129C
PRINT_OPCODE_EA     1280
READ_CHAR           1064
READ_CHAR_LOOP      1086
READ_MEMORY         111C
READ_MEMORY_CONT    1180
READ_MEMORY_LOOP    1168
REG_SIZE            1EE6
REMOVE_ZERO         1080
REMOVE_ZEROES       106E
RESTART             12B0
RETURN_TO_SUBROUTINE  12D4
ROL                 35C2
ROR                 35C6
SLASH               2004
SPACE               1FDC
STOP                35F7
STRING_START        500
SUB                 1FD4
SWAP_VALUES         114A
TAB                 1310
TEST                1108
TEST1               3000
TEST2               300C
TEST_MESSAGE        33E8
TO_EIGHT            1F22
TO_FIVE             1F28
TO_SIX              1F24
TYPE_CHOOSER        1EBC
VALIDATE_START_END  1128
VALID_CHAR          10F8
VALID_LETTER_LC     10F0
VALID_LETTER_UC     10E8
VALID_NUMBER        10E0
VALID_OPCODE        1276
VERIFY_OPCODE       132C
WORD                1F92
_ADD                158A
_ADDA               159A
_AND                1562
_ASD                1610
_ASL                162A
_ASR                163A
_CLR                144A
_DIVU               14FC
_JSR                146A
_LEA                145A
_LSD                15D8
_LSL                15F0
_LSR                1600
_MOVE               13E2
_MOVEA              13F2
_MOVEM              149A
_MULS               1552
_NOP                147A
_OR                 150C
_ROD                164A
_ROL                1664
_ROR                1674
_RTS                148A
