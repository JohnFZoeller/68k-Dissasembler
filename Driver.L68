00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/2/2016 2:36:46 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  MAIN:                  ; first instruction of program
00001000  1401                       9      MOVE.B          D1, D2
00001002  6000 0002                 10      BRA             INPUT_START
00001006                            11      
00001006                            12      INCLUDE         'Main.X68'
00001006                            13      
00001006                            14  
00001006                            15  INPUT_START
00001006  43F9 00002036             16      LEA         M_INPUT_START,A1      *load message
0000100C  103C 000E                 17      MOVE.B      #14,D0          *display string
00001010  4E4F                      18      TRAP        #15             *output string
00001012  227C 00000300             19      MOVE.L      #$0300,A1       *set address of register A1 for string
00001018  103C 0002                 20      MOVE.B      #2,D0           *input string into A1 Trap
0000101C  4E4F                      21      TRAP        #15             *input string from user
0000101E  6100 0040                 22      BSR         READ_CHAR       *check for valid input
00001022  23C3 00000100             23      MOVE.L      D3,MEM_START    *put the starting address in memory
00001028  B87C 0000                 24      CMP         #0,D4           *check the result register (D4)
0000102C  6700 0004                 25      BEQ         INPUT_END       *valid value. read the ending value
00001030  60D4                      26      BRA         INPUT_START     *invalid value. try inputting start value again    
00001032                            27      
00001032                            28  INPUT_END
00001032  43F9 0000206D             29      LEA         M_INPUT_END,A1  *load message
00001038  103C 000E                 30      MOVE.B      #14,D0          *display string
0000103C  4E4F                      31      TRAP        #15             *output string
0000103E  227C 00000300             32      MOVE.L      #$0300,A1       *set address of register A1 for string
00001044  103C 0002                 33      MOVE.B      #2,D0           *input string into A1 Trap
00001048  4E4F                      34      TRAP        #15             *input string from user
0000104A  6100 0014                 35      BSR         READ_CHAR       *check for valid input
0000104E  23C3 00000200             36      MOVE.L      D3,MEM_END      *put ending address into memory
00001054  B87C 0000                 37      CMP         #0,D4           *check the result register (D4)
00001058  6700 00BE                 38      BEQ         READ_MEMORY     *valid value. read the ending value
0000105C  60D4                      39      BRA         INPUT_END       *invalid value. try inputting start value again    
0000105E                            40      
0000105E                            41  GET_NEXT_INPUT
0000105E  4E75                      42      RTS
00001060                            43  
00001060                            44  READ_CHAR                       *verify that string is valid (all hexadecimal digits)
00001060  4243                      45      CLR         D3              *D3 will act as the total result
00001062  2849                      46      MOVE.L      A1,A4           *the stop address
00001064  143C 0006                 47      MOVE.B      #6,D2           *put 6 in D2
00001068  D8C2                      48      ADD.W       D2,A4           *A4 is now the stop address(A4)
0000106A                            49      
0000106A                            50  REMOVE_ZEROES
0000106A  4281                      51      CLR.L       D1              *D1 will act as the temporary value
0000106C  1211                      52      MOVE.B      (A1),D1         *read the byte from string
0000106E  143C 0030                 53      MOVE.B      #$30,D2         *put ascii zero in D2
00001072  B202                      54      CMP.B       D2,D1           *compare ascii zero and value of D1
00001074  6700 0006                 55      BEQ         REMOVE_ZERO     *skip over that character   
00001078  6000 0008                 56      BRA         READ_CHAR_LOOP  *begin converting characters to numerical values
0000107C                            57  REMOVE_ZERO
0000107C  5289                      58      ADD.L       #1,A1           *increment string start address
0000107E  528C                      59      ADD.L       #1,A4           *increment string end address
00001080  60E8                      60      BRA         REMOVE_ZEROES   *loop back and keep removing zeroes
00001082                            61  READ_CHAR_LOOP     
00001082  4281                      62      CLR.L       D1              *D1 will act as the temporary value
00001084  1211                      63      MOVE.B      (A1),D1         *read the byte from string
00001086  B27C 0000                 64      CMP         #0,D1           *compare 00 (NULL) and the byte ascii value in D1
0000108A  67D2                      65      BEQ         GET_NEXT_INPUT    *if you reached the end of the string, end loop
0000108C                            66      
0000108C  143C 0030                 67      MOVE.B      #$30,D2         *put ascii zero in D2
00001090  B202                      68      CMP.B       D2,D1           *compare ascii zero and value of D1
00001092  6D00 0036                 69      BLT         INVALID_CHAR_ERROR *branch on invalid (too small) ascii value   
00001096  143C 0066                 70      MOVE.B      #$66,D2         *put ascii f in D2
0000109A  B202                      71      CMP.B       D2,D1           *compare ascii f and value of D1
0000109C  6E2C                      72      BGT.B       INVALID_CHAR_ERROR *branch on invalid ascii value
0000109E  143C 0061                 73      MOVE.B      #$61,D2         *put ascii a in D2
000010A2  B202                      74      CMP.B       D2,D1           *compare ascii a and value of D1
000010A4  6C00 0046                 75      BGE         VALID_LETTER_LC *value is between a and f. Loop back.
000010A8                            76      
000010A8  143C 0039                 77      MOVE.B      #$39,D2         *put ascii 9 in D2
000010AC  B202                      78      CMP.B       D2,D1           *compare ascii 9 and value of D1
000010AE  6F00 002C                 79      BLE         VALID_NUMBER    *value between 0 and 9. Loop back.
000010B2                            80  
000010B2  143C 0041                 81      MOVE.B      #$41,D2         *put ascii A into D2
000010B6  B202                      82      CMP.B       D2,D1           *compare ascii A and value of D1
000010B8  6D00 0010                 83      BLT         INVALID_CHAR_ERROR    *value between 9 and A (Invalid)
000010BC                            84      
000010BC  143C 0046                 85      MOVE.B      #$46,D2         *put ascii F into D2
000010C0  B202                      86      CMP.B       D2,D1           *compare ascii F and value of D1
000010C2  6E00 0006                 87      BGT         INVALID_CHAR_ERROR    *value between F and a (Invalid)
000010C6                            88           
000010C6  6000 001C                 89      BRA         VALID_LETTER_UC *value is between A and F        
000010CA                            90  INVALID_CHAR_ERROR   
000010CA  43F9 000020A2             91      LEA         M_INVALID,A1    *load error message
000010D0  103C 000E                 92      MOVE.B      #14,D0          *display string trap
000010D4  4E4F                      93      TRAP        #15             *output error message
000010D6  183C 0001                 94      MOVE.B      #1,D4           *put invalid output in result register
000010DA  4E75                      95      RTS
000010DC                            96  VALID_NUMBER
000010DC  0401 0030                 97      SUB.B       #$30,D1         *get actual value from ascii value
000010E0  6000 0012                 98      BRA         VALID_CHAR      *read the next char in string
000010E4                            99  VALID_LETTER_UC
000010E4  0401 0037                100      SUB.B       #$37,D1         *get actual value from ascii value
000010E8  6000 000A                101      BRA         VALID_CHAR      *read the next char in string    
000010EC                           102  VALID_LETTER_LC
000010EC  0401 0057                103      SUB.B       #$57,D1         *get actual value from ascii value
000010F0  6000 0002                104      BRA         VALID_CHAR      *read the next char in string   
000010F4                           105  VALID_CHAR
000010F4  183C 0000                106      MOVE.B      #0,D4           *return valid value entry in D4    
000010F8  E98B                     107      LSL.L       #4,D3           *put hex digit in proper place
000010FA  D681                     108      ADD.L       D1,D3           *put new total in D3
000010FC  5289                     109      ADD.L       #1,A1           *increment address
000010FE  B8C9                     110      CMP         A1,A4           *if A1 > A4
00001100  6E80                     111      BGT         READ_CHAR_LOOP  *begin converting to float    
00001102  4E75                     112      RTS                         *loop back to INPUT_START || INPUT_END   
00001104                           113     
00001104                           114  TEST
00001104  23FC 00003000 00000100   115      MOVE.L      #$3000,MEM_START
0000110E  23FC 00003300 00000200   116      MOVE.L      #$3300,MEM_END
00001118                           117  READ_MEMORY   
00001118  2479 00000100            118      MOVEA.L     MEM_START,A2    *A2 will be the starting/current address
0000111E  2679 00000200            119      MOVEA.L     MEM_END,A3      *A3 will act as the ending address
00001124                           120      
00001124                           121  VALIDATE_START_END
00001124  220A                     122      MOVE.L      A2,D1           *copy start address into D1
00001126  240B                     123      MOVE.L      A3,D2           *copy end address into D2
00001128  B441                     124      CMP         D1,D2           *compare start and end values
0000112A  6700 000A                125      BEQ         EQUAL_ERROR     *Start address is equal to end address
0000112E  6D00 0016                126      BLT         SWAP_VALUES     *Start address is larger than end address
00001132  6000 002E                127      BRA         PRE_READ_MEMORY *begin reading memory
00001136                           128      
00001136                           129  EQUAL_ERROR
00001136  43F9 000020D0            130      LEA         M_EQUAL,A1      *load error message
0000113C  103C 000E                131      MOVE.B      #14,D0          *display string trap
00001140  4E4F                     132      TRAP        #15             *output error message
00001142  6000 FEC2                133      BRA         INPUT_START     *restart program (request ui again)
00001146                           134      
00001146                           135  SWAP_VALUES
00001146  2239 00000100            136      MOVE.L      MEM_START,D1    *put starting address in D1
0000114C  2439 00000200            137      MOVE.L      MEM_END,D2      *put ending address in D2
00001152  23C2 00000100            138      MOVE.L      D2,MEM_START    *swap the two values in memory
00001158  23C1 00000200            139      MOVE.L      D1,MEM_END
0000115E  2442                     140      MOVEA.L     D2,A2           *A2 will be the starting/current address
00001160  2641                     141      MOVEA.L     D1,A3           *A3 will act as the ending address
00001162                           142  PRE_READ_MEMORY
00001162  2C4A                     143      MOVE.L      A2,A6           *A6 will act as the current address for Data               
00001164                           144  READ_MEMORY_LOOP
00001164  2679 00000200            145      MOVE.L      MEM_END,A3        *put ending address in A3
0000116A  B6CA                     146      CMP         A2,A3             *compare the incrementing address and the end address
0000116C  6D00 0020                147      BLT         CONTINUE_YN       *stop if the end address is reached
00001170                           148      
00001170  E05E                     149      ROR         #8,D6               *select correct byte
00001172  BC3C 001E                150      CMP.B       #30,D6              *see if maximum lines printed
00001176  6C00 0048                151      BGE         PRESS_TO_CONTINUE
0000117A  E15E                     152      ROL         #8,D6   
0000117C                           153  READ_MEMORY_CONT                    *continue reading memory (if branched)  
0000117C  101A                     154      MOVE.B      (A2)+,D0          *get the value from incrementing address 
0000117E  E148                     155      LSL.W       #8,D0             *make room for the next byte of A2
00001180  1012                     156      MOVE.B      (A2),D0          *copy the rest of A2 to D0  
00001182  538A                     157      SUB.L       #1, A2
00001184  47F9 00000500            158      LEA         STRING_START,A3   *A3 will act as the string address  
0000118A  6000 01A6                159      BRA         VERIFY_OPCODE
0000118E                           160      
0000118E                           161      
0000118E                           162          
0000118E                           163  
0000118E                           164  EFFECTIVE_ADDRESSING
0000118E                           165  
0000118E                           166  
0000118E                           167  CONTINUE_YN
0000118E  43F9 00002130            168      LEA         M_FINISHED,A1       *print out finished reading address
00001194  103C 000E                169      MOVE.B      #14,D0
00001198  4E4F                     170      TRAP        #15
0000119A  43F9 0000214A            171      LEA         M_CONTINUE,A1        *ask the user if they want to read again
000011A0  103C 000E                172      MOVE.B      #14,D0
000011A4  4E4F                     173      TRAP        #15
000011A6                           174     
000011A6  103C 0005                175      MOVE.B      #5,D0               *get user input
000011AA  4E4F                     176      TRAP        #15
000011AC  B23C 0059                177      CMP.B       #89,D1              *compare user input and ascii 'Y'
000011B0  6700 00F8                178      BEQ         RESTART             *
000011B4  B23C 0079                179      CMP.B       #121,D1             *compare user input with ascii 'y'
000011B8  6700 00F0                180      BEQ         RESTART         
000011BC  6000 0E64                181      BRA         END
000011C0                           182      
000011C0                           183  PRESS_TO_CONTINUE
000011C0  1C3C 0000                184      MOVE.B      #00,D6              *reset counter
000011C4  E19E                     185      ROL.L       #8,D6               *put byte back in place
000011C6  43F9 00002116            186      LEA         M_PRESS_CONT,A1     *load press key to continue messageu
000011CC  103C 000E                187      MOVE.B      #14,D0              *load into D0
000011D0  4E4F                     188      TRAP        #15                 *display message
000011D2  103C 0005                189      MOVE.B      #5,D0               *read single character from keyboard
000011D6  4E4F                     190      TRAP        #15    
000011D8  6100 0122                191      BSR         IM_NEW_LINE            *add new line
000011DC  609E                     192      BRA         READ_MEMORY_CONT    *continue reading loop
000011DE                           193      
000011DE                           194  INCREMENT_LINE
000011DE  E09E                     195      ROR.L       #8,D6               *select correct byte
000011E0  5206                     196      ADD.B       #1,D6               *increment counter
000011E2  E19E                     197      ROL.L       #8,D6               *put byte back in place
000011E4  4E75                     198      RTS 
000011E6                           199      
000011E6                           200  INVALID_OPCODE
000011E6  BC3C 0008                201      CMP.B       #8,D6               *check the loop increment counter
000011EA  6D00 000A                202      BLT         INVALID_OPCODE_CONT *less than long length. continue       
000011EE  6100 000E                203      BSR         PRINT_DATA          *long amount of data. print it.
000011F2  6000 FF70                204      BRA         READ_MEMORY_LOOP    *read the next byte
000011F6                           205  INVALID_OPCODE_CONT  
000011F6  528A                     206      ADD.L       #1,A2               *increment current address  
000011F8  5206                     207      ADD.B       #1,D6               *increment counter
000011FA  6000 FF68                208      BRA         READ_MEMORY_LOOP    *data cap not reached. read next byte.    
000011FE                           209      
000011FE                           210  PRINT_DATA
000011FE  1C3C 0000                211      MOVE.B      #00,D6              *reset the increment counter
00001202  6100 0012                212      BSR         PRINT_DATA_ADDRESS       *print the data address
00001206  6100 010E                213      BSR         TAB                 *insert a space
0000120A  6100 0118                214      BSR         DATA                *print 'DATA'       
0000120E  6100 0028                215      BSR         PRINT_DATA_LOOP     *print the data
00001212  61CA                     216      BSR         INCREMENT_LINE      *increment line counter (line was printed)
00001214  4E75                     217      RTS
00001216                           218  
00001216                           219  PRINT_DATA_ADDRESS
00001216  280E                     220      MOVE.L      A6,D4               *put the address in D4
00001218  4243                     221      CLR         D3                  *counter for long
0000121A  6000 0008                222      BRA         PRINT_ADDRESS_LOOP
0000121E                           223  PRINT_ADDRESS
0000121E  280E                     224      MOVE.L      A6,D4               *put the address in D4
00001220  4243                     225      CLR         D3                  *counter for long
00001222  2C4A                     226      MOVE.L      A2, A6
00001224                           227      
00001224                           228  PRINT_ADDRESS_LOOP
00001224  B67C 0004                229      CMP         #4,D3               *if long reached
00001228  6C00 00B0                230      BGE         RETURN_TO_SUBROUTINE *exit loop
0000122C  E19C                     231      ROL.L       #8,D4               *put ending byte at beginning
0000122E  1204                     232      MOVE.B      D4,D1               *put byte in D1 for printing
00001230  6100 0022                233      BSR         OUTPUT_D1B          *print the first byte of D1
00001234  5203                     234      ADD.B       #1,D3               *increment D3 (loop counter)
00001236  60EC                     235      BRA         PRINT_ADDRESS_LOOP  *repeat loop         
00001238                           236           
00001238                           237  PRINT_DATA_LOOP
00001238  121E                     238      MOVE.B      (A6)+,D1            *get the data
0000123A  1401                     239      MOVE.B      D1,D2               *copy the data to D2
0000123C  BDCA                     240      CMP.L       A2,A6               *if current address reached
0000123E  6E00 000C                241      BGT         END_PRINT_DATA_LOOP *continue reading addresses 
00001242                           242                                      *otherwise keep printing the data
00001242  6100 0010                243      BSR         OUTPUT_D1B          *print byte in D1 in hex
00001246                           244      *---print a space----*
00001246  6100 00C2                245      BSR         IM_SPACE               *print a space                                
0000124A  60EC                     246      BRA         PRINT_DATA_LOOP     *repeat loop
0000124C                           247  
0000124C                           248  END_PRINT_DATA_LOOP
0000124C  2C4A                     249      MOVE.L      A2,A6               *set new address for data/opcode
0000124E  6100 00AC                250      BSR         IM_NEW_LINE            *end line
00001252  4E75                     251      RTS                             *repeat loop   
00001254                           252   
00001254                           253  OUTPUT_D1B
00001254                           254      *print the left character
00001254  1401                     255      MOVE.B      D1,D2               *copy D1 to D2
00001256  E809                     256      LSR.B       #4,D1               *get rid of right nibble  
00001258  6100 0082                257      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
0000125C  6100 0096                258      BSR         OUTPUT_CHAR         *print the char in D1
00001260                           259      *print the right character
00001260  E90A                     260      LSL.B       #4,D2               *get rid of left nibble
00001262  E80A                     261      LSR.B       #4,D2               *put right nibble in place
00001264  1202                     262      MOVE.B      D2,D1               *put right nibble in D1
00001266  6100 0074                263      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
0000126A  6100 0088                264      BSR         OUTPUT_CHAR         *print the char in D1
0000126E  4E75                     265      RTS
00001270                           266  VALID_OPCODE
00001270  BC3C 0000                267      CMP.B       #00,D6              *if leftover data not printed
00001274  6700 0004                268      BEQ         PRINT_OPCODE_EA     *print just the opcode
00001278  6184                     269      BSR         PRINT_DATA          *print unreadable data
0000127A                           270                                      *and the opcode
0000127A                           271  PRINT_OPCODE_EA    
0000127A  548A                     272      ADD.L       #02,A2              *increment the current address because word is valid
0000127C                           273  
0000127C  1C3C 0000                274      MOVE.B      #00,D6              *reset the increment counter
00001280  619C                     275      BSR         PRINT_ADDRESS       *print the data address
00001282  6100 0092                276      BSR         TAB                 *insert a space
00001286  6100 000E                277      BSR         PRINT_OPCODE        *print out hte opcode and eA
0000128A  6100 FF52                278      BSR         INCREMENT_LINE      *increment line counter (line was printed)
0000128E  6100 006C                279      BSR         IM_NEW_LINE
00001292  6000 FED0                280      BRA         READ_MEMORY_LOOP    *read next byte.
00001296                           281      
00001296                           282  
00001296                           283  PRINT_OPCODE
00001296  43F9 00000500            284      LEA         STRING_START,A1     *put the starting address of the string into A1
0000129C  103C 000E                285      MOVE.B      #14,D0              *print null terminated string into A
000012A0  4E4F                     286      TRAP        #15                 *output to terminal
000012A2  47F9 00000500            287      LEA         STRING_START,A3     *reset the current string pointer
000012A8  4E75                     288      RTS
000012AA                           289      
000012AA                           290  RESTART
000012AA  43F9 00002186            291      LEA         M_NEW_LINE,A1
000012B0  103C 000E                292      MOVE.B      #14,D0
000012B4  4E4F                     293      TRAP        #15
000012B6  4280                     294      CLR.L       D0
000012B8  4281                     295      CLR.L       D1
000012BA  4282                     296      CLR.L       D2
000012BC  4283                     297      CLR.L       D3
000012BE  4284                     298      CLR.L       D4
000012C0  4285                     299      CLR.L       D5
000012C2  4286                     300      CLR.L       D6
000012C4  4287                     301      CLR.L       D7
000012C6  2040                     302      MOVE.L      D0,A0
000012C8  2240                     303      MOVE.L      D0,A1
000012CA  2440                     304      MOVE.L      D0,A2
000012CC  2640                     305      MOVE.L      D0,A3
000012CE  2840                     306      MOVE.L      D0,A4
000012D0  2A40                     307      MOVE.L      D0,A5
000012D2  2C40                     308      MOVE.L      D0,A6
000012D4  2E40                     309      MOVE.L      D0,A7
000012D6  6000 FD2E                310      BRA         INPUT_START
000012DA                           311      
000012DA                           312  RETURN_TO_SUBROUTINE
000012DA  4E75                     313      RTS
000012DC                           314    
000012DC                           315  CONVERT_TO_ASCII
000012DC  B23C 0009                316      CMP.B       #9,D1           *compare value with 9
000012E0  6E00 000C                317      BGT         ALPH_CHAR       *convert to numeric ascii
000012E4  6000 0002                318      BRA         NUMERIC_CHAR    *convert to alphabetical ascii
000012E8                           319  NUMERIC_CHAR        
000012E8  0601 0030                320      ADD.B       #48,D1          *convert to ascii value
000012EC  4E75                     321      RTS                         *continue converting
000012EE                           322  ALPH_CHAR
000012EE  0601 0037                323      ADD.B       #55,D1          *convert to ascii value
000012F2  4E75                     324      RTS                         *continue converting            
000012F4                           325  OUTPUT_CHAR
000012F4  103C 0006                326      MOVE.B      #6,D0           *output whatever's in D1
000012F8  4E4F                     327      TRAP        #15
000012FA  4E75                     328      RTS
000012FC                           329  
000012FC                           330  
000012FC                           331  IM_NEW_LINE
000012FC  43F9 00002186            332      LEA         M_NEW_LINE,A1      *load new line
00001302  103C 000E                333      MOVE.B      #14,D0          *load message
00001306  4E4F                     334      TRAP        #15             *display message
00001308  4E75                     335      RTS
0000130A                           336  IM_SPACE
0000130A  123C 0020                337      MOVE.B      #32,D1
0000130E  103C 0006                338      MOVE.B      #6,D0
00001312  4E4F                     339      TRAP        #15
00001314  4E75                     340      RTS
00001316                           341  TAB
00001316  43F9 00002111            342      LEA         M_TAB,A1
0000131C  103C 000E                343      MOVE.B      #14,D0
00001320  4E4F                     344      TRAP        #15
00001322  4E75                     345      RTS
00001324                           346  DATA
00001324  43F9 00002108            347      LEA         M_DATA,A1
0000132A  103C 000E                348      MOVE.B      #14,D0
0000132E  4E4F                     349      TRAP        #15
00001330  4E75                     350      RTS
00001332                           351      
00001332                           352  
00001332                           353  
00001332                           354  
00001332                           355  
00001332                           356  
00001332                           357  
00001332                           358  
00001332                           359  
00001332                           360  
00001332                           361  
00001332                           362  
00001332                           363  
00001332                           364  
00001332                           365  
00001332                           366  
00001332                           367  
00001332                           368  
00001332                           369  
00001332                           370  
00001332                           371  
00001332                           372  
00001332                           373  
00001332                           374  
00001332                           375  
00001332                           376  
00001332                           377  
00001332                           378  
00001332                           379  
00001332                           380  
00001332                           381  
00001332                           382  
00001332                           383  -------------------- end include --------------------
00001332                           384      INCLUDE         'OP_jumpTable.X68'
00001332                           385  VERIFY_OPCODE
00001332  3200                     386      MOVE.W  D0,D1   *Copy instruction for modification
00001334                           387      
00001334                           388      **ISOLATE BITS F-C**                                             
00001334  E849                     389      LSR.W   #4,D1       *Shift right four bits
00001336  E049                     390      LSR.W   #8,D1       *Shift right again (12 shifts total)
00001338                           391      
00001338  4242                     392      CLR     D2
0000133A  1401                     393      MOVE.B  D1,D2       *Copy bits to jump table instruction register(D2)
0000133C                           394      
0000133C  41F9 0000134A            395      LEA     OP_JTAB,A0  *Load the jump table 
00001342  C5FC 0006                396      MULS    #6, D2      *Get the offset
00001346  4EB0 2000                397      JSR     0(A0,D2)    *Go to jump table address
0000134A                           398  
0000134A                           399  
0000134A                           400  
0000134A  4EF9 000013AC            401  OP_JTAB    JMP     OP0000       *ADDI
00001350  4EF9 000013BC            402      JMP     OP0001              *MOVE.B
00001356  4EF9 000013CC            403      JMP     OP0010              *MOVE.W, MOVEA(WORD)
0000135C  4EF9 000013D0            404      JMP     OP0011              *MOVE.L, MOVEA(LONG) 
00001362  4EF9 00001408            405      JMP     OP0100              *NOP, MOVEM, LEA, CLR, JSR, RTS
00001368  4EF9 000014B8            406      JMP     OP0101              *ADDQ
0000136E  4EF9 000014C8            407      JMP     OP0110              *Bcc
00001374  4EF9 000014E2            408      JMP     OP0111              *MOVEQ
0000137A  4EF9 000014F2            409      JMP     OP1000              *DIVU, OR
00001380  4EF9 00001528            410      JMP     OP1001              *SUB
00001386  4EF8 11E6                411      JMP     INVALID_OPCODE      *No required opcodes
0000138A  4EF9 00001538            412      JMP     OP1011              *CMP
00001390  4EF9 00001548            413      JMP     OP1100              *MULS, AND
00001396  4EF9 00001580            414      JMP     OP1101              *ADD, ADDA
0000139C  4EF9 000015B8            415      JMP     OP1110              *LSR, LSL, ASR, ASL, ROL, ROR
000013A2  4EF8 11E6                416      JMP     INVALID_OPCODE      *No required opcodes
000013A6                           417  
000013A6                           418  
000013A6  4EF8 11E6                419      JMP    INVALID_OPCODE     *If you're reading this line, it's invalid.
000013AA  4E75                     420      RTS
000013AC                           421  
000013AC                           422  OP0000
000013AC                           423      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000013AC                           424      *BEGIN OUTPUT
000013AC                           425      
000013AC                           426      *MOVE.W  ADDI,(A3)+     *Load 'ADDI' to Add Reg 1 and then increment
000013AC  49F9 00002189            427      LEA     ADDI, A4        *Load output string to A4
000013B2  4EB9 0000169A            428      JSR     PASTE_4
000013B8  6000 04BA                429      BRA     EA_ADDI         *Branch to EA analysis of the command
000013BC                           430  
000013BC                           431  OP0001  *SINGLE CODE, DO NOT NEED FURTHER CHECKING 
000013BC                           432          *BEGIN OUTPUT
000013BC                           433      
000013BC                           434      *MOVE.L  MOVE,(A3)+     *Load 'MOVE.B' to Add Reg 1 and then increment
000013BC  49F9 0000218E            435      LEA     MOVE, A4        *Load output string to A4
000013C2  4EB9 0000169A            436      JSR     PASTE_4
000013C8  6000 02EA                437      BRA     EA_MOVE         *Branch to EA analysis of the command
000013CC                           438  
000013CC                           439  OP0010
000013CC                           440      *Identical to OP0011 for these purposes, branch there
000013CC  6000 0002                441      BRA OP0011
000013D0                           442  
000013D0                           443  OP0011
000013D0                           444      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000013D0                           445  
000013D0                           446      **ISOLATE NEXT BITS TO CHECK**
000013D0  3200                     447      MOVE.W  D0,D1           *Copy instruction for modification
000013D2  EF49                     448      LSL.W   #7,D1           *Shift left 7 bits 
000013D4  EA49                     449      LSR.W   #5,D1           *Rotate right 5 bits
000013D6  E049                     450      LSR.W   #8,D1           *Shift right again (13 shifts total)
000013D8  0241 000F                451      ANDI.W  #$00F,D1        *Keep 3 bits
000013DC                           452      
000013DC  B27C 0001                453      CMP     #%001,D1      *Check for 0010 to eliminate CLR
000013E0  6700 0016                454      BEQ     _MOVEA          *If equal, branch to CLR
000013E4                           455      
000013E4  6000 0002                456      BRA     _MOVE
000013E8                           457      
000013E8                           458  _MOVE
000013E8                           459      *MOVE.L  MOVE,(A3)+     *Load 'MOVE.L' to Add Reg 1 and then increment  
000013E8  49F9 0000218E            460      LEA     MOVE, A4        *Load output string to A4
000013EE  4EB9 0000169A            461      JSR     PASTE_4
000013F4  6000 02BE                462      BRA     EA_MOVE        *Branch to EA analysis of the command
000013F8                           463  
000013F8                           464  _MOVEA
000013F8                           465      *MOVE.L  MOVEA,(A3)+    *Load 'MOVEA.L' to Add Reg 1 and then increment
000013F8  49F9 00002193            466      LEA     MOVEA, A4        *Load output string to A4
000013FE  4EB9 000016A4            467      JSR     PASTE_5
00001404  6000 0322                468      BRA     EA_MOVEA       *Branch to EA analysis of the command
00001408                           469  
00001408                           470  OP0100
00001408                           471      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
00001408  3200                     472       MOVE.W  D0,D1           *Copy instruction for modification
0000140A                           473      
0000140A  B27C 4E71                474      CMP     #%0100111001110001,D1   *Check to eliminate NOP
0000140E  6700 0070                475      BEQ     _NOP
00001412  B27C 4E75                476      CMP     #%0100111001110101,D1   *Check to eliminate RTS
00001416  6700 007C                477      BEQ     _RTS
0000141A                           478      
0000141A  EC49                     479      LSR.W   #6,D1                   *Shift right 6 bits
0000141C  B27C 013A                480      CMP     #%0000000100111010,D1   *Check to eliminate RTS
00001420  6700 004E                481      BEQ     _JSR
00001424                           482      
00001424                           483      **ISOLATE 4 BITS TO CHECK CLR**    
00001424  3200                     484      MOVE.W  D0,D1           *Copy instruction for modification
00001426  E949                     485      LSL.W   #4,D1           *Shift left 7 bits 
00001428  E849                     486      LSR.W   #4,D1           *Rotate right 5 bits
0000142A  E049                     487      LSR.W   #8,D1           *Shift right again (13 shifts total)
0000142C  0241 000F                488      ANDI.W  #$000F,D1       *Keep 4 bits
00001430                           489      
00001430  B27C 0002                490      CMP     #%0010,D1       *Check for 0010 to eliminate CLR
00001434  6700 001A                491      BEQ     _CLR            *If equal, branch to CLR
00001438                           492  
00001438                           493      **ISOLATE 3 BITS TO CHECK MOVEM**
00001438  3200                     494      MOVE.W  D0,D1           *Copy instruction for modification
0000143A  ED49                     495      LSL.W   #6,D1           *Shift left 6 bits 
0000143C  EA49                     496      LSR.W   #5,D1           *Shift right 5 bits
0000143E  E049                     497      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001440  0241 000F                498      ANDI.W  #$00F,D1        *Keep 3 bits
00001444                           499      
00001444  B27C 0001                500      CMP     #%001,D1
00001448  6700 005E                501      BEQ     _MOVEM
0000144C                           502      
0000144C  6000 0012                503      BRA     _LEA            *Else by process of elimination it must be LEA   
00001450                           504      
00001450                           505  _CLR
00001450                           506      *MOVE.W  OPCLR,(A3)+     *Load 'CLR' to Add Reg 1 and then increment
00001450  49F9 00002199            507      LEA     OPCLR, A4        *Load output string to A4
00001456  4EB9 00001692            508      JSR     PASTE_3
0000145C  6000 05D6                509      BRA     EA_CLR          *Branch to EA analysis of the command
00001460                           510  
00001460                           511  _LEA
00001460                           512      *MOVE.W  OPLEA,(A3)+     *Load 'LEA' to Add Reg 1 and then increment
00001460  49F9 0000219D            513      LEA     OPLEA, A4        *Load output string to A4
00001466  4EB9 00001692            514      JSR     PASTE_3
0000146C  6000 056E                515      BRA     EA_LEA          *Branch to EA analysis of the command
00001470                           516  
00001470                           517  _JSR
00001470                           518      *MOVE.W  OPJSR,(A3)+     *Load 'JSR' to Add Reg 1 and then increment
00001470  49F9 000021A1            519      LEA     OPJSR, A4        *Load output string to A4
00001476  4EB9 00001692            520      JSR     PASTE_3
0000147C  6000 070E                521      BRA     EA_JSR          *Branch to EA analysis of the command
00001480                           522  
00001480                           523  _NOP
00001480                           524      *MOVE.W  OPNOP,(A3)+     *Load 'NOP' to Add Reg 1 and then increment
00001480  49F9 000021A5            525      LEA     OPNOP, A4        *Load output string to A4
00001486  4EB9 00001692            526      JSR     PASTE_3
0000148C  16FC 0000                527      MOVE.B  #00,(A3)+
00001490  6000 FDDE                528      BRA     VALID_OPCODE          *Branch to EA analysis of the command      
00001494                           529  
00001494                           530  _RTS
00001494                           531      *MOVE.W  OPRTS,(A3)+     *Load 'RTS' to Add Reg 1 and then increment
00001494  49F9 000021A9            532      LEA     OPRTS, A4        *Load output string to A4
0000149A  4EB9 00001692            533      JSR     PASTE_3
000014A0  16FC 0000                534          MOVE.B  #00,(A3)+
000014A4  6000 FDCA                535      BRA     VALID_OPCODE          *Branch to EA analysis of the command      
000014A8                           536  
000014A8                           537  _MOVEM
000014A8                           538      *MOVE.W  MOVEM,(A3)+     *Load 'MOVEM' to Add Reg 1 and then increment
000014A8  49F9 000021AD            539      LEA     MOVEM, A4        *Load output string to A4
000014AE  4EB9 000016A4            540      JSR     PASTE_5
000014B4  6000 0714                541      BRA     EA_MOVEM        *Branch to EA analysis of the command
000014B8                           542      
000014B8                           543  OP0101
000014B8                           544      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014B8                           545      *BEGIN OUTPUT
000014B8                           546      
000014B8                           547      *MOVE.W  ADDQ,(A3)+      *Load 'AddQ' to Add Reg 1 and then increment
000014B8  49F9 000021B3            548      LEA     ADDQ, A4        *Load output string to A4
000014BE  4EB9 0000169A            549      JSR     PASTE_4
000014C4  6000 0410                550      BRA     EA_ADDQ         *Branch to EA analysis of the command
000014C8                           551      
000014C8                           552  OP0110
000014C8                           553      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014C8                           554      *BEGIN OUTPUT
000014C8  3200                     555      MOVE.W  D0,D1
000014CA  E949                     556      LSL.W   #4,D1
000014CC  E849                     557      LSR.W   #4,D1
000014CE  E049                     558      LSR.W   #8,D1
000014D0  B23C 0000                559      CMP.B   #0,D1
000014D4  6700 FD10                560      BEQ     INVALID_OPCODE
000014D8                           561      
000014D8  16F9 000021B8            562      MOVE.B  Bcc,(A3)+       *Load 'Bcc' to Add Reg 1 and then increment 
000014DE  6000 0688                563      BRA     EA_BCC          *Branch to EA analysis of the command
000014E2                           564  
000014E2                           565  OP0111
000014E2                           566      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014E2                           567      *BEGIN OUTPUT
000014E2                           568      
000014E2                           569      *MOVE.W  MOVEQ,(A3)+     *Load 'MOVEQ' to Add Reg 1 and then increment
000014E2  49F9 000021BA            570      LEA     MOVEQ, A4        *Load output string to A4
000014E8  4EB9 000016A4            571      JSR     PASTE_5
000014EE  6000 0290                572      BRA     EA_MOVEQ        *Branch to EA analysis of the command
000014F2                           573      
000014F2                           574  OP1000
000014F2                           575      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000014F2                           576      
000014F2                           577      **ISOLATE NEXT BITS TO CHECK**
000014F2  3200                     578      MOVE.W  D0,D1           *Copy instruction for modification
000014F4  EF49                     579      LSL.W   #7,D1           *Shift left 7 bits 
000014F6  EA49                     580      LSR.W   #5,D1           *Rotate right 5 bits
000014F8  E049                     581      LSR.W   #8,D1           *Shift right again (13 shifts total)
000014FA  0241 000F                582      ANDI.W  #$00F,D1        *Keep 3 bits
000014FE                           583            
000014FE  B27C 0003                584      CMP     #%011,D1    *Check for 011 to eliminate DIVU
00001502  6700 0006                585      BEQ     _DIVU        *If equal, branch to DIVU
00001506  6000 0012                586      BRA     _OR          *Else must be OR, branch
0000150A                           587      
0000150A                           588  _DIVU
0000150A                           589      *MOVE.W  DIVU,(A3)+      *Load 'DIVU' to Add Reg 1 and then increment
0000150A  49F9 000021C0            590      LEA     DIVU, A4        *Load output string to A4
00001510  4EB9 0000169A            591      JSR     PASTE_4
00001516  6000 0472                592      BRA     EA_MULS         *Branch to EA analysis of the command
0000151A                           593  
0000151A                           594  _OR
0000151A                           595      *MOVE.W  OR,(A3)+        *Load 'OR' to Add Reg 1 and then increment
0000151A  49F9 000021C5            596      LEA     OR, A4        *Load output string to A4
00001520  16DC                     597      MOVE.B  (A4)+, (A3)+
00001522  16DC                     598      MOVE.B  (A4)+, (A3)+
00001524  6000 0294                599      BRA     EA_ADD           *Branch to EA analysis of the command
00001528                           600  
00001528                           601  OP1001
00001528                           602      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
00001528                           603      *BEGIN OUTPUT
00001528                           604      
00001528                           605      *MOVE.W  OPSUB,(A3)+     *Load 'SUB' to Add Reg 1 and then increment
00001528  49F9 000021C8            606      LEA     OPSUB, A4        *Load output string to A4
0000152E  4EB9 00001692            607      JSR     PASTE_3
00001534  6000 0284                608      BRA     EA_ADD          *Branch to EA analysis of the command
00001538                           609  
00001538                           610  OP1011
00001538                           611      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
00001538                           612      *BEGIN OUTPUT
00001538                           613      *MOVE.W  CMP,(A3)+     *Load 'CMP' to Add Reg 1 and then increment
00001538  49F9 000021CC            614      LEA     CMP, A4        *Load output string to A4
0000153E  4EB9 00001692            615      JSR     PASTE_3
00001544  6000 05C8                616      BRA     EA_CMP          *Branch to EA analysis of the command
00001548                           617  
00001548                           618  OP1100
00001548                           619      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
00001548                           620  
00001548  3200                     621      MOVE.W  D0,D1           *Copy instruction for modification
0000154A  EF49                     622      LSL.W   #7,D1           *Shift left 7 bits 
0000154C  EA49                     623      LSR.W   #5,D1           *Rotate right 5 bits
0000154E  E049                     624      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001550  0241 000F                625      ANDI.W  #$00F,D1        *Keep 3 bits
00001554                           626           
00001554  B27C 0007                627      CMP     #%111,D1       *Check for 111 to eliminate MULS
00001558  6700 0006                628      BEQ     _MULS           *If equal, branch to MULS
0000155C  6000 0012                629      BRA     _AND            *Else must be AND, branch
00001560                           630      
00001560                           631  _MULS
00001560                           632      *MOVE.W  MULS,(A3)+      *Load 'MULS' to Add Reg 1 and then increment
00001560  49F9 000021D0            633      LEA     MULS, A4        *Load output string to A4
00001566  4EB9 0000169A            634      JSR     PASTE_4
0000156C  6000 041C                635      BRA     EA_MULS         *Branch to EA analysis of the command
00001570                           636  
00001570                           637  _AND
00001570                           638      *MOVE.W  AND,(A3)+       *Load 'AND' to Add Reg 1 and then increment
00001570  49F9 000021D5            639      LEA     AND, A4        *Load output string to A4
00001576  4EB9 00001692            640      JSR     PASTE_3
0000157C  6000 023C                641      BRA     EA_ADD          *Branch to EA analysis of the command
00001580                           642      
00001580                           643  OP1101
00001580                           644      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS  
00001580                           645  
00001580  3200                     646      MOVE.W  D0,D1           *Copy instruction for modification
00001582  E149                     647      LSL.W   #8,D1           *Shift left 7 bits 
00001584  EA49                     648      LSR.W   #5,D1           *Rotate left 5 bits
00001586  E049                     649      LSR.W   #8,D1           *Shift left again (13 shifts total)
00001588  0241 000F                650      ANDI.W  #$0F,D1         *Keep 3 bits
0000158C                           651                
0000158C  B27C 0003                652      CMP     #%11,D1         *Check for 011 to eliminate ADDA (Size dependant)
00001590  6700 0016                653      BEQ     _ADDA           *If equal, branch to ADDA
00001594  6000 0002                654      BRA     _ADD            *Else must be ADD, branch
00001598                           655      
00001598                           656  _ADD
00001598                           657      *MOVE.W  ADD,(A3)+       *Load 'ADD' to Add Reg 1 and then increment
00001598  49F9 000021D9            658      LEA     ADD, A4        *Load output string to A4
0000159E  4EB9 00001692            659      JSR     PASTE_3
000015A4  6000 0214                660      BRA     EA_ADD          *Branch to EA analysis of the command
000015A8                           661  
000015A8                           662  _ADDA
000015A8                           663      *MOVE.W  ADDA,(A3)+      *Load 'ADDA' to Add Reg 1 and then increment
000015A8  49F9 000021DD            664      LEA     ADDA, A4        *Load output string to A4
000015AE  4EB9 0000169A            665      JSR     PASTE_4
000015B4  6000 037A                666      BRA     EA_ADDA         *Branch to EA analysis of the command
000015B8                           667      
000015B8                           668  OP1110
000015B8                           669      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000015B8                           670        
000015B8  3200                     671      MOVE.W  D0,D1           *Copy instruction for modification
000015BA  EF49                     672      LSL.W   #7,D1           *Shift left 7 bits 
000015BC  EA49                     673      LSR.W   #5,D1           *Rotate right 5 bits
000015BE  E049                     674      LSR.W   #8,D1           *Shift right again (13 shifts total)
000015C0  0241 000F                675      ANDI.W  #$00F,D1        *Keep 3 bits
000015C4                           676                    
000015C4  B27C 0001                677      CMP     #%001,D1        *Check for 001 to eliminate LSd instructions
000015C8  6700 001C                678      BEQ     _LSd            *If equal, branch to LSd to determine LSR or LSL
000015CC                           679  
000015CC                           680      **ELSE CONTINUE CHECKING**
000015CC  3200                     681      MOVE.W  D0,D1           *Copy instruction for modification
000015CE  E149                     682      LSL.W   #8,D1          *Shift left 7 bits
000015D0  E749                     683      LSL.W   #3,D1 
000015D2  EA49                     684      LSR.W   #5,D1           *Rotate left 5 bits
000015D4  E049                     685      LSR.W   #8,D1           *Shift left again (13 shifts total)
000015D6  0241 000F                686      ANDI.W  #$0F,D1         *Keep 2 bits
000015DA                           687      
000015DA                           688      **BEGIN ELIMINATION 'IF/ELSE' STATEMENTS                   
000015DA  B27C 0000                689      CMP     #%00,D1         *Check for 00 to eliminate ASd
000015DE  6700 003E                690      BEQ     _ASd            *If equal, branch to ASd to determine ASR or ASL
000015E2  6000 0074                691      BRA     _ROd            *Else must be a ROd instruction, branch to determine
000015E6                           692      
000015E6                           693  _LSd   
000015E6                           694   
000015E6  3200                     695      MOVE.W  D0,D1           *Copy instruction for modification
000015E8  EF49                     696      LSL.W   #7,D1           *Shift left 7 bits 
000015EA  EE49                     697      LSR.W   #7,D1           *Rotate right 5 bits
000015EC  E049                     698      LSR.W   #8,D1           *Shift right again (13 shifts total)
000015EE  0241 000F                699      ANDI.W  #$F,D1          *Keep 1 bit
000015F2                           700  
000015F2  B27C 0000                701      CMP     #%0,D1        *Check for 011 to eliminate LSR
000015F6  6700 0016                702      BEQ     _LSR            *If equal, branch to LSR
000015FA  6000 0002                703      BRA     _LSL            *Else must be LSL, branch
000015FE                           704  
000015FE                           705  _LSL    
000015FE                           706      *MOVE.W  LSL,(A3)+       *Load 'LSL' to Add Reg 1 and then increment
000015FE  49F9 000021E2            707      LEA     LSL, A4        *Load output string to A4
00001604  4EB9 00001692            708      JSR     PASTE_3
0000160A  6000 046E                709      BRA     EA_LSD         *Branch to EA analysis of the command
0000160E                           710  
0000160E                           711  _LSR
0000160E                           712      *MOVE.W  LSR,(A3)+       *Load 'LSR' to Add Reg 1 and then increment
0000160E  49F9 000021E6            713      LEA     LSR, A4        *Load output string to A4
00001614  4EB9 00001692            714      JSR     PASTE_3
0000161A  6000 045E                715      BRA     EA_LSD          *Branch to EA analysis of the command
0000161E                           716  
0000161E                           717  _ASd
0000161E                           718  
0000161E  3200                     719      MOVE.W  D0,D1           *Copy instruction for modification
00001620  E149                     720      LSL.W   #8,D1           *Shift left 7 bits 
00001622  E549                     721      LSL.W   #2,D1           *Shift left 7 bits
00001624  EA49                     722      LSR.W   #5,D1           *Rotate right 5 bits
00001626  E049                     723      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001628  0241 000F                724      ANDI.W  #$00F,D1        *Keep 3 bits
0000162C                           725     
0000162C  B27C 0000                726      CMP     #%000,D1        *Check for 000 to eliminate ASR
00001630  6700 0016                727      BEQ     _ASR            *If equal, branch to ASR
00001634  6000 0002                728      BRA     _ASL            *Else must be ASL, branch
00001638                           729  
00001638                           730  _ASL    
00001638                           731      *MOVE.W  ASL,(A3)+       *Load 'ASL' to Add Reg 1 and then increment
00001638  49F9 000021EA            732      LEA     ASL, A4        *Load output string to A4
0000163E  4EB9 00001692            733      JSR     PASTE_3
00001644  6000 0434                734      BRA     EA_LSD          *Branch to EA analysis of the command
00001648                           735  
00001648                           736  _ASR
00001648                           737      *MOVE.W  ASR,(A3)+       *Load 'ASR' to Add Reg 1 and then increment
00001648  49F9 000021EE            738      LEA     ASR, A4        *Load output string to A4
0000164E  4EB9 00001692            739      JSR     PASTE_3
00001654  6000 0424                740      BRA     EA_LSD          *Branch to EA analysis of the command
00001658                           741  
00001658                           742  _ROd
00001658                           743  
00001658  3200                     744      MOVE.W  D0,D1           *Copy instruction for modification
0000165A  E549                     745      LSL.W   #2,D1           *Shift left 7 bits
0000165C  E149                     746      LSL.W   #8,D1           *Shift left 7 bits 
0000165E  EA49                     747      LSR.W   #5,D1           *Rotate right 5 bits
00001660  E049                     748      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001662  0241 000F                749      ANDI.W  #$00F,D1        *Keep 3 bits
00001666                           750  
00001666                           751      **BEGIN ELIMINATION 'IF/ELSE' STATEMENTS   
00001666  B27C 0003                752      CMP     #%011,D1        *Check for 011 to eliminate ROR
0000166A  6700 0016                753      BEQ     _ROR            *If equal, branch to ROR
0000166E  6000 0002                754      BRA     _ROL            *Else must be ROL, branch
00001672                           755      
00001672                           756  _ROL    
00001672                           757      *MOVE.W  ROL,(A3)+       *Load 'ROL' to Add Reg 1 and then increment
00001672  49F9 000021F2            758      LEA     ROL, A4        *Load output string to A4
00001678  4EB9 00001692            759      JSR     PASTE_3
0000167E  6000 03FA                760      BRA     EA_LSD          *Branch to EA analysis of the command
00001682                           761  
00001682                           762  _ROR
00001682                           763      *MOVE.W  ROR,(A3)+       *Load 'ROR' to Add Reg 1 and then increment
00001682  49F9 000021F6            764      LEA     ROR, A4        *Load output string to A4
00001688  4EB9 00001692            765      JSR     PASTE_3
0000168E  6000 03EA                766      BRA     EA_LSD          *Branch to EA analysis of the command
00001692                           767      
00001692                           768  PASTE_3
00001692  16DC                     769      MOVE.B  (A4)+, (A3)+
00001694  16DC                     770      MOVE.B  (A4)+, (A3)+
00001696  16DC                     771      MOVE.B  (A4)+, (A3)+
00001698  4E75                     772      RTS
0000169A                           773  
0000169A                           774  PASTE_4
0000169A  16DC                     775      MOVE.B  (A4)+, (A3)+
0000169C  16DC                     776      MOVE.B  (A4)+, (A3)+
0000169E  16DC                     777      MOVE.B  (A4)+, (A3)+
000016A0  16DC                     778      MOVE.B  (A4)+, (A3)+
000016A2  4E75                     779      RTS
000016A4                           780  
000016A4                           781  PASTE_5
000016A4  16DC                     782      MOVE.B  (A4)+, (A3)+
000016A6  16DC                     783      MOVE.B  (A4)+, (A3)+
000016A8  16DC                     784      MOVE.B  (A4)+, (A3)+
000016AA  16DC                     785      MOVE.B  (A4)+, (A3)+
000016AC  16DC                     786      MOVE.B  (A4)+, (A3)+
000016AE  4E75                     787      RTS
000016B0                           788  
000016B0  FFFF FFFF                789      SIMHALT
000016B4                           790  
000016B4                           791  
000016B4                           792  
000016B4                           793  
000016B4                           794  
000016B4                           795  
000016B4                           796  
000016B4                           797  -------------------- end include --------------------
000016B4                           798      INCLUDE         'EFFECTIVE_ADDRESSES.X68'
000016B4                           799  
000016B4                           800      *EXAMPLE, MOVE A HEX CODE INTO D6
000016B4                           801      *CALL THE CORRESPONDING EA CODE
000016B4                           802      *MOVE.W     #$2E7C, D6
000016B4                           803      *BRA         EA_MOVE
000016B4                           804      *END EXAMPLE
000016B4                           805      
000016B4                           806  EA_MOVE      *1 invalid; done
000016B4  3E00                     807      MOVE.W      D0, D7 *DO THIS AT THE BEGGINING OF EVERY EA 
000016B6                           808      
000016B6  3807                     809      MOVE.W      D7, D4      *
000016B8  E04C                     810      LSR.W       #8, D4      *
000016BA  E84C                     811      LSR.W       #4, D4      *D4 = SIZE
000016BC  4EB9 00001E16            812      JSR GET_SIZE
000016C2                           813      
000016C2  3807                     814      MOVE.W      D7, D4      *
000016C4  E14C                     815      LSL.W       #8, D4      *
000016C6  E54C                     816      LSL.W       #2, D4
000016C8  E04C                     817      LSR.W       #8, D4      *
000016CA  EA4C                     818      LSR.W       #5, D4      *D4 = <0000 0000> D4 = SOURCE MODE
000016CC                           819      
000016CC  3A07                     820      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000016CE  E14D                     821      LSL.W       #8, D5  
000016D0  EB4D                     822      LSL.W       #5, D5      *
000016D2  E04D                     823      LSR.W       #8, D5
000016D4  EA4D                     824      LSR.W       #5, D5      *D5 = SOURCE REGISTER
000016D6                           825      
000016D6  4EB9 00001F0C            826      JSR         MODE_CHOOSER
000016DC  41F9 00001D4A            827      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000016E2  C9FC 0006                828      MULS        #6, D4          *GET JUMP
000016E6  4EB0 4000                829      JSR         0(A0, D4)       *JUMP
000016EA  4EB9 00001F88            830      JSR COMMA
000016F0  4EB9 00001FEA            831      JSR SPACE
000016F6  3807                     832      MOVE.W      D7, D4      *
000016F8  EF4C                     833      LSL.W       #7, D4      *
000016FA  EE4C                     834      LSR.W       #7, D4      *
000016FC  EC4C                     835      LSR.W       #6, D4      *D4 = DESTINATION MODE
000016FE  4EB9 00001CC0            836      JSR         MOVE_ERROR_CHECK 
00001704                           837      
00001704  3A07                     838      MOVE.W      D7, D5      *
00001706  E94D                     839      LSL.W       #4, D5      *
00001708  E04D                     840      LSR.W       #8, D5      *
0000170A  EA4D                     841      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
0000170C                           842      
0000170C  4EB9 00001F0C            843      JSR         MODE_CHOOSER
00001712  41F9 00001D4A            844      LEA         MODE_JUMP, A0   *LOAD MODE JUMP
00001718  C9FC 0006                845      MULS        #6, D4          *GET JUMP
0000171C  4EB0 4000                846      JSR         0(A0, D4)       *JUMP
00001720  16BC 0000                847      MOVE.B      #00, (A3) 
00001724  6000 FB4A                848      BRA         VALID_OPCODE
00001728                           849  EA_MOVEA        *0 invalid
00001728  3E00                     850      MOVE.W      D0, D7
0000172A                           851  
0000172A  3807                     852      MOVE.W      D7, D4      *GETTING SIZE
0000172C  E04C                     853      LSR.W       #8, D4      *
0000172E  E84C                     854      LSR.W       #4, D4      *SHIFT 12 BITS RIGHT
00001730  4EB9 00001E16            855      JSR         GET_SIZE    *D4 = SIZE
00001736                           856      
00001736  3807                     857      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001738  E14C                     858      LSL.W       #8, D4      *
0000173A  E54C                     859      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
0000173C  E04C                     860      LSR.W       #8, D4      *
0000173E  EA4C                     861      LSR.W       #5, D4      *D4 = SOURCE MODE
00001740                           862  
00001740  3A07                     863      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
00001742  E14D                     864      LSL.W       #8, D5      *
00001744  EB4D                     865      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001746  E04D                     866      LSR.W       #8, D5      *
00001748  EA4D                     867      LSR.W       #5, D5      *D5 = SOURCE REGISTER
0000174A                           868      
0000174A  4EB9 00001F0C            869      JSR         MODE_CHOOSER  *INCASE MODE IS $111
00001750  41F9 00001D4A            870      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001756  C9FC 0006                871      MULS        #6, D4        *GET JUMP
0000175A  4EB0 4000                872      JSR         0(A0, D4)     *JUMP
0000175E  4EB9 00001F88            873      JSR         COMMA
00001764  4EB9 00001FEA            874      JSR         SPACE
0000176A  3A07                     875      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
0000176C  E94D                     876      LSL.W       #4, D5      *
0000176E  E04D                     877      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
00001770  EA4D                     878      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
00001772                           879      
00001772  4EB9 00001D88            880      JSR         ADDR_1
00001778  16BC 0000                881      MOVE.B      #00, (A3)
0000177C  6000 FAF2                882      BRA         VALID_OPCODE
00001780                           883  EA_MOVEQ        *0 invalid
00001780  3E00                     884      MOVE.W      D0, D7
00001782                           885  
00001782  4EB9 00001FEA            886      JSR SPACE
00001788  4EB9 00001F90            887      JSR POUND
0000178E  4EB9 00001FF2            888      JSR CASH
00001794  6100 07A4                889      BSR OUTPUT_HEX    
00001798  4EB9 00001F88            890      JSR COMMA
0000179E  4EB9 00001FEA            891      JSR SPACE
000017A4  3A07                     892      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
000017A6  E94D                     893      LSL.W       #4, D5      *
000017A8  E04D                     894      LSR.W       #8, D5      *
000017AA  EA4D                     895      LSR.W       #5, D5      * D5 = DESTINATION REGISTER
000017AC                           896      
000017AC  4EB9 00001D7A            897      JSR         DATA_0
000017B2  16BC 0000                898      MOVE.B      #00, (A3)
000017B6  6000 FAB8                899      BRA         VALID_OPCODE
000017BA                           900  EA_ADD          *3 invalid; done
000017BA                           901  
000017BA  3E00                     902      MOVE.W      D0, D7
000017BC                           903  
000017BC  3807                     904      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
000017BE  EF4C                     905      LSL.W       #7, D4      * 
000017C0  EE4C                     906      LSR.W       #7, D4      *
000017C2  EC4C                     907      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
000017C4  4EB9 00001E58            908      JSR         GET_OPMODE_MATH *PRINTS THE SIZE
000017CA                           909  
000017CA  B83C 0003                910      CMP.B       #3, D4
000017CE  6D00 000A                911      BLT         DN_VERSION
000017D2  B83C 0003                912      CMP.B       #3, D4
000017D6  6E00 004C                913      BGT         EA_VERSION
000017DA                           914  DN_VERSION *EA IS SOURCE, REGISTER IS DESTINATION <EA> + DN -> DN
000017DA  3807                     915      MOVE.W      D7, D4      
000017DC  E14C                     916      LSL.W       #8, D4      *LEFT 10; RIGHT 13
000017DE  E54C                     917      LSL.W       #2, D4
000017E0  E04C                     918      LSR.W       #8, D4      *
000017E2  EA4C                     919      LSR.W       #5, D4      *D4 = EA MODE
000017E4                           920      
000017E4  3A07                     921      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000017E6  E14D                     922      LSL.W       #8, D5  
000017E8  EB4D                     923      LSL.W       #5, D5      *
000017EA  E04D                     924      LSR.W       #8, D5
000017EC  EA4D                     925      LSR.W       #5, D5      * D5 = EA REGISTER
000017EE                           926      
000017EE  4EB9 00001F0C            927      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
000017F4  41F9 00001D4A            928      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000017FA  C9FC 0006                929      MULS        #6, D4          *GET JUMP
000017FE  4EB0 4000                930      JSR         0(A0, D4)       *JUMP
00001802                           931          
00001802  4EB9 00001F88            932      JSR         COMMA
00001808  4EB9 00001FEA            933      JSR         SPACE
0000180E                           934      
0000180E  3A07                     935      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
00001810  E94D                     936      LSL.W       #4, D5      *
00001812  E04D                     937      LSR.W       #8, D5      *
00001814  EA4D                     938      LSR.W       #5, D5      *D5 DESTINATION REGISTER
00001816                           939      
00001816  4EB9 00001D7A            940      JSR         DATA_0
0000181C  16BC 0000                941      MOVE.B      #00, (A3)
00001820  6000 FA4E                942      BRA         VALID_OPCODE
00001824                           943  EA_VERSION
00001824  3A07                     944      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
00001826  E94D                     945      LSL.W       #4, D5      *
00001828  E04D                     946      LSR.W       #8, D5      *
0000182A  EA4D                     947      LSR.W       #5, D5      *D5 DESTINATION REGISTER
0000182C  4EB9 00001D7A            948      JSR         DATA_0
00001832                           949      
00001832  4EB9 00001F88            950      JSR         COMMA
00001838  4EB9 00001FEA            951      JSR         SPACE
0000183E                           952      
0000183E  3807                     953      MOVE.W      D7, D4      
00001840  E14C                     954      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001842  E54C                     955      LSL.W       #2, D4
00001844  E04C                     956      LSR.W       #8, D4      *
00001846  EA4C                     957      LSR.W       #5, D4      *D4 = EA MODE
00001848                           958      
00001848  3A07                     959      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
0000184A  E14D                     960      LSL.W       #8, D5  
0000184C  EB4D                     961      LSL.W       #5, D5      *
0000184E  E04D                     962      LSR.W       #8, D5
00001850  EA4D                     963      LSR.W       #5, D5      * D5 = EA REGISTER
00001852                           964      
00001852                           965      *the only way there could be an error is if 
00001852                           966      *we are in THIS addressing mo
00001852                           967      
00001852  4EB9 00001F0C            968      JSR         MODE_CHOOSER    *IF A WORD OR LONG 
00001858  4EB9 00001CCA            969      JSR         ADD_ERROR_CHECK
0000185E  41F9 00001D4A            970      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001864  C9FC 0006                971      MULS        #6, D4          *GET JUMP
00001868  4EB0 4000                972      JSR         0(A0, D4)       *JUMP
0000186C                           973      
0000186C  16BC 0000                974      MOVE.B      #00, (A3)
00001870  6000 F9FE                975      BRA         VALID_OPCODE
00001874                           976  EA_ADDI  *2 invalid; DONE
00001874  3E00                     977      MOVE.W      D0, D7
00001876                           978      
00001876  3807                     979      MOVE.W      D7, D4      *
00001878  E14C                     980      LSL.W       #8, D4      *
0000187A  E04C                     981      LSR.W       #8, D4      *
0000187C  EC4C                     982      LSR.W       #6, D4      *D4 = SIZE
0000187E  4EB9 00001EAA            983      JSR         GET_SIZE_ADDI
00001884  4EB9 00001F90            984      JSR         POUND
0000188A  4EB9 00001FF2            985      JSR         CASH
00001890  6100 06A8                986      BSR         OUTPUT_HEX
00001894  4EB9 00001F88            987      JSR         COMMA
0000189A  4EB9 00001FEA            988      JSR         SPACE
000018A0  3807                     989      MOVE.W      D7, D4      
000018A2  E14C                     990      LSL.W       #8, D4      *LEFT 10; RIGHT 13
000018A4  E54C                     991      LSL.W       #2, D4
000018A6  E04C                     992      LSR.W       #8, D4      *
000018A8  EA4C                     993      LSR.W       #5, D4      *D4 = EA MODE
000018AA                           994      
000018AA  3A07                     995      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000018AC  E14D                     996      LSL.W       #8, D5  
000018AE  EB4D                     997      LSL.W       #5, D5      *
000018B0  E04D                     998      LSR.W       #8, D5
000018B2  EA4D                     999      LSR.W       #5, D5      * D5 = EA REGISTER
000018B4                          1000      
000018B4  4EB9 00001F0C           1001      JSR         MODE_CHOOSER    *IF A WORD OR LONG  
000018BA  4EB9 00001CE4           1002      JSR         ADDI_ERROR_CHECK
000018C0  41F9 00001D4A           1003      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000018C6  C9FC 0006               1004      MULS        #6, D4          *GET JUMP
000018CA  4EB0 4000               1005      JSR         0(A0, D4)       *JUMP'
000018CE                          1006      
000018CE  16BC 0000               1007      MOVE.B      #00, (A3)
000018D2  6000 F99C               1008      BRA         VALID_OPCODE
000018D6                          1009  EA_ADDQ     *0 INVALID
000018D6  3E00                    1010      MOVE.W      D0, D7
000018D8                          1011      
000018D8  3807                    1012      MOVE.W      D7, D4
000018DA  E14C                    1013      LSL.W       #8, D4
000018DC  E04C                    1014      LSR.W       #8, D4
000018DE  EC4C                    1015      LSR.W       #6, D4
000018E0  4EB9 00001EAA           1016      JSR         GET_SIZE_ADDI    *PRINT SIZE
000018E6                          1017      
000018E6  3A07                    1018      MOVE.W      D7, D5      *GETTING DATA
000018E8  E94D                    1019      LSL.W       #4, D5      *SHIFT LEFT 4; RIGHT 13
000018EA  E04D                    1020      LSR.W       #8, D5      *
000018EC  EA4D                    1021      LSR.W       #5, D5      *D5 = DATA
000018EE  4EB9 00001E90           1022      JSR         GET_DATA
000018F4  4EB9 00001F88           1023      JSR COMMA
000018FA  4EB9 00001FEA           1024      JSR SPACE
00001900  3807                    1025      MOVE.W      D7, D4      *GETTING EA MODE
00001902  E14C                    1026      LSL.W       #8, D4      *
00001904  E54C                    1027      LSL.W       #2, D4      *SHIFT 10 LEFT; 13 RIGHT
00001906  E04C                    1028      LSR.W       #8, D4      *
00001908  EA4C                    1029      LSR.W       #5, D4      *D4 = EA MODE
0000190A                          1030      
0000190A  3A07                    1031      MOVE.W      D7, D5      *GETTING EA REGISTER
0000190C  E14D                    1032      LSL.W       #8, D5      *
0000190E  EB4D                    1033      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001910  E04D                    1034      LSR.W       #8, D5      *
00001912  EA4D                    1035      LSR.W       #5, D5      *D5 = EA REGISTER
00001914                          1036      
00001914  4EB9 00001F0C           1037      JSR         MODE_CHOOSER
0000191A  41F9 00001D4A           1038      LEA         MODE_JUMP, A0   *LOAD MODE JUMP
00001920  C9FC 0006               1039      MULS        #6, D4          *GET JUMP
00001924  4EB0 4000               1040      JSR         0(A0, D4)       *JUMP
00001928                          1041      
00001928  16BC 0000               1042      MOVE.B      #00, (A3)
0000192C                          1043      
0000192C  6000 F942               1044      BRA         VALID_OPCODE
00001930                          1045  EA_ADDA         *0 INVALID
00001930  3E00                    1046      MOVE.W      D0, D7
00001932                          1047      
00001932  3807                    1048      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
00001934  EF4C                    1049      LSL.W       #7, D4      * 
00001936  EE4C                    1050      LSR.W       #7, D4      *
00001938  EC4C                    1051      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
0000193A  4EB9 00001E40           1052      JSR         GET_OPMODE
00001940                          1053      
00001940  3807                    1054      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001942  E14C                    1055      LSL.W       #8, D4      *
00001944  E54C                    1056      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
00001946  E04C                    1057      LSR.W       #8, D4      *
00001948  EA4C                    1058      LSR.W       #5, D4      *D4 = SOURCE MODE
0000194A                          1059      
0000194A  3A07                    1060      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
0000194C  E14D                    1061      LSL.W       #8, D5      *
0000194E  EB4D                    1062      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001950  E04D                    1063      LSR.W       #8, D5      *
00001952  EA4D                    1064      LSR.W       #5, D5      *D5 = SOURCE REGISTER
00001954                          1065      
00001954  4EB9 00001F0C           1066      JSR         MODE_CHOOSER  *INCASE MODE IS $111
0000195A  41F9 00001D4A           1067      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001960  C9FC 0006               1068      MULS        #6, D4        *GET JUMP
00001964  4EB0 4000               1069      JSR         0(A0, D4)     *JUMP
00001968  4EB9 00001F88           1070      JSR COMMA 
0000196E  4EB9 00001FEA           1071      JSR SPACE
00001974  3A07                    1072      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
00001976  E94D                    1073      LSL.W       #4, D5      *
00001978  E04D                    1074      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
0000197A  EA4D                    1075      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
0000197C                          1076      
0000197C  4EB9 00001D88           1077      JSR         ADDR_1
00001982  16BC 0000               1078      MOVE.B      #00, (A3)
00001986                          1079      
00001986  6000 F8E8               1080      BRA         VALID_OPCODE
0000198A                          1081  EA_MULS                *1 INVALID;
0000198A                          1082  
0000198A  3E00                    1083      MOVE.W      D0, D7
0000198C                          1084      
0000198C  4EB9 00001FEA           1085      JSR         SPACE
00001992  3807                    1086      MOVE.W      D7, D4      
00001994  E14C                    1087      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001996  E54C                    1088      LSL.W       #2, D4
00001998  E04C                    1089      LSR.W       #8, D4      *
0000199A  EA4C                    1090      LSR.W       #5, D4      *D4 = EA MODE
0000199C                          1091      
0000199C  3A07                    1092      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
0000199E  E14D                    1093      LSL.W       #8, D5  
000019A0  EB4D                    1094      LSL.W       #5, D5      *
000019A2  E04D                    1095      LSR.W       #8, D5
000019A4  EA4D                    1096      LSR.W       #5, D5      * D5 = EA REGISTER
000019A6                          1097      
000019A6  4EB9 00001F0C           1098      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
000019AC  41F9 00001D4A           1099      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000019B2  C9FC 0006               1100      MULS        #6, D4          *GET JUMP
000019B6  4EB0 4000               1101      JSR         0(A0, D4)       *JUMP
000019BA  4EB9 00001F88           1102      JSR         COMMA
000019C0  4EB9 00001FEA           1103      JSR         SPACE
000019C6  3A07                    1104      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
000019C8  E94D                    1105      LSL.W       #4, D5      *
000019CA  E04D                    1106      LSR.W       #8, D5      *
000019CC  EA4D                    1107      LSR.W       #5, D5      *D5 DESTINATION REGISTER
000019CE                          1108      
000019CE  4EB9 00001D7A           1109      JSR         DATA_0
000019D4  16BC 0000               1110      MOVE.B      #00, (A3)
000019D8                          1111      
000019D8  6000 F896               1112      BRA         VALID_OPCODE
000019DC                          1113  EA_LEA          *5 INVALIDS; DONE
000019DC  3E00                    1114      MOVE.W      D0, D7
000019DE                          1115      
000019DE  4EB9 00001FEA           1116      JSR         SPACE
000019E4  3807                    1117      MOVE.W      D7, D4      *GETTING SOURCE MODE
000019E6  E14C                    1118      LSL.W       #8, D4      *
000019E8  E54C                    1119      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
000019EA  E04C                    1120      LSR.W       #8, D4      *
000019EC  EA4C                    1121      LSR.W       #5, D4      *D4 = SOURCE MODE
000019EE                          1122      
000019EE  3A07                    1123      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
000019F0  E14D                    1124      LSL.W       #8, D5      *
000019F2  EB4D                    1125      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
000019F4  E04D                    1126      LSR.W       #8, D5      *
000019F6  EA4D                    1127      LSR.W       #5, D5      *D5 = SOURCE REGISTER
000019F8                          1128      
000019F8  4EB9 00001F0C           1129      JSR         MODE_CHOOSER  *INCASE MODE IS $111
000019FE  4EB9 00001CF6           1130      JSR         LEA_ERROR_CHECK
00001A04  41F9 00001D4A           1131      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001A0A  C9FC 0006               1132      MULS        #6, D4        *GET JUMP
00001A0E  4EB0 4000               1133      JSR         0(A0, D4)     *JUMP
00001A12  4EB9 00001F88           1134      JSR COMMA
00001A18  4EB9 00001FEA           1135      JSR SPACE
00001A1E  3A07                    1136      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
00001A20  E94D                    1137      LSL.W       #4, D5      *
00001A22  E04D                    1138      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
00001A24  EA4D                    1139      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
00001A26                          1140      
00001A26  4EB9 00001D88           1141      JSR         ADDR_1
00001A2C  16BC 0000               1142      MOVE.B      #00, (A3)
00001A30                          1143      
00001A30  6000 F83E               1144      BRA         VALID_OPCODE
00001A34                          1145  EA_CLR          *2 INVALID; DONE
00001A34  3E00                    1146      MOVE.W      D0, D7
00001A36                          1147      
00001A36  3807                    1148      MOVE.W      D7, D4
00001A38  E14C                    1149      LSL.W       #8, D4      *
00001A3A  E04C                    1150      LSR.W       #8, D4      *
00001A3C  EC4C                    1151      LSR.W       #6, D4      *D4 = SIZE
00001A3E  4EB9 00001EAA           1152      JSR         GET_SIZE_ADDI
00001A44  3807                    1153      MOVE.W      D7, D4      
00001A46  E14C                    1154      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001A48  E54C                    1155      LSL.W       #2, D4
00001A4A  E04C                    1156      LSR.W       #8, D4      *
00001A4C  EA4C                    1157      LSR.W       #5, D4      *D4 = EA MODE
00001A4E                          1158      
00001A4E  3A07                    1159      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001A50  E14D                    1160      LSL.W       #8, D5  
00001A52  EB4D                    1161      LSL.W       #5, D5      *
00001A54  E04D                    1162      LSR.W       #8, D5
00001A56  EA4D                    1163      LSR.W       #5, D5      * D5 = EA REGISTER
00001A58                          1164      
00001A58  4EB9 00001F0C           1165      JSR         MODE_CHOOSER    *IF A WORD OR LONG  
00001A5E  4EB9 00001CE4           1166      JSR         ADDI_ERROR_CHECK  
00001A64  41F9 00001D4A           1167      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001A6A  C9FC 0006               1168      MULS        #6, D4          *GET JUMP
00001A6E  4EB0 4000               1169      JSR         0(A0, D4)       *JUMP
00001A72                          1170      
00001A72  16BC 0000               1171      MOVE.B      #00, (A3)
00001A76                          1172      
00001A76  6000 F7F8               1173      BRA         VALID_OPCODE
00001A7A                          1174  EA_LSD          *3 INVALID; DONE
00001A7A  3E00                    1175      MOVE.W      D0, D7
00001A7C                          1176      
00001A7C  3807                    1177      MOVE.W      D7, D4
00001A7E  E14C                    1178      LSL.W       #8, D4
00001A80  E04C                    1179      LSR.W       #8, D4
00001A82  EC4C                    1180      LSR.W       #6, D4      *ISOLATE SIZE
00001A84  4EB9 00001EAA           1181      JSR         GET_SIZE_ADDI  *PRINT SIZE
00001A8A  B83C 0003               1182      CMP.B       #3, D4      *EA SHIFT
00001A8E  6700 003E               1183      BEQ         EA_SHIFT    *BRANCH TO EA SHIFT
00001A92  3807                    1184      MOVE.W      D7, D4
00001A94  E14C                    1185      LSL.W       #8, D4
00001A96  E54C                    1186      LSL.W       #2, D4
00001A98  E04C                    1187      LSR.W       #8, D4
00001A9A  EE4C                    1188      LSR.W       #7, D4      *D4 = TYPE
00001A9C                          1189      
00001A9C  3A07                    1190      MOVE.W      D7, D5      *GETTING DATA
00001A9E  E94D                    1191      LSL.W       #4, D5      *SHIFT LEFT 4; RIGHT 13
00001AA0  E04D                    1192      LSR.W       #8, D5      *
00001AA2  EA4D                    1193      LSR.W       #5, D5      *D5 = DATA / REGISTER
00001AA4                          1194      
00001AA4  4EB9 00001ECA           1195      JSR         TYPE_CHOOSER
00001AAA  4EB9 00001F88           1196      JSR         COMMA
00001AB0  4EB9 00001FEA           1197      JSR         SPACE
00001AB6  3A07                    1198      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001AB8  E14D                    1199      LSL.W       #8, D5  
00001ABA  EB4D                    1200      LSL.W       #5, D5      *
00001ABC  E04D                    1201      LSR.W       #8, D5
00001ABE  EA4D                    1202      LSR.W       #5, D5      * D5 = EA REGISTER
00001AC0  4EB9 00001D7A           1203      JSR         DATA_0
00001AC6                          1204      
00001AC6  16BC 0000               1205      MOVE.B      #00, (A3)
00001ACA                          1206      
00001ACA  6000 F7A4               1207      BRA         VALID_OPCODE
00001ACE                          1208  EA_SHIFT
00001ACE  4EB9 00001FEA           1209      JSR         SPACE
00001AD4  3807                    1210      MOVE.W      D7, D4      *
00001AD6  E14C                    1211      LSL.W       #8, D4      *
00001AD8  E54C                    1212      LSL.W       #2, D4
00001ADA  E04C                    1213      LSR.W       #8, D4      *
00001ADC  EA4C                    1214      LSR.W       #5, D4      *D4 = EA MODE
00001ADE                          1215      
00001ADE  3A07                    1216      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001AE0  E14D                    1217      LSL.W       #8, D5  
00001AE2  EB4D                    1218      LSL.W       #5, D5      *
00001AE4  E04D                    1219      LSR.W       #8, D5
00001AE6  EA4D                    1220      LSR.W       #5, D5      * D5 = EA REGISTER
00001AE8                          1221      
00001AE8  4EB9 00001F0C           1222      JSR         MODE_CHOOSER    *IF A WORD OR LONG   
00001AEE  4EB9 00001CCA           1223      JSR         ADD_ERROR_CHECK 
00001AF4  41F9 00001D4A           1224      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001AFA  C9FC 0006               1225      MULS        #6, D4          *GET JUMP
00001AFE  4EB0 4000               1226      JSR         0(A0, D4)       *JUMP
00001B02  6000 0002               1227      BRA         DONE
00001B06                          1228  DONE
00001B06  16BC 0000               1229      MOVE.B      #00, (A3)
00001B0A                          1230      
00001B0A  6000 F764               1231      BRA         VALID_OPCODE
00001B0E                          1232  
00001B0E                          1233  EA_CMP          *0 INVALID
00001B0E  3E00                    1234      MOVE.W      D0, D7
00001B10                          1235      
00001B10  3807                    1236      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
00001B12  EF4C                    1237      LSL.W       #7, D4      * 
00001B14  EE4C                    1238      LSR.W       #7, D4      *
00001B16  EC4C                    1239      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
00001B18  4EB9 00001EAA           1240      JSR         GET_SIZE_ADDI
00001B1E  3807                    1241      MOVE.W      D7, D4      
00001B20  E14C                    1242      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001B22  E54C                    1243      LSL.W       #2, D4
00001B24  E04C                    1244      LSR.W       #8, D4      *
00001B26  EA4C                    1245      LSR.W       #5, D4      *D4 = EA MODE
00001B28                          1246      
00001B28  3A07                    1247      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001B2A  E14D                    1248      LSL.W       #8, D5  
00001B2C  EB4D                    1249      LSL.W       #5, D5      *
00001B2E  E04D                    1250      LSR.W       #8, D5
00001B30  EA4D                    1251      LSR.W       #5, D5      * D5 = EA REGISTER
00001B32                          1252      
00001B32  4EB9 00001F0C           1253      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001B38  41F9 00001D4A           1254      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001B3E  C9FC 0006               1255      MULS        #6, D4          *GET JUMP
00001B42  4EB0 4000               1256      JSR         0(A0, D4)       *JUMP
00001B46  4EB9 00001F88           1257      JSR         COMMA
00001B4C  4EB9 00001FEA           1258      JSR         SPACE
00001B52  3A07                    1259      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
00001B54  E94D                    1260      LSL.W       #4, D5      *
00001B56  E04D                    1261      LSR.W       #8, D5      *
00001B58  EA4D                    1262      LSR.W       #5, D5      *D5 DESTINATION REGISTER
00001B5A                          1263      
00001B5A  4EB9 00001D7A           1264      JSR         DATA_0
00001B60  16BC 0000               1265      MOVE.B      #00, (A3)
00001B64                          1266      
00001B64  6000 F70A               1267      BRA         VALID_OPCODE
00001B68                          1268  EA_BCC          *0 INVALID (I THINK)
00001B68  3E00                    1269      MOVE.W      D0, D7
00001B6A                          1270      
00001B6A  3807                    1271      MOVE.W      D7, D4
00001B6C  E94C                    1272      LSL.W       #4, D4
00001B6E  E04C                    1273      LSR.W       #8, D4
00001B70  E84C                    1274      LSR.W       #4, D4   *D4 = BINARY CONDITION CODE
00001B72  4EB9 00001EDA           1275      JSR         PRINT_BCC
00001B78  4EB9 00001FEA           1276      JSR         SPACE
00001B7E  4EB9 00001F3A           1277      JSR         OUTPUT_HEX
00001B84  16BC 0000               1278      MOVE.B      #00, (A3)
00001B88                          1279      
00001B88  6000 F6E6               1280      BRA         VALID_OPCODE
00001B8C                          1281  EA_JSR   *5 INVALID; DONE
00001B8C                          1282  
00001B8C  3E00                    1283      MOVE.W      D0, D7
00001B8E                          1284      
00001B8E  4EB9 00001FEA           1285      JSR         SPACE
00001B94  3807                    1286      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001B96  E14C                    1287      LSL.W       #8, D4      *
00001B98  E54C                    1288      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
00001B9A  E04C                    1289      LSR.W       #8, D4      *
00001B9C  EA4C                    1290      LSR.W       #5, D4      *D4 = SOURCE MODE
00001B9E                          1291      
00001B9E  3A07                    1292      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
00001BA0  E14D                    1293      LSL.W       #8, D5      *
00001BA2  EB4D                    1294      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001BA4  E04D                    1295      LSR.W       #8, D5      *
00001BA6  EA4D                    1296      LSR.W       #5, D5      *D5 = SOURCE REGISTER
00001BA8                          1297      
00001BA8  4EB9 00001F0C           1298      JSR         MODE_CHOOSER  *INCASE MODE IS $111
00001BAE  4EB9 00001CF6           1299      JSR         LEA_ERROR_CHECK
00001BB4  41F9 00001D4A           1300      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001BBA  C9FC 0006               1301      MULS        #6, D4        *GET JUMP
00001BBE  4EB0 4000               1302      JSR         0(A0, D4)     *JUM
00001BC2                          1303      
00001BC2  16BC 0000               1304      MOVE.B      #00, (A3)
00001BC6                          1305      
00001BC6  6000 F6A8               1306      BRA         VALID_OPCODE
00001BCA                          1307  EA_MOVEM
00001BCA                          1308  
00001BCA  3C00                    1309      MOVE.W      D0, D6
00001BCC  3806                    1310      MOVE.W      D6, D4
00001BCE  EB4C                    1311      LSL.W       #5, D4
00001BD0  E94C                    1312      LSL.W       #4, D4
00001BD2  E04C                    1313      LSR.W       #8, D4
00001BD4  EE4C                    1314      LSR.W       #7, D4
00001BD6  4EB9 00001EF4           1315      JSR         REG_SIZE
00001BDC  3E06                    1316      MOVE.W      D6, D7
00001BDE  EB4F                    1317      LSL.W       #5, D7
00001BE0  E04F                    1318      LSR.W       #8, D7
00001BE2  EE4F                    1319      LSR.W       #7, D7
00001BE4  BE3C 0000               1320      CMP.B       #0, D7
00001BE8  6700 003E               1321      BEQ         PRINT_LIST
00001BEC  BE7C 0000               1322  EAP CMP.W       #0, D7      *IF ITS A ZERO, THAT MEANS WE JUST JUMPED HERE 
00001BF0  6700 00A2               1323      BEQ         COMMA_SPACE *FROM CHECK TYPE, ELSE MEANS ITS UNALTERED
00001BF4  3806                    1324  EAS MOVE.W      D6, D4      
00001BF6  E14C                    1325      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001BF8  E54C                    1326      LSL.W       #2, D4
00001BFA  E04C                    1327      LSR.W       #8, D4      *
00001BFC  EA4C                    1328      LSR.W       #5, D4      *D4 = EA MODE
00001BFE                          1329      
00001BFE  3A06                    1330      MOVE.W      D6, D5      *SHIFT LEFT 13; RIGHT 13
00001C00  E14D                    1331      LSL.W       #8, D5  
00001C02  EB4D                    1332      LSL.W       #5, D5      *
00001C04  E04D                    1333      LSR.W       #8, D5
00001C06  EA4D                    1334      LSR.W       #5, D5      * D5 = EA REGISTER
00001C08                          1335      
00001C08  4EB9 00001F0C           1336      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001C0E  41F9 00001D4A           1337      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001C14  C9FC 0006               1338      MULS        #6, D4          *GET JUMP
00001C18  4EB0 4000               1339      JSR         0(A0, D4)       *JUMP
00001C1C                          1340      
00001C1C  BE7C 0001               1341      CMP.W       #1, D7 *IF ONE THEN THIS WAS PRINTED FIRST
00001C20  6700 0006               1342      BEQ         PRINT_LIST
00001C24                          1343      
00001C24  6000 008E               1344      BRA         DONE_PRINTING
00001C28                          1345  PRINT_LIST
00001C28  BE3C 0001               1346      CMP.B       #1, D7 
00001C2C  6700 0076               1347      BEQ         COMMA_SPACE2
00001C30  2E0A                    1348  EA2 MOVE.L      A2, D7
00001C32  548A                    1349      ADD.L       #2, A2
00001C34  143C 0008               1350      MOVE.B      #$8, D2
00001C38  4244                    1351      CLR         D4
00001C3A                          1352  FOR_LOOP    
00001C3A  B404                    1353      CMP.B       D4, D2
00001C3C  6700 001E               1354      BEQ         ADDRESS_REGISTERS
00001C40  E25F                    1355      ROR.W       #1, D7
00001C42  6000 0006               1356      BRA         PRINT_CURRENT
00001C46  5244                    1357  JFZ ADDQ        #1, D4
00001C48  60F0                    1358      BRA         FOR_LOOP
00001C4A                          1359      
00001C4A                          1360  PRINT_CURRENT
00001C4A  64FA                    1361      BCC         JFZ
00001C4C  1A04                    1362      MOVE.B      D4, D5
00001C4E  4EB9 00001D7A           1363      JSR         DATA_0
00001C54  4EB9 00002012           1364      JSR         SLASH
00001C5A  60EA                    1365      BRA         JFZ
00001C5C                          1366      
00001C5C                          1367  ADDRESS_REGISTERS
00001C5C  4244                    1368      CLR         D4
00001C5E                          1369  FOR_2
00001C5E  B404                    1370      CMP.B       D4, D2
00001C60  6700 001E               1371      BEQ         CHECK_TYPE
00001C64  E25F                    1372      ROR.W       #1, D7
00001C66  6000 0006               1373      BRA         EA_PRINT_ADDRESS
00001C6A  5244                    1374  JFF ADDQ        #1, D4
00001C6C  60F0                    1375      BRA         FOR_2
00001C6E                          1376      
00001C6E                          1377  EA_PRINT_ADDRESS
00001C6E  64FA                    1378      BCC         JFF
00001C70  1A04                    1379      MOVE.B      D4, D5
00001C72  4EB9 00002012           1380      JSR         SLASH
00001C78  4EB9 00001D88           1381      JSR         ADDR_1
00001C7E  60EA                    1382      BRA         JFF  
00001C80                          1383  CHECK_TYPE
00001C80  3E06                    1384      MOVE.W      D6, D7
00001C82  EB4F                    1385      LSL.W       #5, D7  
00001C84  E04F                    1386      LSR.W       #8, D7
00001C86  EE4F                    1387      LSR.W       #7, D7
00001C88  BE3C 0000               1388      CMP.B       #0, D7   *IF TYPE IS 0 THE LIST HAS BEEN PRINTED FIRST  
00001C8C  6700 FF5E               1389      BEQ         EAP      *THEREFORE ITS TIME TO PRINT THE EAP
00001C90  6600 0022               1390      BNE         DONE_PRINTING
00001C94                          1391      
00001C94                          1392  COMMA_SPACE
00001C94  4EB9 00001F88           1393      JSR         COMMA
00001C9A  4EB9 00001FEA           1394      JSR         SPACE
00001CA0  6000 FF52               1395      BRA         EAS
00001CA4                          1396      
00001CA4                          1397  COMMA_SPACE2
00001CA4  4EB9 00001F88           1398      JSR         COMMA
00001CAA  4EB9 00001FEA           1399      JSR         SPACE
00001CB0  6000 FF7E               1400      BRA         EA2
00001CB4                          1401      
00001CB4                          1402  DONE_PRINTING
00001CB4  16BC 0000               1403      MOVE.B      #00, (A3)
00001CB8  6000 F5B6               1404      BRA         VALID_OPCODE
00001CBC                          1405  
00001CBC                          1406  
00001CBC                          1407  
00001CBC                          1408  
00001CBC                          1409  
00001CBC                          1410  
00001CBC                          1411  
00001CBC                          1412  
00001CBC                          1413  
00001CBC                          1414  
00001CBC                          1415  
00001CBC                          1416  
00001CBC                          1417  
00001CBC                          1418  
00001CBC                          1419  
00001CBC                          1420  
00001CBC                          1421  BYEBYE
00001CBC  FFFF FFFF               1422      SIMHALT
00001CC0                          1423  
00001CC0                          1424  
00001CC0                          1425  
00001CC0                          1426  
00001CC0                          1427  
00001CC0                          1428  
00001CC0                          1429  
00001CC0                          1430  
00001CC0                          1431  
00001CC0                          1432  
00001CC0                          1433  
00001CC0                          1434  
00001CC0                          1435  
00001CC0                          1436  
00001CC0                          1437  
00001CC0                          1438  MOVE_ERROR_CHECK       *only invalid move is desn addr reg
00001CC0  B83C 0001               1439      CMP.B       #1, D4 *if d4 is one, dest is addr reg
00001CC4  6700 0354               1440      BEQ         INVALID
00001CC8  4E75                    1441      RTS
00001CCA                          1442      
00001CCA                          1443  ADD_ERROR_CHECK  *COVERS ALL SHIFTS
00001CCA  B83C 0007               1444      CMP.B       #7, D4
00001CCE  6700 0072               1445      BEQ         EAT_INVALID
00001CD2  B83C 0001               1446      CMP.B       #1, D4
00001CD6  6700 0342               1447      BEQ         INVALID
00001CDA  B83C 0000               1448      CMP.B       #0, D4
00001CDE  6700 033A               1449      BEQ         INVALID
00001CE2  4E75                    1450      RTS 
00001CE4                          1451      
00001CE4                          1452  ADDI_ERROR_CHECK *COVERS CLR
00001CE4  B83C 0001               1453      CMP.B       #1, D4
00001CE8  6700 0330               1454      BEQ         INVALID
00001CEC  B83C 0007               1455      CMP.B       #7, D4
00001CF0  6700 0050               1456      BEQ         EAT_INVALID
00001CF4  4E75                    1457      RTS
00001CF6                          1458      
00001CF6                          1459  LEA_ERROR_CHECK *COVERS JSR
00001CF6  B83C 0000               1460      CMP.B       #0, D4
00001CFA  6700 031E               1461      BEQ         INVALID
00001CFE  B83C 0001               1462      CMP.B       #1, D4
00001D02  6700 0316               1463      BEQ         INVALID
00001D06  B83C 0003               1464      CMP.B       #3, D4
00001D0A  6700 030E               1465      BEQ         INVALID
00001D0E  B83C 0004               1466      CMP.B       #4, D4
00001D12  6700 0306               1467      BEQ         INVALID
00001D16  B83C 0007               1468      CMP.B       #7, D4
00001D1A  6700 0026               1469      BEQ         EAT_INVALID
00001D1E  4E75                    1470      RTS
00001D20                          1471      
00001D20                          1472  MOVEM_ERROR_CHECK *0, 1, 4, 7
00001D20  B83C 0000               1473      CMP.B       #0, D4
00001D24  6700 02F4               1474      BEQ         INVALID
00001D28  B83C 0001               1475      CMP.B       #1, D4
00001D2C  6700 02EC               1476      BEQ         INVALID
00001D30  B83C 0004               1477      CMP.B       #4, D4
00001D34  6700 02E4               1478      BEQ         INVALID
00001D38  B83C 0007               1479      CMP.B       #7, D4
00001D3C  6700 0004               1480      BEQ         EAT_INVALID
00001D40  4E75                    1481      RTS
00001D42                          1482      
00001D42                          1483      
00001D42                          1484      
00001D42                          1485      *assuming FOR NOW that it always eats a long
00001D42                          1486  EAT_INVALID *EATS THE NEXT TWO WORD VALUES... THEN CALLS INVALID
00001D42  548A                    1487      ADD.L       #2, A2      *EAT THE FIRST WORD
00001D44  548A                    1488      ADD.L       #2, A2      *EAT THE SECOND WORD
00001D46  6000 02D2               1489      BRA         INVALID
00001D4A                          1490  
00001D4A                          1491  
00001D4A                          1492  
00001D4A                          1493  
00001D4A                          1494  
00001D4A                          1495  
00001D4A                          1496  
00001D4A                          1497  
00001D4A                          1498  
00001D4A                          1499  
00001D4A                          1500  
00001D4A                          1501  
00001D4A                          1502  
00001D4A                          1503  
00001D4A                          1504  
00001D4A                          1505  
00001D4A                          1506  
00001D4A                          1507  
00001D4A  4EF9 00001D7A           1508  MODE_JUMP       JMP     DATA_0
00001D50  4EF9 00001D88           1509                  JMP     ADDR_1
00001D56  4EF9 00001D96           1510                  JMP     ADDI_2
00001D5C  4EF9 00001DA8           1511                  JMP     ADDP_3
00001D62  4EF9 00001DB4           1512                  JMP     ADDM_4
00001D68  4EF9 00001DC0           1513                  JMP     ABSW_5
00001D6E  4EF9 00001DD6           1514                  JMP     ABSL_6
00001D74  4EF9 00001DFA           1515                  JMP     IMME_7
00001D7A                          1516  
00001D7A                          1517  DATA_0 *DONE
00001D7A  16F9 00002218           1518      MOVE.B      M_DREG, (A3)+
00001D80  4EB9 00001E36           1519      JSR         GET_REG
00001D86  4E75                    1520      RTS
00001D88                          1521  
00001D88                          1522  ADDR_1 *ADD CONDITIONS FOR SOURCE ONLY, AND NEVER BYTES
00001D88  16F9 0000221A           1523      MOVE.B      M_AREG, (A3)+
00001D8E  4EB9 00001E36           1524      JSR         GET_REG
00001D94  4E75                    1525      RTS
00001D96                          1526   
00001D96                          1527  ADDI_2 *DONE
00001D96  4EB9 00001FCA           1528      JSR         OPEN
00001D9C  4EB8 1D88               1529      JSR         ADDR_1
00001DA0  4EB9 00001FD2           1530      JSR         CLOSE
00001DA6  4E75                    1531      RTS
00001DA8                          1532      
00001DA8                          1533  ADDP_3 *DONE
00001DA8  4EB8 1D96               1534      JSR         ADDI_2
00001DAC  4EB9 00001FDA           1535      JSR         PLUS
00001DB2  4E75                    1536      RTS
00001DB4                          1537      
00001DB4                          1538  ADDM_4 *DONE
00001DB4  4EB9 00001FE2           1539      JSR         SUB
00001DBA  4EB8 1D96               1540      JSR         ADDI_2
00001DBE  4E75                    1541      RTS
00001DC0                          1542      
00001DC0                          1543  ABSW_5  *DONE
00001DC0  548A                    1544      ADD.L       #2, A2      *INCREMENT INTO WORD ADDRESS
00001DC2  141A                    1545      MOVE.B      (A2)+, D2
00001DC4  E15A                    1546      ROL         #8, D2
00001DC6  1412                    1547      MOVE.B      (A2), D2
00001DC8  534A                    1548      SUB         #1, A2  
00001DCA  4EB9 00001FF2           1549      JSR         CASH
00001DD0  6100 0168               1550      BSR         OUTPUT_HEX
00001DD4  4E75                    1551      RTS
00001DD6                          1552  
00001DD6                          1553   
00001DD6                          1554  ABSL_6 *
00001DD6  4EB9 00001FF2           1555      JSR         CASH
00001DDC  548A                    1556      ADD.L       #2, A2      *INCREMENT INTO WORD
00001DDE  141A                    1557      MOVE.B      (A2)+, D2
00001DE0  E15A                    1558      ROL         #8, D2
00001DE2  1412                    1559      MOVE.B      (A2), D2
00001DE4  534A                    1560      SUB         #1, A2
00001DE6  6100 0152               1561      BSR         OUTPUT_HEX
00001DEA                          1562      
00001DEA                          1563      
00001DEA  548A                    1564      ADD.L       #2, A2      *IDCREMENT INTO NEXT WORK
00001DEC  141A                    1565      MOVE.B      (A2)+, D2
00001DEE  E15A                    1566      ROL         #8, D2
00001DF0  1412                    1567      MOVE.B      (A2), D2
00001DF2  534A                    1568      SUB         #1, A2
00001DF4  6100 0144               1569      BSR         OUTPUT_HEX
00001DF8  4E75                    1570      RTS
00001DFA                          1571      
00001DFA                          1572  IMME_7  *FOR NOW ONLY WORKING WITH IMMEDIATE HEX VALUES
00001DFA  4EB9 00001F90           1573      JSR         POUND
00001E00  4EB9 00001FF2           1574      JSR         CASH
00001E06                          1575      
00001E06  548A                    1576      ADD.L       #2, A2
00001E08  141A                    1577      MOVE.B      (A2)+, D2
00001E0A  E15A                    1578      ROL         #8, D2
00001E0C  1412                    1579      MOVE.B      (A2), D2
00001E0E  534A                    1580      SUB         #1, A2
00001E10  6100 0128               1581      BSR         OUTPUT_HEX
00001E14                          1582      
00001E14                          1583      
00001E14                          1584      
00001E14                          1585      *IDEA IS TO HAVE A FLAG HERE TO SEE IF THE DATA IS GONNA BE A LONG
00001E14                          1586      *THEN BRANCH TO THE BELOW THREE COMMANDS IF THE IMMEDIATE DATA IS A LONG
00001E14                          1587      
00001E14  4E75                    1588      RTS
00001E16                          1589  
00001E16                          1590  GET_SIZE
00001E16  4EB9 00001F98           1591      JSR         DOT
00001E1C  B83C 0001               1592      CMP.B       #1, D4
00001E20  6700 018C               1593      BEQ         BYTE
00001E24  B83C 0003               1594      CMP.B       #3, D4
00001E28  6700 0176               1595      BEQ         WORD
00001E2C  B83C 0002               1596      CMP.B       #2, D4
00001E30  6700 018A               1597      BEQ         LONG  
00001E34  4E75                    1598      RTS
00001E36                          1599      
00001E36                          1600  GET_REG ******************
00001E36  2205                    1601      MOVE.L      D5, D1 
00001E38  4EB8 12DC               1602      JSR         CONVERT_TO_ASCII
00001E3C  16C1                    1603      MOVE.B      D1, (A3)+
00001E3E  4E75                    1604      RTS
00001E40                          1605      
00001E40                          1606  GET_OPMODE
00001E40  4EB9 00001F98           1607      JSR         DOT
00001E46  B83C 0003               1608      CMP.B       #3, D4
00001E4A  6700 0154               1609      BEQ         WORD
00001E4E  B83C 0007               1610      CMP.B       #7, D4
00001E52  6700 0168               1611      BEQ         LONG
00001E56  4E75                    1612      RTS
00001E58                          1613      
00001E58                          1614  GET_OPMODE_MATH
00001E58  4EB9 00001F98           1615      JSR         DOT
00001E5E  B83C 0000               1616      CMP.B       #0, D4
00001E62  6700 014A               1617      BEQ         BYTE
00001E66  B83C 0004               1618      CMP.B       #4, D4
00001E6A  6700 0142               1619      BEQ         BYTE
00001E6E  B83C 0001               1620      CMP.B       #1, D4
00001E72  6700 012C               1621      BEQ         WORD
00001E76  B83C 0005               1622      CMP.B       #5, D4
00001E7A  6700 0124               1623      BEQ         WORD
00001E7E  B83C 0002               1624      CMP.B       #2, D4
00001E82  6700 0138               1625      BEQ         LONG
00001E86  B83C 0006               1626      CMP.B       #6, D4
00001E8A  6700 0130               1627      BEQ         LONG
00001E8E  4E75                    1628      RTS
00001E90                          1629      
00001E90                          1630  GET_DATA ******************
00001E90  4EB9 00001F90           1631      JSR         POUND
00001E96  BA3C 0000               1632      CMP.B       #0, D5
00001E9A  6700 0008               1633      BEQ         PRINT_8
00001E9E  2205                    1634      MOVE.L      D5, D1
00001EA0  16C1                    1635      MOVE.B      D1, (A3)+
00001EA2  4E75                    1636      RTS
00001EA4                          1637      
00001EA4                          1638  PRINT_8 ********
00001EA4  7208                    1639      MOVE.L      #8, D1
00001EA6  16C1                    1640      MOVE.B      D1, (A3)+
00001EA8  4E75                    1641      RTS
00001EAA                          1642      
00001EAA                          1643  GET_SIZE_ADDI
00001EAA  4EB9 00001F98           1644      JSR         DOT
00001EB0  B83C 0000               1645      CMP.B       #0, D4
00001EB4  6700 00F8               1646      BEQ         BYTE
00001EB8  B83C 0001               1647      CMP.B       #1, D4
00001EBC  6700 00E2               1648      BEQ         WORD
00001EC0  B83C 0002               1649      CMP.B       #2, D4
00001EC4  6700 00F6               1650      BEQ         LONG  
00001EC8  4E75                    1651      RTS
00001ECA                          1652      
00001ECA                          1653  TYPE_CHOOSER
00001ECA  B83C 0000               1654      CMP.B       #0, D4      *IF IMMEDIATE
00001ECE  67C0                    1655      BEQ         GET_DATA    *IF BRANCHED  ->  #1 IS NOW PRINTED
00001ED0  B83C 0001               1656      CMP.B       #1, D4      *IF A DATA REG
00001ED4  6700 FEA4               1657      BEQ         DATA_0
00001ED8  4E75                    1658      RTS
00001EDA                          1659      
00001EDA                          1660  PRINT_BCC
00001EDA  B83C 0004               1661      CMP.B       #4, D4
00001EDE  6700 011A               1662      BEQ         CC
00001EE2  B83C 000E               1663      CMP.B       #14, D4
00001EE6  6700 011A               1664      BEQ         GT
00001EEA  B83C 000F               1665      CMP.B       #15, D4
00001EEE  6700 011A               1666      BEQ         LE
00001EF2  4E75                    1667      RTS
00001EF4                          1668      
00001EF4                          1669  REG_SIZE
00001EF4  4EB9 00001F98           1670      JSR         DOT
00001EFA  B83C 0000               1671      CMP.B       #0, D4
00001EFE  6700 00A0               1672      BEQ         WORD
00001F02  B83C 0001               1673      CMP.B       #1, D4
00001F06  6700 00B4               1674      BEQ         LONG
00001F0A  4E75                    1675      RTS
00001F0C                          1676  MODE_CHOOSER
00001F0C  B83C 0007               1677      CMP.B       #7, D4
00001F10  6700 0004               1678      BEQ         NEW_MODE
00001F14  4E75                    1679      RTS
00001F16                          1680      
00001F16                          1681  NEW_MODE
00001F16  BA3C 0000               1682      CMP.B       #0, D5 *CHECK REGISTER(D5), WORD ADDRESS?
00001F1A  6700 001A               1683      BEQ         TO_FIVE *CHANGE MODE (D4) TO 5
00001F1E  BA3C 0001               1684      CMP.B       #1, D5 *CHECK REGISTER(D5), LONG ADDRESS?
00001F22  6700 000E               1685      BEQ         TO_SIX *CHANGE MODE(D4) TO 6
00001F26                          1686      
00001F26  BA3C 0004               1687      CMP.B       #4, D5 *for immediate data
00001F2A  6700 0004               1688      BEQ         TO_EIGHT
00001F2E  4E75                    1689      RTS
00001F30                          1690      
00001F30                          1691  TO_EIGHT
00001F30  4E75                    1692      RTS
00001F32                          1693      
00001F32                          1694  TO_SIX  
00001F32  5304                    1695      SUB.B      #1, D4
00001F34  4E75                    1696      RTS
00001F36                          1697  
00001F36                          1698  TO_FIVE
00001F36  5504                    1699      SUB.B      #2, D4
00001F38  4E75                    1700      RTS
00001F3A                          1701  
00001F3A                          1702  OUTPUT_HEX
00001F3A                          1703      *OUTPUT 1ST
00001F3A  3802                    1704      MOVE.W      D2, D4              *D7 = <1010 1111 0101 0111>
00001F3C  E04C                    1705      LSR.W       #8, D4              *D7 = <0000 0000 1010 1111>
00001F3E  E84C                    1706      LSR.W       #4, D4              *D7 = <0000 0000 0000 1010>
00001F40  1204                    1707      MOVE.B      D4, D1
00001F42  6100 F398               1708      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
00001F46  6100 003C               1709      BSR         ADD_CHAR         *print the char in D1  
00001F4A                          1710      *OUTPUT 2ND
00001F4A  3802                    1711      MOVE.W      D2, D4
00001F4C  E94C                    1712      LSL.W       #4, D4              *SHIFT OUT FURTHEST RIGHT BIT
00001F4E  E04C                    1713      LSR.W       #8, D4
00001F50  E84C                    1714      LSR.W       #4, D4  
00001F52  1204                    1715      MOVE.B      D4, D1
00001F54  6100 F386               1716      BSR         CONVERT_TO_ASCII
00001F58  6100 002A               1717      BSR         ADD_CHAR
00001F5C                          1718      *OUTPUT 3RD
00001F5C  3802                    1719      MOVE.W      D2, D4
00001F5E  E14C                    1720      LSL.W       #8, D4
00001F60  E04C                    1721      LSR.W       #8, D4
00001F62  E84C                    1722      LSR.W       #4, D4
00001F64  1204                    1723      MOVE.B      D4, D1
00001F66  6100 F374               1724      BSR         CONVERT_TO_ASCII
00001F6A  6100 0018               1725      BSR         ADD_CHAR
00001F6E                          1726      *OUTPUT 4TH
00001F6E  3802                    1727      MOVE.W      D2, D4  *D7 = <1010 1111 0101 0111>
00001F70  E14C                    1728      LSL.W       #8, D4  *     <0101 0111 0000 0000>
00001F72  E94C                    1729      LSL.W       #4, D4  *     <0111 0000 0000 0000>
00001F74  E04C                    1730      LSR.W       #8, D4  *     <
00001F76  E84C                    1731      LSR.W       #4, D4
00001F78  1204                    1732      MOVE.B      D4, D1
00001F7A  6100 F360               1733      BSR         CONVERT_TO_ASCII
00001F7E  6100 0004               1734      BSR         ADD_CHAR
00001F82  4E75                    1735      RTS
00001F84                          1736                                     *continue converting            
00001F84                          1737  ADD_CHAR ********
00001F84  16C1                    1738      MOVE.B      D1, (A3)+
00001F86  4E75                    1739      RTS
00001F88                          1740  
00001F88                          1741  COMMA
00001F88  16F9 00002204           1742      MOVE.B      M_COMMA, (A3)+
00001F8E  4E75                    1743      RTS
00001F90                          1744      
00001F90                          1745  POUND
00001F90  16F9 00002206           1746      MOVE.B      M_POUND, (A3)+
00001F96  4E75                    1747      RTS
00001F98                          1748          
00001F98                          1749  DOT
00001F98  16F9 00002208           1750      MOVE.B      M_DOT, (A3)+
00001F9E  4E75                    1751      RTS   
00001FA0                          1752  
00001FA0                          1753  WORD
00001FA0  16F9 0000220A           1754      MOVE.B      M_WORD, (A3)+
00001FA6  4EB9 00001FEA           1755      JSR         SPACE
00001FAC  4E75                    1756      RTS
00001FAE                          1757  
00001FAE                          1758  BYTE
00001FAE  16F9 0000220C           1759      MOVE.B      M_BYTE, (A3)+
00001FB4  4EB9 00001FEA           1760      JSR         SPACE
00001FBA  4E75                    1761      RTS
00001FBC                          1762      
00001FBC                          1763  LONG
00001FBC  16F9 0000220E           1764      MOVE.B      M_LONG, (A3)+
00001FC2                          1765      
00001FC2  4EB9 00001FEA           1766      JSR         SPACE
00001FC8  4E75                    1767      RTS
00001FCA                          1768      
00001FCA                          1769  OPEN
00001FCA  16F9 00002210           1770      MOVE.B      M_OPEN, (A3)+
00001FD0  4E75                    1771      RTS
00001FD2                          1772  
00001FD2                          1773  CLOSE
00001FD2  16F9 00002212           1774      MOVE.B      M_CLOSE, (A3)+
00001FD8  4E75                    1775      RTS
00001FDA                          1776      
00001FDA                          1777  PLUS
00001FDA  16F9 00002214           1778      MOVE.B      M_PLUS, (A3)+
00001FE0  4E75                    1779      RTS
00001FE2                          1780      
00001FE2                          1781  SUB
00001FE2  16F9 00002216           1782      MOVE.B      M_SUB, (A3)+
00001FE8  4E75                    1783      RTS
00001FEA                          1784      
00001FEA                          1785  SPACE
00001FEA  16F9 00002184           1786      MOVE.B      M_SPACE, (A3)+
00001FF0  4E75                    1787      RTS    
00001FF2                          1788      
00001FF2                          1789  CASH
00001FF2  16F9 00002202           1790      MOVE.B      M_CASH, (A3)+
00001FF8  4E75                    1791      RTS
00001FFA                          1792  
00001FFA                          1793  CC
00001FFA  16F9 0000221C           1794      MOVE.B      M_CC, (A3)+
00002000  4E75                    1795      RTS
00002002                          1796  GT
00002002  16F9 0000221F           1797      MOVE.B      M_GT, (A3)+
00002008  4E75                    1798      RTS
0000200A                          1799  
0000200A                          1800  LE
0000200A  16F9 00002222           1801      MOVE.B      M_LE, (A3)+
00002010  4E75                    1802      RTS
00002012                          1803      
00002012                          1804  SLASH
00002012  16F9 00002225           1805      MOVE.B      M_SLASH, (A3)+
00002018  4E75                    1806      RTS
0000201A                          1807      
0000201A                          1808  INVALID
0000201A  16BC 0000               1809      MOVE.B      #00, (A3)
0000201E  6000 F1C6               1810      BRA         INVALID_OPCODE
00002022                          1811      
00002022                          1812  
00002022  =0000000D               1813  CR      EQU     $0D
00002022  =0000000A               1814  LF      EQU     $0A
00002022                          1815  
00002022                          1816  
00002022                          1817  
00002022                          1818  
00002022                          1819  
00002022                          1820  
00002022                          1821  
00002022                          1822  
00002022                          1823  
00002022                          1824  
00002022                          1825  
00002022                          1826  
00002022                          1827  
00002022                          1828  
00002022                          1829  
00002022                          1830  
00002022                          1831  
00002022                          1832  
00002022                          1833  -------------------- end include --------------------
00002022                          1834  
00002022                          1835  END
00002022  4EB8 12FC               1836      JSR             IM_NEW_LINE
00002026  43F9 00002175           1837      LEA             M_END,A1
0000202C  103C 000E               1838      MOVE.B          #14,D0
00002030  4E4F                    1839      TRAP            #15
00002032  FFFF FFFF               1840      SIMHALT             ; halt simulator
00002036                          1841  
00002036  =0000000D               1842  CR          EQU     $0D
00002036  =0000000A               1843  LF          EQU     $0A
00002036                          1844  
00002036= 50 6C 65 61 73 65 ...   1845  M_INPUT_START DC.B 'Please enter starting memory address in hexadecimal:',CR,LF,0
0000206D= 50 6C 65 61 73 65 ...   1846  M_INPUT_END   DC.B 'Please enter ending memory address in hexadecimal:',CR,LF,0
000020A2= 49 6E 76 61 6C 69 ...   1847  M_INVALID     DC.B 'Invalid value. Please enter a valid value: ',CR,LF,0
000020D0= 45 71 75 61 6C 20 ...   1848  M_EQUAL       DC.B 'Equal values. No memory read. Please enter new values',CR,LF,0
00002108= 44 41 54 41 20 20 ...   1849  M_DATA        DC.B 'DATA    ',0
00002111= 20 20 20 20 00          1850  M_TAB         DC.B '    ',0
00002116= 50 72 65 73 73 20 ...   1851  M_PRESS_CONT  DC.B 'Press any key to continue',0
00002130= 46 69 6E 69 73 68 ...   1852  M_FINISHED    DC.B 'Finished Reading Memory',CR,LF,0
0000214A= 57 6F 75 6C 64 20 ...   1853  M_CONTINUE    DC.B 'Would you like to read memory again? (Y/N)',0
00002175= 50 72 6F 67 72 61 ...   1854  M_END         DC.B 'Program Exit',CR,LF,0
00002184                          1855  
00002184  =00000500               1856  STRING_START    EQU     $0500
00002184  =00000400               1857  DATA_START      EQU     $0400
00002184                          1858  
00002184  =00000100               1859  MEM_START       EQU     $0100
00002184  =00000200               1860  MEM_END         EQU     $0200
00002184                          1861  
00002184= 20 00                   1862  M_SPACE       DC.B  ' ',0
00002186= 0D 0A 00                1863  M_NEW_LINE    DC.B  '',CR,LF,0
00002189                          1864  
00002189= 41 44 44 49 00          1865  ADDI    DC.B    'ADDI',0
0000218E= 4D 4F 56 45 00          1866  MOVE    DC.B    'MOVE',0
00002193= 4D 4F 56 45 41 00       1867  MOVEA   DC.B    'MOVEA',0
00002199= 43 4C 52 00             1868  OPCLR   DC.B    'CLR',0
0000219D= 4C 45 41 00             1869  OPLEA   DC.B    'LEA',0
000021A1= 4A 53 52 00             1870  OPJSR   DC.B    'JSR',0
000021A5= 4E 4F 50 00             1871  OPNOP   DC.B    'NOP',0
000021A9= 52 54 53 00             1872  OPRTS   DC.B    'RTS',0
000021AD= 4D 4F 56 45 4D 00       1873  MOVEM   DC.B    'MOVEM',0
000021B3= 41 44 44 51 00          1874  ADDQ    DC.B    'ADDQ',0
000021B8= 42 00                   1875  Bcc     DC.B    'B',0
000021BA= 4D 4F 56 45 51 00       1876  MOVEQ   DC.B    'MOVEQ',0
000021C0= 44 49 56 55 00          1877  DIVU    DC.B    'DIVU',0
000021C5= 4F 52 00                1878  OR      DC.B    'OR',0
000021C8= 53 55 42 00             1879  OPSUB   DC.B    'SUB',0
000021CC= 43 4D 50 00             1880  CMP     DC.B    'CMP',0
000021D0= 4D 55 4C 53 00          1881  MULS    DC.B    'MULS',0
000021D5= 41 4E 44 00             1882  AND     DC.B    'AND',0
000021D9= 41 44 44 00             1883  ADD     DC.B    'ADD',0
000021DD= 41 44 44 41 00          1884  ADDA    DC.B    'ADDA',0
000021E2= 4C 53 4C 00             1885  LSL     DC.B    'LSL',0
000021E6= 4C 53 52 00             1886  LSR     DC.B    'LSR',0
000021EA= 41 53 4C 00             1887  ASL     DC.B    'ASL',0
000021EE= 41 53 52 00             1888  ASR     DC.B    'ASR',0
000021F2= 52 4F 4C 00             1889  ROL     DC.B    'ROL',0
000021F6= 52 4F 52 00             1890  ROR     DC.B    'ROR',0
000021FA= 49 4E 56 41 4C 49 ...   1891  M_INVAL DC.B 'INVALID',0
00002202= 24 00                   1892  M_CASH  DC.B '$',0
00002204                          1893  *M_SPACE DC.B ' ',0
00002204= 2C 00                   1894  M_COMMA DC.B ',',0
00002206= 23 00                   1895  M_POUND DC.B '#',0
00002208= 2E 00                   1896  M_DOT   DC.B '.',0
0000220A= 57 00                   1897  M_WORD  DC.B 'W',0
0000220C= 42 00                   1898  M_BYTE  DC.B 'B',0
0000220E= 4C 00                   1899  M_LONG  DC.B 'L',0
00002210= 28 00                   1900  M_OPEN  DC.B '(',0
00002212= 29 00                   1901  M_CLOSE DC.B ')',0
00002214= 2B 00                   1902  M_PLUS  DC.B '+',0
00002216= 2D 00                   1903  M_SUB   DC.B '-',0
00002218= 44 00                   1904  M_DREG  DC.B 'D',0
0000221A= 41 00                   1905  M_AREG  DC.B 'A',0
0000221C= 43 43 00                1906  M_CC    DC.B 'CC',0
0000221F= 47 54 00                1907  M_GT    DC.B 'GT',0
00002222= 4C 45 00                1908  M_LE    DC.B 'LE',0
00002225= 2F 00                   1909  M_SLASH DC.B '/',0
00002227                          1910  
00002227                          1911  
00002227                          1912      INCLUDE         'demo_test.x68'
00002227                          1913  
00002227  =00007000               1914  start       EQU $00007000   * ORG and END address
00002227                          1915  
00002227                          1916  
00007000                          1917          ORG start
00007000                          1918  
00007000                          1919  
00007000  4E71                    1920          NOP         *Required
00007002  4E75                    1921          RTS         *Required
00007004                          1922  
00007004                          1923  
00007004  D441                    1924  add_start   ADD.W   D1,D2
00007006  0641 4E71               1925                  ADDI.W  #$4E71,D1
0000700A  5E87                    1926          ADDQ.L  #07,D7      
0000700C  D6DE                    1927          ADDA.W  (A6)+,A3
0000700E  DDFC 3000AAAA           1928          ADDA.L  #$3000AAAA,A6
00007014  0685 D50000AA           1929          ADDI.L  #$D50000AA,D5
0000701A  0646 5555               1930          ADDI.W  #$5555,D6
0000701E  0600 00FE               1931          ADDI.B  #$FE,D0
00007022  9441                    1932                  SUB.W   D1,D2
00007024                          1933  
00007024  1200                    1934  moves       MOVE.B  D0,D1
00007026  33CE F30045BB           1935          MOVE.W  A6,$F30045BB
0000702C  2000                    1936          MOVE.L  D0,D0
0000702E  2CC7                    1937          MOVE.L  D7,(A6)+
00007030  36BC FFD0               1938          MOVE.W  #$FFD0,(A3)
00007034  23F9 C00022AA 3000A0F8  1939          MOVE.L  $C00022AA,$3000A0F8
0000703E  2B08                    1940          MOVE.L  A0,-(A5)
00007040  3056                    1941          MOVEA.W (A6),A0
00007042  48A7 07E0               1942          MOVEM.W A0/A1/A2/D5/D6/D7,-(SP)
00007046  4CD8 1B07               1943          MOVEM.L (A0)+,D0/D1/D2/A4/A3/A0/A1
0000704A  7401                    1944          MOVEQ   #1,D2
0000704C                          1945          
0000704C  C6B9 8000A000           1946  ands        AND.L   $8000A000,D3
00007052  E128                    1947  shifts      LSL.B   D0,D0
00007054  E848                    1948          LSR.W   #4,D0
00007056  E3DA                    1949          LSL.W   (A2)+
00007058  EC27                    1950          ASR.B   D6,D7
0000705A  EB27                    1951          ASL.B   D5,D7
0000705C  E5BB                    1952  rolls       ROL.L   D2,D3
0000705E  E89E                    1953          ROR.L   #4,D6
00007060                          1954  
00007060  4204                    1955  clear       CLR.B   D4
00007062  45F9 DC00FF00           1956  load_addr   LEA $DC00FF00,A2
00007068  49D5                    1957          LEA (A5),A4
0000706A                          1958  
0000706A  BA13                    1959  compares    CMP.B   (A3),D5
0000706C  B4B9 ABC0FF00           1960          CMP.L   $ABC0FF00,D2
00007072  B8C2                    1961          CMPA.W  D2,A4
00007074                          1962          
00007074                          1963  
00007074                          1964  
00007074  4E93                    1965  jmplabel        JSR (A3)        * Address register indirect
00007076  64E8                    1966          BCC clear       
00007078  6EF0                    1967          BGT compares        
0000707A  6F00 0002               1968          BLE multiply
0000707E                          1969          
0000707E  C7C0                    1970  multiply    MULS    D0,D3       *Optional instruction
00007080  C1D6                    1971          MULS    (A6),D0     *Optional instruction
00007082  C3FC 4567               1972          MULS    #$4567,D1   *Optional instruction
00007086  8ADB                    1973          DIVU    (A3)+,D5    *Optional instruction
00007088  4E71                    1974          NOP
0000708A  4E71                    1975          NOP
0000708C  9882                    1976          SUB.L   D2,D4
0000708E  9E93                    1977          SUB.L   (A3),D7
00007090                          1978      
00007090                          1979  
00007090                          1980  
00007090                          1981  
00007090                          1982  
00007090                          1983  
00007090                          1984  
00007090                          1985  
00007090                          1986  
00007090                          1987  
00007090                          1988  
00007090                          1989  
00007090                          1990  
00007090                          1991  -------------------- end include --------------------
00007090                          1992  
00007090                          1993  STOP:
00007090                          1994      END    MAIN

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSL_6              1DD6
ABSW_5              1DC0
ADD                 21D9
ADDA                21DD
ADDI                2189
ADDI_2              1D96
ADDI_ERROR_CHECK    1CE4
ADDM_4              1DB4
ADDP_3              1DA8
ADDQ                21B3
ADDRESS_REGISTERS   1C5C
ADDR_1              1D88
ADD_CHAR            1F84
ADD_ERROR_CHECK     1CCA
ADD_START           7004
ALPH_CHAR           12EE
AND                 21D5
ANDS                704C
ASL                 21EA
ASR                 21EE
BCC                 21B8
BYEBYE              1CBC
BYTE                1FAE
CASH                1FF2
CC                  1FFA
CHECK_TYPE          1C80
CLEAR               7060
CLOSE               1FD2
CMP                 21CC
COMMA               1F88
COMMA_SPACE         1C94
COMMA_SPACE2        1CA4
COMPARES            706A
CONTINUE_YN         118E
CONVERT_TO_ASCII    12DC
CR                  D
DATA                1324
DATA_0              1D7A
DATA_START          400
DIVU                21C0
DN_VERSION          17DA
DONE                1B06
DONE_PRINTING       1CB4
DOT                 1F98
EA2                 1C30
EAP                 1BEC
EAS                 1BF4
EAT_INVALID         1D42
EA_ADD              17BA
EA_ADDA             1930
EA_ADDI             1874
EA_ADDQ             18D6
EA_BCC              1B68
EA_CLR              1A34
EA_CMP              1B0E
EA_JSR              1B8C
EA_LEA              19DC
EA_LSD              1A7A
EA_MOVE             16B4
EA_MOVEA            1728
EA_MOVEM            1BCA
EA_MOVEQ            1780
EA_MULS             198A
EA_PRINT_ADDRESS    1C6E
EA_SHIFT            1ACE
EA_VERSION          1824
EFFECTIVE_ADDRESSING  118E
END                 2022
END_PRINT_DATA_LOOP  124C
EQUAL_ERROR         1136
FOR_2               1C5E
FOR_LOOP            1C3A
GET_DATA            1E90
GET_NEXT_INPUT      105E
GET_OPMODE          1E40
GET_OPMODE_MATH     1E58
GET_REG             1E36
GET_SIZE            1E16
GET_SIZE_ADDI       1EAA
GT                  2002
IMME_7              1DFA
IM_NEW_LINE         12FC
IM_SPACE            130A
INCREMENT_LINE      11DE
INPUT_END           1032
INPUT_START         1006
INVALID             201A
INVALID_CHAR_ERROR  10CA
INVALID_OPCODE      11E6
INVALID_OPCODE_CONT  11F6
JFF                 1C6A
JFZ                 1C46
JMPLABEL            7074
LE                  200A
LEA_ERROR_CHECK     1CF6
LF                  A
LOAD_ADDR           7062
LONG                1FBC
LSL                 21E2
LSR                 21E6
MAIN                1000
MEM_END             200
MEM_START           100
MODE_CHOOSER        1F0C
MODE_JUMP           1D4A
MOVE                218E
MOVEA               2193
MOVEM               21AD
MOVEM_ERROR_CHECK   1D20
MOVEQ               21BA
MOVES               7024
MOVE_ERROR_CHECK    1CC0
MULS                21D0
MULTIPLY            707E
M_AREG              221A
M_BYTE              220C
M_CASH              2202
M_CC                221C
M_CLOSE             2212
M_COMMA             2204
M_CONTINUE          214A
M_DATA              2108
M_DOT               2208
M_DREG              2218
M_END               2175
M_EQUAL             20D0
M_FINISHED          2130
M_GT                221F
M_INPUT_END         206D
M_INPUT_START       2036
M_INVAL             21FA
M_INVALID           20A2
M_LE                2222
M_LONG              220E
M_NEW_LINE          2186
M_OPEN              2210
M_PLUS              2214
M_POUND             2206
M_PRESS_CONT        2116
M_SLASH             2225
M_SPACE             2184
M_SUB               2216
M_TAB               2111
M_WORD              220A
NEW_MODE            1F16
NUMERIC_CHAR        12E8
OP0000              13AC
OP0001              13BC
OP0010              13CC
OP0011              13D0
OP0100              1408
OP0101              14B8
OP0110              14C8
OP0111              14E2
OP1000              14F2
OP1001              1528
OP1011              1538
OP1100              1548
OP1101              1580
OP1110              15B8
OPCLR               2199
OPEN                1FCA
OPJSR               21A1
OPLEA               219D
OPNOP               21A5
OPRTS               21A9
OPSUB               21C8
OP_JTAB             134A
OR                  21C5
OUTPUT_CHAR         12F4
OUTPUT_D1B          1254
OUTPUT_HEX          1F3A
PASTE_3             1692
PASTE_4             169A
PASTE_5             16A4
PLUS                1FDA
POUND               1F90
PRESS_TO_CONTINUE   11C0
PRE_READ_MEMORY     1162
PRINT_8             1EA4
PRINT_ADDRESS       121E
PRINT_ADDRESS_LOOP  1224
PRINT_BCC           1EDA
PRINT_CURRENT       1C4A
PRINT_DATA          11FE
PRINT_DATA_ADDRESS  1216
PRINT_DATA_LOOP     1238
PRINT_LIST          1C28
PRINT_OPCODE        1296
PRINT_OPCODE_EA     127A
READ_CHAR           1060
READ_CHAR_LOOP      1082
READ_MEMORY         1118
READ_MEMORY_CONT    117C
READ_MEMORY_LOOP    1164
REG_SIZE            1EF4
REMOVE_ZERO         107C
REMOVE_ZEROES       106A
RESTART             12AA
RETURN_TO_SUBROUTINE  12DA
ROL                 21F2
ROLLS               705C
ROR                 21F6
SHIFTS              7052
SLASH               2012
SPACE               1FEA
START               7000
STOP                7090
STRING_START        500
SUB                 1FE2
SWAP_VALUES         1146
TAB                 1316
TEST                1104
TO_EIGHT            1F30
TO_FIVE             1F36
TO_SIX              1F32
TYPE_CHOOSER        1ECA
VALIDATE_START_END  1124
VALID_CHAR          10F4
VALID_LETTER_LC     10EC
VALID_LETTER_UC     10E4
VALID_NUMBER        10DC
VALID_OPCODE        1270
VERIFY_OPCODE       1332
WORD                1FA0
_ADD                1598
_ADDA               15A8
_AND                1570
_ASD                161E
_ASL                1638
_ASR                1648
_CLR                1450
_DIVU               150A
_JSR                1470
_LEA                1460
_LSD                15E6
_LSL                15FE
_LSR                160E
_MOVE               13E8
_MOVEA              13F8
_MOVEM              14A8
_MULS               1560
_NOP                1480
_OR                 151A
_ROD                1658
_ROL                1672
_ROR                1682
_RTS                1494
