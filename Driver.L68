00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/2/2016 12:20:11 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  MAIN:                  ; first instruction of program
00001000  1401                       9      MOVE.B          D1, D2
00001002  6000 0006                 10      BRA             INPUT_START
00001006                            11      
00001006                            12      INCLUDE         'Main.X68'
00001006                            13  
00001006                            14      *TODO: CHANGE THIS VALUE TO RIGHT AFTER PROGRAM CODE   
00001006  6000 0104                 15      BRA         TEST
0000100A                            16      
0000100A                            17  
0000100A                            18  INPUT_START
0000100A  6000 0100                 19      BRA         TEST
0000100E  43F9 000033E6             20      LEA         M_INPUT_START,A1      *load message
00001014  103C 000E                 21      MOVE.B      #14,D0          *display string
00001018  4E4F                      22      TRAP        #15             *output string
0000101A  227C 00000300             23      MOVE.L      #$0300,A1       *set address of register A1 for string
00001020  103C 0002                 24      MOVE.B      #2,D0           *input string into A1 Trap
00001024  4E4F                      25      TRAP        #15             *input string from user
00001026  6100 0040                 26      BSR         READ_CHAR       *check for valid input
0000102A  23C3 00000100             27      MOVE.L      D3,MEM_START    *put the starting address in memory
00001030  B87C 0000                 28      CMP         #0,D4           *check the result register (D4)
00001034  6700 0004                 29      BEQ         INPUT_END       *valid value. read the ending value
00001038  60D0                      30      BRA         INPUT_START     *invalid value. try inputting start value again    
0000103A                            31      
0000103A                            32  INPUT_END
0000103A  43F9 0000341D             33      LEA         M_INPUT_END,A1  *load message
00001040  103C 000E                 34      MOVE.B      #14,D0          *display string
00001044  4E4F                      35      TRAP        #15             *output string
00001046  227C 00000300             36      MOVE.L      #$0300,A1       *set address of register A1 for string
0000104C  103C 0002                 37      MOVE.B      #2,D0           *input string into A1 Trap
00001050  4E4F                      38      TRAP        #15             *input string from user
00001052  6100 0014                 39      BSR         READ_CHAR       *check for valid input
00001056  23C3 00000200             40      MOVE.L      D3,MEM_END      *put ending address into memory
0000105C  B87C 0000                 41      CMP         #0,D4           *check the result register (D4)
00001060  6700 00BE                 42      BEQ         READ_MEMORY     *valid value. read the ending value
00001064  60D4                      43      BRA         INPUT_END       *invalid value. try inputting start value again    
00001066                            44      
00001066                            45  GET_NEXT_INPUT
00001066  4E75                      46      RTS
00001068                            47  
00001068                            48  READ_CHAR                       *verify that string is valid (all hexadecimal digits)
00001068  4243                      49      CLR         D3              *D3 will act as the total result
0000106A  2849                      50      MOVE.L      A1,A4           *the stop address
0000106C  143C 0006                 51      MOVE.B      #6,D2           *put 6 in D2
00001070  D8C2                      52      ADD.W       D2,A4           *A4 is now the stop address(A4)
00001072                            53      
00001072                            54  REMOVE_ZEROES
00001072  4281                      55      CLR.L       D1              *D1 will act as the temporary value
00001074  1211                      56      MOVE.B      (A1),D1         *read the byte from string
00001076  143C 0030                 57      MOVE.B      #$30,D2         *put ascii zero in D2
0000107A  B202                      58      CMP.B       D2,D1           *compare ascii zero and value of D1
0000107C  6700 0006                 59      BEQ         REMOVE_ZERO     *skip over that character   
00001080  6000 0008                 60      BRA         READ_CHAR_LOOP  *begin converting characters to numerical values
00001084                            61  REMOVE_ZERO
00001084  5289                      62      ADD.L       #1,A1           *increment string start address
00001086  528C                      63      ADD.L       #1,A4           *increment string end address
00001088  60E8                      64      BRA         REMOVE_ZEROES   *loop back and keep removing zeroes
0000108A                            65  READ_CHAR_LOOP     
0000108A  4281                      66      CLR.L       D1              *D1 will act as the temporary value
0000108C  1211                      67      MOVE.B      (A1),D1         *read the byte from string
0000108E  B27C 0000                 68      CMP         #0,D1           *compare 00 (NULL) and the byte ascii value in D1
00001092  67D2                      69      BEQ         GET_NEXT_INPUT    *if you reached the end of the string, end loop
00001094                            70      
00001094  143C 0030                 71      MOVE.B      #$30,D2         *put ascii zero in D2
00001098  B202                      72      CMP.B       D2,D1           *compare ascii zero and value of D1
0000109A  6D00 0036                 73      BLT         INVALID_CHAR_ERROR *branch on invalid (too small) ascii value   
0000109E  143C 0066                 74      MOVE.B      #$66,D2         *put ascii f in D2
000010A2  B202                      75      CMP.B       D2,D1           *compare ascii f and value of D1
000010A4  6E2C                      76      BGT.B       INVALID_CHAR_ERROR *branch on invalid ascii value
000010A6  143C 0061                 77      MOVE.B      #$61,D2         *put ascii a in D2
000010AA  B202                      78      CMP.B       D2,D1           *compare ascii a and value of D1
000010AC  6C00 0046                 79      BGE         VALID_LETTER_LC *value is between a and f. Loop back.
000010B0                            80      
000010B0  143C 0039                 81      MOVE.B      #$39,D2         *put ascii 9 in D2
000010B4  B202                      82      CMP.B       D2,D1           *compare ascii 9 and value of D1
000010B6  6F00 002C                 83      BLE         VALID_NUMBER    *value between 0 and 9. Loop back.
000010BA                            84  
000010BA  143C 0041                 85      MOVE.B      #$41,D2         *put ascii A into D2
000010BE  B202                      86      CMP.B       D2,D1           *compare ascii A and value of D1
000010C0  6D00 0010                 87      BLT         INVALID_CHAR_ERROR    *value between 9 and A (Invalid)
000010C4                            88      
000010C4  143C 0046                 89      MOVE.B      #$46,D2         *put ascii F into D2
000010C8  B202                      90      CMP.B       D2,D1           *compare ascii F and value of D1
000010CA  6E00 0006                 91      BGT         INVALID_CHAR_ERROR    *value between F and a (Invalid)
000010CE                            92           
000010CE  6000 001C                 93      BRA         VALID_LETTER_UC *value is between A and F        
000010D2                            94  INVALID_CHAR_ERROR   
000010D2  43F9 00003452             95      LEA         M_INVALID,A1    *load error message
000010D8  103C 000E                 96      MOVE.B      #14,D0          *display string trap
000010DC  4E4F                      97      TRAP        #15             *output error message
000010DE  183C 0001                 98      MOVE.B      #1,D4           *put invalid output in result register
000010E2  4E75                      99      RTS
000010E4                           100  VALID_NUMBER
000010E4  0401 0030                101      SUB.B       #$30,D1         *get actual value from ascii value
000010E8  6000 0012                102      BRA         VALID_CHAR      *read the next char in string
000010EC                           103  VALID_LETTER_UC
000010EC  0401 0037                104      SUB.B       #$37,D1         *get actual value from ascii value
000010F0  6000 000A                105      BRA         VALID_CHAR      *read the next char in string    
000010F4                           106  VALID_LETTER_LC
000010F4  0401 0057                107      SUB.B       #$57,D1         *get actual value from ascii value
000010F8  6000 0002                108      BRA         VALID_CHAR      *read the next char in string   
000010FC                           109  VALID_CHAR
000010FC  183C 0000                110      MOVE.B      #0,D4           *return valid value entry in D4    
00001100  E98B                     111      LSL.L       #4,D3           *put hex digit in proper place
00001102  D681                     112      ADD.L       D1,D3           *put new total in D3
00001104  5289                     113      ADD.L       #1,A1           *increment address
00001106  B8C9                     114      CMP         A1,A4           *if A1 > A4
00001108  6E80                     115      BGT         READ_CHAR_LOOP  *begin converting to float    
0000110A  4E75                     116      RTS                         *loop back to INPUT_START || INPUT_END   
0000110C                           117     
0000110C                           118  TEST
0000110C  23FC 00003000 00000100   119      MOVE.L      #$3000,MEM_START
00001116  23FC 00003300 00000200   120      MOVE.L      #$3300,MEM_END
00001120                           121  READ_MEMORY   
00001120  2479 00000100            122      MOVEA.L     MEM_START,A2    *A2 will be the starting/current address
00001126  2679 00000200            123      MOVEA.L     MEM_END,A3      *A3 will act as the ending address
0000112C                           124      
0000112C                           125  VALIDATE_START_END
0000112C  220A                     126      MOVE.L      A2,D1           *copy start address into D1
0000112E  240B                     127      MOVE.L      A3,D2           *copy end address into D2
00001130  B441                     128      CMP         D1,D2           *compare start and end values
00001132  6700 000A                129      BEQ         EQUAL_ERROR     *Start address is equal to end address
00001136  6D00 0016                130      BLT         SWAP_VALUES     *Start address is larger than end address
0000113A  6000 002E                131      BRA         PRE_READ_MEMORY *begin reading memory
0000113E                           132      
0000113E                           133  EQUAL_ERROR
0000113E  43F9 00003480            134      LEA         M_EQUAL,A1      *load error message
00001144  103C 000E                135      MOVE.B      #14,D0          *display string trap
00001148  4E4F                     136      TRAP        #15             *output error message
0000114A  6000 FEBE                137      BRA         INPUT_START     *restart program (request ui again)
0000114E                           138      
0000114E                           139  SWAP_VALUES
0000114E  2239 00000100            140      MOVE.L      MEM_START,D1    *put starting address in D1
00001154  2439 00000200            141      MOVE.L      MEM_END,D2      *put ending address in D2
0000115A  23C2 00000100            142      MOVE.L      D2,MEM_START    *swap the two values in memory
00001160  23C1 00000200            143      MOVE.L      D1,MEM_END
00001166  2442                     144      MOVEA.L     D2,A2           *A2 will be the starting/current address
00001168  2641                     145      MOVEA.L     D1,A3           *A3 will act as the ending address
0000116A                           146  PRE_READ_MEMORY
0000116A  2C4A                     147      MOVE.L      A2,A6           *A6 will act as the current address for Data               
0000116C                           148  READ_MEMORY_LOOP
0000116C  2679 00000200            149      MOVE.L      MEM_END,A3        *put ending address in A3
00001172  B6CA                     150      CMP         A2,A3             *compare the incrementing address and the end address
00001174  6D00 226C                151      BLT         END               *stop if the end address is reached
00001178                           152      
00001178  E05E                     153      ROR         #8,D6               *select correct byte
0000117A  BC3C 001E                154      CMP.B       #30,D6              *see if maximum lines printed
0000117E  6C00 0016                155      BGE         PRESS_TO_CONTINUE
00001182  E15E                     156      ROL         #8,D6
00001184                           157  
00001184                           158      
00001184                           159  READ_MEMORY_CONT                    *continue reading memory (if branched)  
00001184  101A                     160      MOVE.B      (A2)+,D0          *get the value from incrementing address 
00001186  E148                     161      LSL.W       #8,D0             *make room for the next byte of A2
00001188  1012                     162      MOVE.B      (A2),D0          *copy the rest of A2 to D0  
0000118A  538A                     163      SUB.L       #1, A2
0000118C  47F9 00000500            164      LEA         STRING_START,A3   *A3 will act as the string address  
00001192  6000 013A                165      BRA         VERIFY_OPCODE
00001196                           166      
00001196                           167      
00001196                           168          
00001196                           169  
00001196                           170  EFFECTIVE_ADDRESSING
00001196                           171  
00001196                           172      
00001196                           173  PRESS_TO_CONTINUE
00001196  1C3C 0000                174      MOVE.B      #00,D6              *reset counter
0000119A  E19E                     175      ROL.L       #8,D6               *put byte back in place
0000119C  43F9 000034C6            176      LEA         M_PRESS_CONT,A1     *load press key to continue messageu
000011A2  103C 000E                177      MOVE.B      #14,D0              *load into D0
000011A6  4E4F                     178      TRAP        #15                 *display message
000011A8  103C 0005                179      MOVE.B      #5,D0               *read single character from keyboard
000011AC  4E4F                     180      TRAP        #15    
000011AE  6100 00E8                181      BSR         IM_NEW_LINE            *add new line
000011B2  60D0                     182      BRA         READ_MEMORY_CONT    *continue reading loop
000011B4                           183      
000011B4                           184  INCREMENT_LINE
000011B4  E09E                     185      ROR.L       #8,D6               *select correct byte
000011B6  5206                     186      ADD.B       #1,D6               *increment counter
000011B8  E19E                     187      ROL.L       #8,D6               *put byte back in place
000011BA  4E75                     188      RTS 
000011BC                           189      
000011BC                           190  INVALID_OPCODE
000011BC  BC3C 0008                191      CMP.B       #8,D6               *check the loop increment counter
000011C0  6D00 0008                192      BLT         INVALID_OPCODE_CONT *less than long length. continue       
000011C4  6100 000A                193      BSR         PRINT_DATA          *long amount of data. print it.
000011C8  60A2                     194      BRA         READ_MEMORY_LOOP    *read the next byte
000011CA                           195  INVALID_OPCODE_CONT  
000011CA  528A                     196      ADD.L       #1,A2               *increment current address  
000011CC  5206                     197      ADD.B       #1,D6               *increment counter
000011CE  609C                     198      BRA         READ_MEMORY_LOOP    *data cap not reached. read next byte.    
000011D0                           199      
000011D0                           200  PRINT_DATA
000011D0  1C3C 0000                201      MOVE.B      #00,D6              *reset the increment counter
000011D4  6100 0012                202      BSR         PRINT_ADDRESS       *print the data address
000011D8  6100 00D8                203      BSR         TAB                 *insert a space
000011DC  6100 00E2                204      BSR         DATA                *print 'DATA'   
000011E0  61D2                     205      BSR         INCREMENT_LINE      *increment line counter (line was printed)
000011E2  6100 001E                206      BSR         PRINT_DATA_LOOP     *print the data
000011E6  4E75                     207      RTS
000011E8                           208  PRINT_ADDRESS
000011E8  280E                     209      MOVE.L      A6,D4               *put the address in D4
000011EA  4243                     210      CLR         D3                  *counter for long
000011EC  2C4A                     211      MOVE.L      A2, A6
000011EE                           212      
000011EE                           213  PRINT_ADDRESS_LOOP
000011EE  B67C 0004                214      CMP         #4,D3               *if long reached
000011F2  6C00 0082                215      BGE         RETURN_TO_SUBROUTINE *exit loop
000011F6  E19C                     216      ROL.L       #8,D4               *put ending byte at beginning
000011F8  1204                     217      MOVE.B      D4,D1               *put byte in D1 for printing
000011FA  6100 0024                218      BSR         OUTPUT_D1B          *print the first byte of D1
000011FE  5203                     219      ADD.B       #1,D3               *increment D3 (loop counter)
00001200  60EC                     220      BRA         PRINT_ADDRESS_LOOP  *repeat loop         
00001202                           221           
00001202                           222  PRINT_DATA_LOOP
00001202  121E                     223      MOVE.B      (A6)+,D1            *get the data
00001204  1401                     224      MOVE.B      D1,D2               *copy the data to D2
00001206  BDCA                     225      CMP.L       A2,A6               *if current address reached
00001208  6E00 000C                226      BGT         END_PRINT_DATA_LOOP *continue reading addresses 
0000120C                           227                                      *otherwise keep printing the data
0000120C  6100 0012                228      BSR         OUTPUT_D1B          *print byte in D1 in hex
00001210                           229      *---print a space----*
00001210  6100 0094                230      BSR         IM_SPACE               *print a space                                
00001214  60EC                     231      BRA         PRINT_DATA_LOOP     *repeat loop
00001216                           232  
00001216                           233  END_PRINT_DATA_LOOP
00001216  2C4A                     234      MOVE.L      A2,A6               *set new address for data/opcode
00001218  6100 007E                235      BSR         IM_NEW_LINE            *end line
0000121C  6196                     236      BSR         INCREMENT_LINE      *increment line printing counter
0000121E  4E75                     237      RTS                             *repeat loop   
00001220                           238   
00001220                           239  OUTPUT_D1B
00001220                           240      *print the left character
00001220  1401                     241      MOVE.B      D1,D2               *copy D1 to D2
00001222  E809                     242      LSR.B       #4,D1               *get rid of right nibble  
00001224  6100 0052                243      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
00001228  6100 0066                244      BSR         OUTPUT_CHAR         *print the char in D1
0000122C                           245      *print the right character
0000122C  E90A                     246      LSL.B       #4,D2               *get rid of left nibble
0000122E  E80A                     247      LSR.B       #4,D2               *put right nibble in place
00001230  1202                     248      MOVE.B      D2,D1               *put right nibble in D1
00001232  6100 0044                249      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
00001236  6100 0058                250      BSR         OUTPUT_CHAR         *print the char in D1
0000123A  4E75                     251      RTS
0000123C                           252  VALID_OPCODE 
0000123C  548A                     253      ADD.L       #02,A2              *increment the current address because word is valid
0000123E  BC3C 0000                254      CMP.B       #00,D6              *if leftover data not printed
00001242  6700 0004                255      BEQ         PRINT_OPCODE_EA     *print just the opcode
00001246  6188                     256      BSR         PRINT_DATA          *print unreadable data
00001248                           257                                      *and the opcode
00001248                           258  PRINT_OPCODE_EA
00001248  1C3C 0000                259      MOVE.B      #00,D6              *reset the increment counter
0000124C  619A                     260      BSR         PRINT_ADDRESS       *print the data address
0000124E  6100 0062                261      BSR         TAB                 *insert a space
00001252  6100 000E                262      BSR         PRINT_OPCODE        *print out hte opcode and eA
00001256  6100 FF5C                263      BSR         INCREMENT_LINE      *increment line counter (line was printed)
0000125A  6100 003C                264      BSR         IM_NEW_LINE
0000125E  6000 FF0C                265      BRA         READ_MEMORY_LOOP    *read next byte.
00001262                           266      
00001262                           267  
00001262                           268  PRINT_OPCODE
00001262  43F9 00000500            269      LEA         STRING_START,A1     *put the starting address of the string into A1
00001268  103C 000E                270      MOVE.B      #14,D0              *print null terminated string into A
0000126C  4E4F                     271      TRAP        #15                 *output to terminal
0000126E  47F9 00000500            272      lea         STRING_START,A3     *reset the current string pointer
00001274  4E75                     273      RTS
00001276                           274      
00001276                           275      
00001276                           276            
00001276                           277      
00001276                           278  RETURN_TO_SUBROUTINE
00001276  4E75                     279      RTS
00001278                           280    
00001278                           281  CONVERT_TO_ASCII
00001278  B23C 0009                282      CMP.B       #9,D1           *compare value with 9
0000127C  6E00 000C                283      BGT         ALPH_CHAR       *convert to numeric ascii
00001280  6000 0002                284      BRA         NUMERIC_CHAR    *convert to alphabetical ascii
00001284                           285  NUMERIC_CHAR        
00001284  0601 0030                286      ADD.B       #48,D1          *convert to ascii value
00001288  4E75                     287      RTS                         *continue converting
0000128A                           288  ALPH_CHAR
0000128A  0601 0037                289      ADD.B       #55,D1          *convert to ascii value
0000128E  4E75                     290      RTS                         *continue converting            
00001290                           291  OUTPUT_CHAR
00001290  103C 0006                292      MOVE.B      #6,D0           *output whatever's in D1
00001294  4E4F                     293      TRAP        #15
00001296  4E75                     294      RTS
00001298                           295  
00001298                           296  
00001298                           297  IM_NEW_LINE
00001298  43F9 000034E2            298      LEA         M_NEW_LINE,A1      *load new line
0000129E  103C 000E                299      MOVE.B      #14,D0          *load message
000012A2  4E4F                     300      TRAP        #15             *display message
000012A4  4E75                     301      RTS
000012A6                           302  IM_SPACE
000012A6  123C 0020                303      MOVE.B      #32,D1
000012AA  103C 0006                304      MOVE.B      #6,D0
000012AE  4E4F                     305      TRAP        #15
000012B0  4E75                     306      RTS
000012B2                           307  TAB
000012B2  43F9 000034C1            308      LEA         M_TAB,A1
000012B8  103C 000E                309      MOVE.B      #14,D0
000012BC  4E4F                     310      TRAP        #15
000012BE  4E75                     311      RTS
000012C0                           312  DATA
000012C0  43F9 000034B8            313      LEA         M_DATA,A1
000012C6  103C 000E                314      MOVE.B      #14,D0
000012CA  4E4F                     315      TRAP        #15
000012CC  4E75                     316      RTS
000012CE                           317     
000012CE                           318  
000012CE                           319  
000012CE                           320  
000012CE                           321  
000012CE                           322  
000012CE                           323  
000012CE                           324  
000012CE                           325  
000012CE                           326  
000012CE                           327  
000012CE                           328  
000012CE                           329  
000012CE                           330  
000012CE                           331  
000012CE                           332  
000012CE                           333  
000012CE                           334  
000012CE                           335  
000012CE                           336  
000012CE                           337  
000012CE                           338  
000012CE                           339  
000012CE                           340  
000012CE                           341  
000012CE                           342  
000012CE                           343  
000012CE                           344  
000012CE                           345  -------------------- end include --------------------
000012CE                           346      INCLUDE         'OP_jumpTable.X68'
000012CE                           347  VERIFY_OPCODE
000012CE  3200                     348      MOVE.W  D0,D1   *Copy instruction for modification
000012D0                           349      
000012D0                           350      **ISOLATE FIRST FOUR BITS**                                             
000012D0  E849                     351      LSR.W   #4,D1       *Shift left four bits
000012D2  E049                     352      LSR.W   #8,D1       *Shift left again (12 shifts total)
000012D4                           353      
000012D4  4242                     354      CLR     D2
000012D6  1401                     355      MOVE.B  D1,D2
000012D8                           356      
000012D8  41F9 000012E6            357      LEA     OP_JTAB,A0 
000012DE  C5FC 0006                358      MULS    #6, D2
000012E2  4EB0 2000                359      JSR     0(A0,D2)
000012E6                           360  
000012E6                           361  
000012E6                           362  
000012E6  4EF9 00001348            363  OP_JTAB    JMP     OP0000      *ADDI
000012EC  4EF9 00001358            364      JMP     OP0001      *MOVE.B
000012F2  4EF9 00001368            365      JMP     OP0010      *MOVE.W, MOVEA(WORD)
000012F8  4EF9 0000136C            366      JMP     OP0011      *MOVE.L, MOVEA(LONG) 
000012FE  4EF9 000013A4            367      JMP     OP0100      *NOP, MOVEM, LEA, CLR, JSR, RTS
00001304  4EF9 0000144C            368      JMP     OP0101      *ADDQ
0000130A  4EF9 0000145C            369      JMP     OP0110      *Bcc
00001310  4EF9 00001476            370      JMP     OP0111      *MOVEQ
00001316  4EF9 00001486            371      JMP     OP1000      *DIVU, OR
0000131C  4EF9 000014BC            372      JMP     OP1001      *SUB
00001322  4EF8 11BC                373      JMP     INVALID_OPCODE
00001326  4EF9 000014CC            374      JMP     OP1011      *CMP
0000132C  4EF9 000014DC            375      JMP     OP1100      *MULS, AND
00001332  4EF9 00001514            376      JMP     OP1101      *ADD, ADDA
00001338  4EF9 0000154C            377      JMP     OP1110      *LSR, LSL, ASR, ASL, ROL, ROR
0000133E  4EF8 11BC                378      JMP     INVALID_OPCODE
00001342                           379  
00001342                           380  
00001342                           381      
00001342  6000 FE78                382      BRA    INVALID_OPCODE     *Subroutine to store as non-decodable
00001346  4E75                     383      RTS
00001348                           384  
00001348                           385  OP0000
00001348                           386      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
00001348                           387      *BEGIN OUTPUT
00001348                           388      
00001348                           389      *MOVE.W  ADDI,(A3)+      *Load 'ADDI' to Add Reg 1 and then increment
00001348  49F9 000034E5            390      LEA     ADDI, A4
0000134E  4EB9 0000162E            391      JSR     PASTE_4
00001354  6000 04B2                392      BRA     EA_ADDI         *Branch to EA analysis of the command
00001358                           393  
00001358                           394  OP0001  *SINGLE CODE, DO NOT NEED FURTHER CHECKING 
00001358                           395          *BEGIN OUTPUT
00001358                           396      
00001358                           397      *MOVE.L  MOVE,(A3)+     *Load 'MOVE.B' to Add Reg 1 and then increment
00001358  49F9 000034EA            398      LEA     MOVE, A4
0000135E  4EB9 0000162E            399      JSR     PASTE_4
00001364  6000 02E2                400      BRA     EA_MOVE        *Branch to EA analysis of the command
00001368                           401  
00001368                           402  OP0010
00001368                           403      *Identical to OP0011 for these purposes, branch there
00001368  6000 0002                404      BRA OP0011
0000136C                           405  
0000136C                           406  OP0011
0000136C                           407      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
0000136C                           408  
0000136C                           409      **ISOLATE NEXT BITS TO CHECK**
0000136C  3200                     410      MOVE.W  D0,D1           *Copy instruction for modification
0000136E  EF49                     411      LSL.W   #7,D1           *Shift left 7 bits 
00001370  EA49                     412      LSR.W   #5,D1           *Rotate right 5 bits
00001372  E049                     413      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001374  0241 000F                414      ANDI.W  #$00F,D1        *Keep 3 bits
00001378                           415      
00001378  B27C 0001                416      CMP     #%001,D1      *Check for 0010 to eliminate CLR
0000137C  6700 0016                417      BEQ     _MOVEA          *If equal, branch to CLR
00001380                           418      
00001380  6000 0002                419      BRA     _MOVE
00001384                           420      
00001384                           421  _MOVE
00001384                           422      *MOVE.L  MOVE,(A3)+     *Load 'MOVE.L' to Add Reg 1 and then increment  
00001384  49F9 000034EA            423      LEA     MOVE, A4
0000138A  4EB9 0000162E            424      JSR     PASTE_4
00001390  6000 02B6                425      BRA     EA_MOVE        *Branch to EA analysis of the command
00001394                           426  
00001394                           427  _MOVEA
00001394                           428      *MOVE.L  MOVEA,(A3)+    *Load 'MOVEA.L' to Add Reg 1 and then increment
00001394  49F9 000034EF            429      LEA     MOVEA, A4
0000139A  4EB9 00001638            430      JSR     PASTE_5
000013A0  6000 031A                431      BRA     EA_MOVEA       *Branch to EA analysis of the command
000013A4                           432  
000013A4                           433  OP0100
000013A4                           434      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000013A4  3200                     435       MOVE.W  D0,D1           *Copy instruction for modification
000013A6                           436      
000013A6  B27C 4E71                437      CMP     #%0100111001110001,D1   *Check to eliminate NOP
000013AA  6700 0070                438      BEQ     _NOP
000013AE  B27C 4E75                439      CMP     #%0100111001110101,D1   *Check to eliminate RTS
000013B2  6700 0078                440      BEQ     _RTS
000013B6                           441      
000013B6  EC49                     442      LSR.W   #6,D1                   *Shift right 6 bits
000013B8  B27C 013A                443      CMP     #%0000000100111010,D1   *Check to eliminate RTS
000013BC  6700 004E                444      BEQ     _JSR
000013C0                           445      
000013C0                           446      **ISOLATE 4 BITS TO CHECK CLR**    
000013C0  3200                     447      MOVE.W  D0,D1           *Copy instruction for modification
000013C2  E949                     448      LSL.W   #4,D1           *Shift left 7 bits 
000013C4  E849                     449      LSR.W   #4,D1           *Rotate right 5 bits
000013C6  E049                     450      LSR.W   #8,D1           *Shift right again (13 shifts total)
000013C8  0241 000F                451      ANDI.W  #$000F,D1       *Keep 4 bits
000013CC                           452      
000013CC  B27C 0002                453      CMP     #%0010,D1       *Check for 0010 to eliminate CLR
000013D0  6700 001A                454      BEQ     _CLR            *If equal, branch to CLR
000013D4                           455  
000013D4                           456      **ISOLATE 3 BITS TO CHECK MOVEM**
000013D4  3200                     457      MOVE.W  D0,D1           *Copy instruction for modification
000013D6  ED49                     458      LSL.W   #6,D1           *Shift left 6 bits 
000013D8  EA49                     459      LSR.W   #5,D1           *Shift right 5 bits
000013DA  E049                     460      LSR.W   #8,D1           *Shift right again (13 shifts total)
000013DC  0241 000F                461      ANDI.W  #$00F,D1        *Keep 3 bits
000013E0                           462      
000013E0  B27C 0001                463      CMP     #%001,D1
000013E4  6700 0056                464      BEQ     _MOVEM
000013E8                           465      
000013E8  6000 0012                466      BRA     _LEA            *Else by process of elimination it must be LEA   
000013EC                           467      
000013EC                           468  _CLR
000013EC                           469      *MOVE.W  OPCLR,(A3)+     *Load 'CLR' to Add Reg 1 and then increment
000013EC  49F9 000034F5            470      LEA     OPCLR, A4
000013F2  4EB9 00001626            471      JSR     PASTE_3
000013F8  6000 05CE                472      BRA     EA_CLR          *Branch to EA analysis of the command
000013FC                           473  
000013FC                           474  _LEA
000013FC                           475      *MOVE.W  OPLEA,(A3)+     *Load 'LEA' to Add Reg 1 and then increment
000013FC  49F9 000034F9            476      LEA     OPLEA, A4
00001402  4EB9 00001626            477      JSR     PASTE_3
00001408  6000 0566                478      BRA     EA_LEA          *Branch to EA analysis of the command
0000140C                           479  
0000140C                           480  _JSR
0000140C                           481      *MOVE.W  OPJSR,(A3)+     *Load 'JSR' to Add Reg 1 and then increment
0000140C  49F9 000034FD            482      LEA     OPJSR, A4
00001412  4EB9 00001626            483      JSR     PASTE_3
00001418  6000 0706                484      BRA     EA_JSR          *Branch to EA analysis of the command
0000141C                           485  
0000141C                           486  _NOP
0000141C                           487      *MOVE.W  OPNOP,(A3)+     *Load 'NOP' to Add Reg 1 and then increment
0000141C  49F9 00003501            488      LEA     OPNOP, A4
00001422  4EB9 00001626            489      JSR     PASTE_3
00001428  6000 FE12                490      BRA     VALID_OPCODE          *Branch to EA analysis of the command      
0000142C                           491  
0000142C                           492  _RTS
0000142C                           493      *MOVE.W  OPRTS,(A3)+     *Load 'RTS' to Add Reg 1 and then increment
0000142C  49F9 00003505            494      LEA     OPRTS, A4
00001432  4EB9 00001626            495      JSR     PASTE_3
00001438  6000 FE02                496      BRA     VALID_OPCODE          *Branch to EA analysis of the command      
0000143C                           497  
0000143C                           498  _MOVEM
0000143C                           499      *MOVE.W  MOVEM,(A3)+     *Load 'MOVEM' to Add Reg 1 and then increment
0000143C  49F9 00003509            500      LEA     MOVEM, A4
00001442  4EB9 00001638            501      JSR     PASTE_5
00001448  6000 0714                502      BRA     EA_MOVEM        *Branch to EA analysis of the command
0000144C                           503      
0000144C                           504  OP0101
0000144C                           505      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
0000144C                           506      *BEGIN OUTPUT
0000144C                           507      
0000144C                           508      *MOVE.W  ADDQ,(A3)+      *Load 'AddQ' to Add Reg 1 and then increment
0000144C  49F9 0000350F            509      LEA     ADDQ, A4
00001452  4EB9 0000162E            510      JSR     PASTE_4
00001458  6000 0410                511      BRA     EA_ADDQ         *Branch to EA analysis of the command
0000145C                           512      
0000145C                           513  OP0110
0000145C                           514      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
0000145C                           515      *BEGIN OUTPUT
0000145C  3200                     516      MOVE.W  D0,D1
0000145E  E949                     517      LSL.W   #4,D1
00001460  E849                     518      LSR.W   #4,D1
00001462  E049                     519      LSR.W   #8,D1
00001464  B23C 0000                520      CMP.B   #0,D1
00001468  6700 FD52                521      BEQ     INVALID_OPCODE
0000146C                           522      
0000146C  16F9 00003514            523      MOVE.B  Bcc,(A3)+       *Load 'Bcc' to Add Reg 1 and then increment 
00001472  6000 0688                524      BRA     EA_BCC          *Branch to EA analysis of the command
00001476                           525  
00001476                           526  OP0111
00001476                           527      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
00001476                           528      *BEGIN OUTPUT
00001476                           529      
00001476                           530      *MOVE.W  MOVEQ,(A3)+     *Load 'MOVEQ' to Add Reg 1 and then increment
00001476  49F9 00003516            531      LEA     MOVEQ, A4
0000147C  4EB9 00001638            532      JSR     PASTE_5
00001482  6000 0290                533      BRA     EA_MOVEQ        *Branch to EA analysis of the command
00001486                           534      
00001486                           535  OP1000
00001486                           536      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
00001486                           537      
00001486                           538      **ISOLATE NEXT BITS TO CHECK**
00001486  3200                     539      MOVE.W  D0,D1           *Copy instruction for modification
00001488  EF49                     540      LSL.W   #7,D1           *Shift left 7 bits 
0000148A  EA49                     541      LSR.W   #5,D1           *Rotate right 5 bits
0000148C  E049                     542      LSR.W   #8,D1           *Shift right again (13 shifts total)
0000148E  0241 000F                543      ANDI.W  #$00F,D1        *Keep 3 bits
00001492                           544            
00001492  B27C 0003                545      CMP     #%011,D1    *Check for 011 to eliminate DIVU
00001496  6700 0006                546      BEQ     _DIVU        *If equal, branch to DIVU
0000149A  6000 0012                547      BRA     _OR          *Else must be OR, branch
0000149E                           548      
0000149E                           549  _DIVU
0000149E                           550      *MOVE.W  DIVU,(A3)+      *Load 'DIVU' to Add Reg 1 and then increment
0000149E  49F9 0000351C            551      LEA     DIVU, A4
000014A4  4EB9 0000162E            552      JSR     PASTE_4
000014AA  6000 0472                553      BRA     EA_MULS         *Branch to EA analysis of the command
000014AE                           554  
000014AE                           555  _OR
000014AE                           556      *MOVE.W  OR,(A3)+        *Load 'OR' to Add Reg 1 and then increment
000014AE  49F9 00003521            557      LEA     OR, A4
000014B4  16DC                     558      MOVE.B  (A4)+, (A3)+
000014B6  16DC                     559      MOVE.B  (A4)+, (A3)+
000014B8  6000 0294                560      BRA     EA_ADD           *Branch to EA analysis of the command
000014BC                           561  
000014BC                           562  OP1001
000014BC                           563      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014BC                           564      *BEGIN OUTPUT
000014BC                           565      
000014BC                           566      *MOVE.W  OPSUB,(A3)+     *Load 'SUB' to Add Reg 1 and then increment
000014BC  49F9 00003524            567      LEA     OPSUB, A4
000014C2  4EB9 00001626            568      JSR     PASTE_3
000014C8  6000 0284                569      BRA     EA_ADD          *Branch to EA analysis of the command
000014CC                           570  
000014CC                           571  OP1011
000014CC                           572      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014CC                           573      *BEGIN OUTPUT
000014CC                           574      *MOVE.W  CMP,(A3)+     *Load 'CMP' to Add Reg 1 and then increment
000014CC  49F9 00003528            575      LEA     CMP, A4
000014D2  4EB9 00001626            576      JSR     PASTE_3
000014D8  6000 05C8                577      BRA     EA_CMP          *Branch to EA analysis of the command
000014DC                           578  
000014DC                           579  OP1100
000014DC                           580      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000014DC                           581  
000014DC  3200                     582      MOVE.W  D0,D1           *Copy instruction for modification
000014DE  EF49                     583      LSL.W   #7,D1           *Shift left 7 bits 
000014E0  EA49                     584      LSR.W   #5,D1           *Rotate right 5 bits
000014E2  E049                     585      LSR.W   #8,D1           *Shift right again (13 shifts total)
000014E4  0241 000F                586      ANDI.W  #$00F,D1        *Keep 3 bits
000014E8                           587           
000014E8  B27C 0007                588      CMP     #%111,D1       *Check for 111 to eliminate MULS
000014EC  6700 0006                589      BEQ     _MULS           *If equal, branch to MULS
000014F0  6000 0012                590      BRA     _AND            *Else must be AND, branch
000014F4                           591      
000014F4                           592  _MULS
000014F4                           593      *MOVE.W  MULS,(A3)+      *Load 'MULS' to Add Reg 1 and then increment
000014F4  49F9 0000352C            594      LEA     MULS, A4
000014FA  4EB9 0000162E            595      JSR     PASTE_4
00001500  6000 041C                596      BRA     EA_MULS         *Branch to EA analysis of the command
00001504                           597  
00001504                           598  _AND
00001504                           599      *MOVE.W  AND,(A3)+       *Load 'AND' to Add Reg 1 and then increment
00001504  49F9 00003531            600      LEA     AND, A4
0000150A  4EB9 00001626            601      JSR     PASTE_3
00001510  6000 023C                602      BRA     EA_ADD          *Branch to EA analysis of the command
00001514                           603      
00001514                           604  OP1101
00001514                           605      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS  
00001514                           606  
00001514  3200                     607      MOVE.W  D0,D1           *Copy instruction for modification
00001516  E149                     608      LSL.W   #8,D1           *Shift left 7 bits 
00001518  EA49                     609      LSR.W   #5,D1           *Rotate left 5 bits
0000151A  E049                     610      LSR.W   #8,D1           *Shift left again (13 shifts total)
0000151C  0241 000F                611      ANDI.W  #$0F,D1         *Keep 3 bits
00001520                           612                
00001520  B27C 0003                613      CMP     #%11,D1         *Check for 011 to eliminate ADDA (Size dependant)
00001524  6700 0016                614      BEQ     _ADDA           *If equal, branch to ADDA
00001528  6000 0002                615      BRA     _ADD            *Else must be ADD, branch
0000152C                           616      
0000152C                           617  _ADD
0000152C                           618      *MOVE.W  ADD,(A3)+       *Load 'ADD' to Add Reg 1 and then increment
0000152C  49F9 00003535            619      LEA     ADD, A4
00001532  4EB9 00001626            620      JSR     PASTE_3
00001538  6000 0214                621      BRA     EA_ADD          *Branch to EA analysis of the command
0000153C                           622  
0000153C                           623  _ADDA
0000153C                           624      *MOVE.W  ADDA,(A3)+      *Load 'ADDA' to Add Reg 1 and then increment
0000153C  49F9 00003539            625      LEA     ADDA, A4
00001542  4EB9 0000162E            626      JSR     PASTE_4
00001548  6000 037A                627      BRA     EA_ADDA         *Branch to EA analysis of the command
0000154C                           628      
0000154C                           629  OP1110
0000154C                           630      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
0000154C                           631        
0000154C  3200                     632      MOVE.W  D0,D1           *Copy instruction for modification
0000154E  EF49                     633      LSL.W   #7,D1           *Shift left 7 bits 
00001550  EA49                     634      LSR.W   #5,D1           *Rotate right 5 bits
00001552  E049                     635      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001554  0241 000F                636      ANDI.W  #$00F,D1        *Keep 3 bits
00001558                           637                    
00001558  B27C 0001                638      CMP     #%001,D1        *Check for 001 to eliminate LSd instructions
0000155C  6700 001C                639      BEQ     _LSd            *If equal, branch to LSd to determine LSR or LSL
00001560                           640  
00001560                           641      **ELSE CONTINUE CHECKING**
00001560  3200                     642      MOVE.W  D0,D1           *Copy instruction for modification
00001562  E149                     643      LSL.W   #8,D1          *Shift left 7 bits
00001564  E749                     644      LSL.W   #3,D1 
00001566  EA49                     645      LSR.W   #5,D1           *Rotate left 5 bits
00001568  E049                     646      LSR.W   #8,D1           *Shift left again (13 shifts total)
0000156A  0241 000F                647      ANDI.W  #$0F,D1         *Keep 2 bits
0000156E                           648      
0000156E                           649      **BEGIN ELIMINATION 'IF/ELSE' STATEMENTS                   
0000156E  B27C 0000                650      CMP     #%00,D1         *Check for 00 to eliminate ASd
00001572  6700 003E                651      BEQ     _ASd            *If equal, branch to ASd to determine ASR or ASL
00001576  6000 0074                652      BRA     _ROd            *Else must be a ROd instruction, branch to determine
0000157A                           653      
0000157A                           654  _LSd   
0000157A                           655   
0000157A  3200                     656      MOVE.W  D0,D1           *Copy instruction for modification
0000157C  EF49                     657      LSL.W   #7,D1           *Shift left 7 bits 
0000157E  EE49                     658      LSR.W   #7,D1           *Rotate right 5 bits
00001580  E049                     659      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001582  0241 000F                660      ANDI.W  #$F,D1          *Keep 3 bits
00001586                           661  
00001586  B27C 0000                662      CMP     #%0,D1        *Check for 011 to eliminate LSR
0000158A  6700 0016                663      BEQ     _LSR            *If equal, branch to LSR
0000158E  6000 0002                664      BRA     _LSL            *Else must be LSL, branch
00001592                           665  
00001592                           666  _LSL    
00001592                           667      *MOVE.W  LSL,(A3)+       *Load 'LSL' to Add Reg 1 and then increment
00001592  49F9 0000353E            668      LEA     LSL, A4
00001598  4EB9 00001626            669      JSR     PASTE_3
0000159E  6000 046E                670      BRA     EA_LSD         *Branch to EA analysis of the command
000015A2                           671  
000015A2                           672  _LSR
000015A2                           673      *MOVE.W  LSR,(A3)+       *Load 'LSR' to Add Reg 1 and then increment
000015A2  49F9 00003542            674      LEA     LSR, A4
000015A8  4EB9 00001626            675      JSR     PASTE_3
000015AE  6000 045E                676      BRA     EA_LSD          *Branch to EA analysis of the command
000015B2                           677  
000015B2                           678  _ASd
000015B2                           679  
000015B2  3200                     680      MOVE.W  D0,D1           *Copy instruction for modification
000015B4  E149                     681      LSL.W   #8,D1           *Shift left 7 bits 
000015B6  E549                     682      LSL.W   #2,D1           *Shift left 7 bits
000015B8  EA49                     683      LSR.W   #5,D1           *Rotate right 5 bits
000015BA  E049                     684      LSR.W   #8,D1           *Shift right again (13 shifts total)
000015BC  0241 000F                685      ANDI.W  #$00F,D1        *Keep 3 bits
000015C0                           686     
000015C0  B27C 0000                687      CMP     #%000,D1        *Check for 000 to eliminate ASR
000015C4  6700 0016                688      BEQ     _ASR            *If equal, branch to ASR
000015C8  6000 0002                689      BRA     _ASL            *Else must be ASL, branch
000015CC                           690  
000015CC                           691  _ASL    
000015CC                           692      *MOVE.W  ASL,(A3)+       *Load 'ASL' to Add Reg 1 and then increment
000015CC  49F9 00003546            693      LEA     ASL, A4
000015D2  4EB9 00001626            694      JSR     PASTE_3
000015D8  6000 0434                695      BRA     EA_LSD          *Branch to EA analysis of the command
000015DC                           696  
000015DC                           697  _ASR
000015DC                           698      *MOVE.W  ASR,(A3)+       *Load 'ASR' to Add Reg 1 and then increment
000015DC  49F9 0000354A            699      LEA     ASR, A4
000015E2  4EB9 00001626            700      JSR     PASTE_3
000015E8  6000 0424                701      BRA     EA_LSD          *Branch to EA analysis of the command
000015EC                           702  
000015EC                           703  _ROd
000015EC                           704  
000015EC  3200                     705      MOVE.W  D0,D1           *Copy instruction for modification
000015EE  E549                     706      LSL.W   #2,D1           *Shift left 7 bits
000015F0  E149                     707      LSL.W   #8,D1           *Shift left 7 bits 
000015F2  EA49                     708      LSR.W   #5,D1           *Rotate right 5 bits
000015F4  E049                     709      LSR.W   #8,D1           *Shift right again (13 shifts total)
000015F6  0241 000F                710      ANDI.W  #$00F,D1        *Keep 3 bits
000015FA                           711  
000015FA                           712      **BEGIN ELIMINATION 'IF/ELSE' STATEMENTS   
000015FA  B27C 0003                713      CMP     #%011,D1        *Check for 011 to eliminate ROR
000015FE  6700 0016                714      BEQ     _ROR            *If equal, branch to ROR
00001602  6000 0002                715      BRA     _ROL            *Else must be ROL, branch
00001606                           716      
00001606                           717  _ROL    
00001606                           718      *MOVE.W  ROL,(A3)+       *Load 'ROL' to Add Reg 1 and then increment
00001606  49F9 0000354E            719      LEA     ROL, A4
0000160C  4EB9 00001626            720      JSR     PASTE_3
00001612  6000 03FA                721      BRA     EA_LSD          *Branch to EA analysis of the command
00001616                           722  
00001616                           723  _ROR
00001616                           724      *MOVE.W  ROR,(A3)+       *Load 'ROR' to Add Reg 1 and then increment
00001616  49F9 00003552            725      LEA     ROR, A4
0000161C  4EB9 00001626            726      JSR     PASTE_3
00001622  6000 03EA                727      BRA     EA_LSD          *Branch to EA analysis of the command
00001626                           728      
00001626                           729  PASTE_3
00001626  16DC                     730      MOVE.B  (A4)+, (A3)+
00001628  16DC                     731      MOVE.B  (A4)+, (A3)+
0000162A  16DC                     732      MOVE.B  (A4)+, (A3)+
0000162C  4E75                     733      RTS
0000162E                           734  
0000162E                           735  PASTE_4
0000162E  16DC                     736      MOVE.B  (A4)+, (A3)+
00001630  16DC                     737      MOVE.B  (A4)+, (A3)+
00001632  16DC                     738      MOVE.B  (A4)+, (A3)+
00001634  16DC                     739      MOVE.B  (A4)+, (A3)+
00001636  4E75                     740      RTS
00001638                           741  
00001638                           742  PASTE_5
00001638  16DC                     743      MOVE.B  (A4)+, (A3)+
0000163A  16DC                     744      MOVE.B  (A4)+, (A3)+
0000163C  16DC                     745      MOVE.B  (A4)+, (A3)+
0000163E  16DC                     746      MOVE.B  (A4)+, (A3)+
00001640  16DC                     747      MOVE.B  (A4)+, (A3)+
00001642  4E75                     748      RTS
00001644                           749  
00001644  FFFF FFFF                750      SIMHALT
00001648                           751  
00001648                           752  
00001648                           753  
00001648                           754  
00001648                           755  
00001648                           756  -------------------- end include --------------------
00001648                           757      INCLUDE         'EFFECTIVE_ADDRESSES.X68'
00001648                           758  
00001648                           759      *EXAMPLE, MOVE A HEX CODE INTO D6
00001648                           760      *CALL THE CORRESPONDING EA CODE
00001648                           761      *MOVE.W     #$2E7C, D6
00001648                           762      *BRA         EA_MOVE
00001648                           763      *END EXAMPLE
00001648                           764      
00001648                           765  EA_MOVE      *1 invalid; done
00001648  3E00                     766      MOVE.W      D0, D7 *DO THIS AT THE BEGGINING OF EVERY EA 
0000164A                           767      
0000164A  3807                     768      MOVE.W      D7, D4      *
0000164C  E04C                     769      LSR.W       #8, D4      *
0000164E  E84C                     770      LSR.W       #4, D4      *D4 = SIZE
00001650  4EB9 00001DAA            771      JSR GET_SIZE
00001656                           772      
00001656  3807                     773      MOVE.W      D7, D4      *
00001658  E14C                     774      LSL.W       #8, D4      *
0000165A  E54C                     775      LSL.W       #2, D4
0000165C  E04C                     776      LSR.W       #8, D4      *
0000165E  EA4C                     777      LSR.W       #5, D4      *D4 = <0000 0000> D4 = SOURCE MODE
00001660                           778      
00001660  3A07                     779      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001662  E14D                     780      LSL.W       #8, D5  
00001664  EB4D                     781      LSL.W       #5, D5      *
00001666  E04D                     782      LSR.W       #8, D5
00001668  EA4D                     783      LSR.W       #5, D5      *D5 = SOURCE REGISTER
0000166A                           784      
0000166A  4EB9 00001EA0            785      JSR         MODE_CHOOSER
00001670  41F9 00001CDE            786      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001676  C9FC 0006                787      MULS        #6, D4          *GET JUMP
0000167A  4EB0 4000                788      JSR         0(A0, D4)       *JUMP
0000167E  4EB9 00001F1C            789      JSR COMMA
00001684  4EB9 00001F7E            790      JSR SPACE
0000168A  3807                     791      MOVE.W      D7, D4      *
0000168C  EF4C                     792      LSL.W       #7, D4      *
0000168E  EE4C                     793      LSR.W       #7, D4      *
00001690  EC4C                     794      LSR.W       #6, D4      *D4 = DESTINATION MODE
00001692  4EB9 00001C54            795      JSR         MOVE_ERROR_CHECK 
00001698                           796      
00001698  3A07                     797      MOVE.W      D7, D5      *
0000169A  E94D                     798      LSL.W       #4, D5      *
0000169C  E04D                     799      LSR.W       #8, D5      *
0000169E  EA4D                     800      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
000016A0                           801      
000016A0  4EB9 00001EA0            802      JSR         MODE_CHOOSER
000016A6  41F9 00001CDE            803      LEA         MODE_JUMP, A0   *LOAD MODE JUMP
000016AC  C9FC 0006                804      MULS        #6, D4          *GET JUMP
000016B0  4EB0 4000                805      JSR         0(A0, D4)       *JUMP
000016B4  16BC 0000                806      MOVE.B      #00, (A3) 
000016B8  6000 FB82                807      BRA         VALID_OPCODE
000016BC                           808  EA_MOVEA        *0 invalid
000016BC  3E00                     809      MOVE.W      D0, D7
000016BE                           810  
000016BE  3807                     811      MOVE.W      D7, D4      *GETTING SIZE
000016C0  E04C                     812      LSR.W       #8, D4      *
000016C2  E84C                     813      LSR.W       #4, D4      *SHIFT 12 BITS RIGHT
000016C4  4EB9 00001DAA            814      JSR         GET_SIZE    *D4 = SIZE
000016CA                           815      
000016CA  3807                     816      MOVE.W      D7, D4      *GETTING SOURCE MODE
000016CC  E14C                     817      LSL.W       #8, D4      *
000016CE  E54C                     818      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
000016D0  E04C                     819      LSR.W       #8, D4      *
000016D2  EA4C                     820      LSR.W       #5, D4      *D4 = SOURCE MODE
000016D4                           821  
000016D4  3A07                     822      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
000016D6  E14D                     823      LSL.W       #8, D5      *
000016D8  EB4D                     824      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
000016DA  E04D                     825      LSR.W       #8, D5      *
000016DC  EA4D                     826      LSR.W       #5, D5      *D5 = SOURCE REGISTER
000016DE                           827      
000016DE  4EB9 00001EA0            828      JSR         MODE_CHOOSER  *INCASE MODE IS $111
000016E4  41F9 00001CDE            829      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
000016EA  C9FC 0006                830      MULS        #6, D4        *GET JUMP
000016EE  4EB0 4000                831      JSR         0(A0, D4)     *JUMP
000016F2  4EB9 00001F1C            832      JSR         COMMA
000016F8  4EB9 00001F7E            833      JSR         SPACE
000016FE  3A07                     834      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
00001700  E94D                     835      LSL.W       #4, D5      *
00001702  E04D                     836      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
00001704  EA4D                     837      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
00001706                           838      
00001706  4EB9 00001D1C            839      JSR         ADDR_1
0000170C  16BC 0000                840      MOVE.B      #00, (A3)
00001710  6000 FB2A                841      BRA         VALID_OPCODE
00001714                           842  EA_MOVEQ        *0 invalid
00001714  3E00                     843      MOVE.W      D0, D7
00001716                           844  
00001716  4EB9 00001F7E            845      JSR SPACE
0000171C  4EB9 00001F24            846      JSR POUND
00001722  4EB9 00001F86            847      JSR CASH
00001728  6100 07A4                848      BSR OUTPUT_HEX    
0000172C  4EB9 00001F1C            849      JSR COMMA
00001732  4EB9 00001F7E            850      JSR SPACE
00001738  3A07                     851      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
0000173A  E94D                     852      LSL.W       #4, D5      *
0000173C  E04D                     853      LSR.W       #8, D5      *
0000173E  EA4D                     854      LSR.W       #5, D5      * D5 = DESTINATION REGISTER
00001740                           855      
00001740  4EB9 00001D0E            856      JSR         DATA_0
00001746  16BC 0000                857      MOVE.B      #00, (A3)
0000174A  6000 FAF0                858      BRA         VALID_OPCODE
0000174E                           859  EA_ADD          *3 invalid; done
0000174E                           860  
0000174E  3E00                     861      MOVE.W      D0, D7
00001750                           862  
00001750  3807                     863      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
00001752  EF4C                     864      LSL.W       #7, D4      * 
00001754  EE4C                     865      LSR.W       #7, D4      *
00001756  EC4C                     866      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
00001758  4EB9 00001DEC            867      JSR         GET_OPMODE_MATH *PRINTS THE SIZE
0000175E                           868  
0000175E  B83C 0003                869      CMP.B       #3, D4
00001762  6D00 000A                870      BLT         DN_VERSION
00001766  B83C 0003                871      CMP.B       #3, D4
0000176A  6E00 004C                872      BGT         EA_VERSION
0000176E                           873  DN_VERSION *EA IS SOURCE, REGISTER IS DESTINATION <EA> + DN -> DN
0000176E  3807                     874      MOVE.W      D7, D4      
00001770  E14C                     875      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001772  E54C                     876      LSL.W       #2, D4
00001774  E04C                     877      LSR.W       #8, D4      *
00001776  EA4C                     878      LSR.W       #5, D4      *D4 = EA MODE
00001778                           879      
00001778  3A07                     880      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
0000177A  E14D                     881      LSL.W       #8, D5  
0000177C  EB4D                     882      LSL.W       #5, D5      *
0000177E  E04D                     883      LSR.W       #8, D5
00001780  EA4D                     884      LSR.W       #5, D5      * D5 = EA REGISTER
00001782                           885      
00001782  4EB9 00001EA0            886      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001788  41F9 00001CDE            887      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
0000178E  C9FC 0006                888      MULS        #6, D4          *GET JUMP
00001792  4EB0 4000                889      JSR         0(A0, D4)       *JUMP
00001796                           890          
00001796  4EB9 00001F1C            891      JSR         COMMA
0000179C  4EB9 00001F7E            892      JSR         SPACE
000017A2                           893      
000017A2  3A07                     894      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
000017A4  E94D                     895      LSL.W       #4, D5      *
000017A6  E04D                     896      LSR.W       #8, D5      *
000017A8  EA4D                     897      LSR.W       #5, D5      *D5 DESTINATION REGISTER
000017AA                           898      
000017AA  4EB9 00001D0E            899      JSR         DATA_0
000017B0  16BC 0000                900      MOVE.B      #00, (A3)
000017B4  6000 FA86                901      BRA         VALID_OPCODE
000017B8                           902  EA_VERSION
000017B8  3A07                     903      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
000017BA  E94D                     904      LSL.W       #4, D5      *
000017BC  E04D                     905      LSR.W       #8, D5      *
000017BE  EA4D                     906      LSR.W       #5, D5      *D5 DESTINATION REGISTER
000017C0  4EB9 00001D0E            907      JSR         DATA_0
000017C6                           908      
000017C6  4EB9 00001F1C            909      JSR         COMMA
000017CC  4EB9 00001F7E            910      JSR         SPACE
000017D2                           911      
000017D2  3807                     912      MOVE.W      D7, D4      
000017D4  E14C                     913      LSL.W       #8, D4      *LEFT 10; RIGHT 13
000017D6  E54C                     914      LSL.W       #2, D4
000017D8  E04C                     915      LSR.W       #8, D4      *
000017DA  EA4C                     916      LSR.W       #5, D4      *D4 = EA MODE
000017DC                           917      
000017DC  3A07                     918      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000017DE  E14D                     919      LSL.W       #8, D5  
000017E0  EB4D                     920      LSL.W       #5, D5      *
000017E2  E04D                     921      LSR.W       #8, D5
000017E4  EA4D                     922      LSR.W       #5, D5      * D5 = EA REGISTER
000017E6                           923      
000017E6                           924      *the only way there could be an error is if 
000017E6                           925      *we are in THIS addressing mo
000017E6                           926      
000017E6  4EB9 00001EA0            927      JSR         MODE_CHOOSER    *IF A WORD OR LONG 
000017EC  4EB9 00001C5E            928      JSR         ADD_ERROR_CHECK
000017F2  41F9 00001CDE            929      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000017F8  C9FC 0006                930      MULS        #6, D4          *GET JUMP
000017FC  4EB0 4000                931      JSR         0(A0, D4)       *JUMP
00001800                           932      
00001800  16BC 0000                933      MOVE.B      #00, (A3)
00001804  6000 FA36                934      BRA         VALID_OPCODE
00001808                           935  EA_ADDI  *2 invalid; DONE
00001808  3E00                     936      MOVE.W      D0, D7
0000180A                           937      
0000180A  3807                     938      MOVE.W      D7, D4      *
0000180C  E14C                     939      LSL.W       #8, D4      *
0000180E  E04C                     940      LSR.W       #8, D4      *
00001810  EC4C                     941      LSR.W       #6, D4      *D4 = SIZE
00001812  4EB9 00001E3E            942      JSR         GET_SIZE_ADDI
00001818  4EB9 00001F24            943      JSR         POUND
0000181E  4EB9 00001F86            944      JSR         CASH
00001824  6100 06A8                945      BSR         OUTPUT_HEX
00001828  4EB9 00001F1C            946      JSR         COMMA
0000182E  4EB9 00001F7E            947      JSR         SPACE
00001834  3807                     948      MOVE.W      D7, D4      
00001836  E14C                     949      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001838  E54C                     950      LSL.W       #2, D4
0000183A  E04C                     951      LSR.W       #8, D4      *
0000183C  EA4C                     952      LSR.W       #5, D4      *D4 = EA MODE
0000183E                           953      
0000183E  3A07                     954      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001840  E14D                     955      LSL.W       #8, D5  
00001842  EB4D                     956      LSL.W       #5, D5      *
00001844  E04D                     957      LSR.W       #8, D5
00001846  EA4D                     958      LSR.W       #5, D5      * D5 = EA REGISTER
00001848                           959      
00001848  4EB9 00001EA0            960      JSR         MODE_CHOOSER    *IF A WORD OR LONG  
0000184E  4EB9 00001C78            961      JSR         ADDI_ERROR_CHECK
00001854  41F9 00001CDE            962      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
0000185A  C9FC 0006                963      MULS        #6, D4          *GET JUMP
0000185E  4EB0 4000                964      JSR         0(A0, D4)       *JUMP'
00001862                           965      
00001862  16BC 0000                966      MOVE.B      #00, (A3)
00001866  6000 F9D4                967      BRA         VALID_OPCODE
0000186A                           968  EA_ADDQ     *0 INVALID
0000186A  3E00                     969      MOVE.W      D0, D7
0000186C                           970      
0000186C  3807                     971      MOVE.W      D7, D4
0000186E  E14C                     972      LSL.W       #8, D4
00001870  E04C                     973      LSR.W       #8, D4
00001872  EC4C                     974      LSR.W       #6, D4
00001874  4EB9 00001E3E            975      JSR         GET_SIZE_ADDI    *PRINT SIZE
0000187A                           976      
0000187A  3A07                     977      MOVE.W      D7, D5      *GETTING DATA
0000187C  E94D                     978      LSL.W       #4, D5      *SHIFT LEFT 4; RIGHT 13
0000187E  E04D                     979      LSR.W       #8, D5      *
00001880  EA4D                     980      LSR.W       #5, D5      *D5 = DATA
00001882  4EB9 00001E24            981      JSR         GET_DATA
00001888  4EB9 00001F1C            982      JSR COMMA
0000188E  4EB9 00001F7E            983      JSR SPACE
00001894  3807                     984      MOVE.W      D7, D4      *GETTING EA MODE
00001896  E14C                     985      LSL.W       #8, D4      *
00001898  E54C                     986      LSL.W       #2, D4      *SHIFT 10 LEFT; 13 RIGHT
0000189A  E04C                     987      LSR.W       #8, D4      *
0000189C  EA4C                     988      LSR.W       #5, D4      *D4 = EA MODE
0000189E                           989      
0000189E  3A07                     990      MOVE.W      D7, D5      *GETTING EA REGISTER
000018A0  E14D                     991      LSL.W       #8, D5      *
000018A2  EB4D                     992      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
000018A4  E04D                     993      LSR.W       #8, D5      *
000018A6  EA4D                     994      LSR.W       #5, D5      *D5 = EA REGISTER
000018A8                           995      
000018A8  4EB9 00001EA0            996      JSR         MODE_CHOOSER
000018AE  41F9 00001CDE            997      LEA         MODE_JUMP, A0   *LOAD MODE JUMP
000018B4  C9FC 0006                998      MULS        #6, D4          *GET JUMP
000018B8  4EB0 4000                999      JSR         0(A0, D4)       *JUMP
000018BC                          1000      
000018BC  16BC 0000               1001      MOVE.B      #00, (A3)
000018C0                          1002      
000018C0  6000 F97A               1003      BRA         VALID_OPCODE
000018C4                          1004  EA_ADDA         *0 INVALID
000018C4  3E00                    1005      MOVE.W      D0, D7
000018C6                          1006      
000018C6  3807                    1007      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
000018C8  EF4C                    1008      LSL.W       #7, D4      * 
000018CA  EE4C                    1009      LSR.W       #7, D4      *
000018CC  EC4C                    1010      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
000018CE  4EB9 00001DD4           1011      JSR         GET_OPMODE
000018D4                          1012      
000018D4  3807                    1013      MOVE.W      D7, D4      *GETTING SOURCE MODE
000018D6  E14C                    1014      LSL.W       #8, D4      *
000018D8  E54C                    1015      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
000018DA  E04C                    1016      LSR.W       #8, D4      *
000018DC  EA4C                    1017      LSR.W       #5, D4      *D4 = SOURCE MODE
000018DE                          1018      
000018DE  3A07                    1019      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
000018E0  E14D                    1020      LSL.W       #8, D5      *
000018E2  EB4D                    1021      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
000018E4  E04D                    1022      LSR.W       #8, D5      *
000018E6  EA4D                    1023      LSR.W       #5, D5      *D5 = SOURCE REGISTER
000018E8                          1024      
000018E8  4EB9 00001EA0           1025      JSR         MODE_CHOOSER  *INCASE MODE IS $111
000018EE  41F9 00001CDE           1026      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
000018F4  C9FC 0006               1027      MULS        #6, D4        *GET JUMP
000018F8  4EB0 4000               1028      JSR         0(A0, D4)     *JUMP
000018FC  4EB9 00001F1C           1029      JSR COMMA 
00001902  4EB9 00001F7E           1030      JSR SPACE
00001908  3A07                    1031      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
0000190A  E94D                    1032      LSL.W       #4, D5      *
0000190C  E04D                    1033      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
0000190E  EA4D                    1034      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
00001910                          1035      
00001910  4EB9 00001D1C           1036      JSR         ADDR_1
00001916  16BC 0000               1037      MOVE.B      #00, (A3)
0000191A                          1038      
0000191A  6000 F920               1039      BRA         VALID_OPCODE
0000191E                          1040  EA_MULS                *1 INVALID;
0000191E                          1041  
0000191E  3E00                    1042      MOVE.W      D0, D7
00001920                          1043      
00001920  4EB9 00001F7E           1044      JSR         SPACE
00001926  3807                    1045      MOVE.W      D7, D4      
00001928  E14C                    1046      LSL.W       #8, D4      *LEFT 10; RIGHT 13
0000192A  E54C                    1047      LSL.W       #2, D4
0000192C  E04C                    1048      LSR.W       #8, D4      *
0000192E  EA4C                    1049      LSR.W       #5, D4      *D4 = EA MODE
00001930                          1050      
00001930  3A07                    1051      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001932  E14D                    1052      LSL.W       #8, D5  
00001934  EB4D                    1053      LSL.W       #5, D5      *
00001936  E04D                    1054      LSR.W       #8, D5
00001938  EA4D                    1055      LSR.W       #5, D5      * D5 = EA REGISTER
0000193A                          1056      
0000193A  4EB9 00001EA0           1057      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001940  41F9 00001CDE           1058      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001946  C9FC 0006               1059      MULS        #6, D4          *GET JUMP
0000194A  4EB0 4000               1060      JSR         0(A0, D4)       *JUMP
0000194E  4EB9 00001F1C           1061      JSR         COMMA
00001954  4EB9 00001F7E           1062      JSR         SPACE
0000195A  3A07                    1063      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
0000195C  E94D                    1064      LSL.W       #4, D5      *
0000195E  E04D                    1065      LSR.W       #8, D5      *
00001960  EA4D                    1066      LSR.W       #5, D5      *D5 DESTINATION REGISTER
00001962                          1067      
00001962  4EB9 00001D0E           1068      JSR         DATA_0
00001968  16BC 0000               1069      MOVE.B      #00, (A3)
0000196C                          1070      
0000196C  6000 F8CE               1071      BRA         VALID_OPCODE
00001970                          1072  EA_LEA          *5 INVALIDS; DONE
00001970  3E00                    1073      MOVE.W      D0, D7
00001972                          1074      
00001972  4EB9 00001F7E           1075      JSR         SPACE
00001978  3807                    1076      MOVE.W      D7, D4      *GETTING SOURCE MODE
0000197A  E14C                    1077      LSL.W       #8, D4      *
0000197C  E54C                    1078      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
0000197E  E04C                    1079      LSR.W       #8, D4      *
00001980  EA4C                    1080      LSR.W       #5, D4      *D4 = SOURCE MODE
00001982                          1081      
00001982  3A07                    1082      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
00001984  E14D                    1083      LSL.W       #8, D5      *
00001986  EB4D                    1084      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001988  E04D                    1085      LSR.W       #8, D5      *
0000198A  EA4D                    1086      LSR.W       #5, D5      *D5 = SOURCE REGISTER
0000198C                          1087      
0000198C  4EB9 00001EA0           1088      JSR         MODE_CHOOSER  *INCASE MODE IS $111
00001992  4EB9 00001C8A           1089      JSR         LEA_ERROR_CHECK
00001998  41F9 00001CDE           1090      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
0000199E  C9FC 0006               1091      MULS        #6, D4        *GET JUMP
000019A2  4EB0 4000               1092      JSR         0(A0, D4)     *JUMP
000019A6  4EB9 00001F1C           1093      JSR COMMA
000019AC  4EB9 00001F7E           1094      JSR SPACE
000019B2  3A07                    1095      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
000019B4  E94D                    1096      LSL.W       #4, D5      *
000019B6  E04D                    1097      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
000019B8  EA4D                    1098      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
000019BA                          1099      
000019BA  4EB9 00001D1C           1100      JSR         ADDR_1
000019C0  16BC 0000               1101      MOVE.B      #00, (A3)
000019C4                          1102      
000019C4  6000 F876               1103      BRA         VALID_OPCODE
000019C8                          1104  EA_CLR          *2 INVALID; DONE
000019C8  3E00                    1105      MOVE.W      D0, D7
000019CA                          1106      
000019CA  3807                    1107      MOVE.W      D7, D4
000019CC  E14C                    1108      LSL.W       #8, D4      *
000019CE  E04C                    1109      LSR.W       #8, D4      *
000019D0  EC4C                    1110      LSR.W       #6, D4      *D4 = SIZE
000019D2  4EB9 00001E3E           1111      JSR         GET_SIZE_ADDI
000019D8  3807                    1112      MOVE.W      D7, D4      
000019DA  E14C                    1113      LSL.W       #8, D4      *LEFT 10; RIGHT 13
000019DC  E54C                    1114      LSL.W       #2, D4
000019DE  E04C                    1115      LSR.W       #8, D4      *
000019E0  EA4C                    1116      LSR.W       #5, D4      *D4 = EA MODE
000019E2                          1117      
000019E2  3A07                    1118      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000019E4  E14D                    1119      LSL.W       #8, D5  
000019E6  EB4D                    1120      LSL.W       #5, D5      *
000019E8  E04D                    1121      LSR.W       #8, D5
000019EA  EA4D                    1122      LSR.W       #5, D5      * D5 = EA REGISTER
000019EC                          1123      
000019EC  4EB9 00001EA0           1124      JSR         MODE_CHOOSER    *IF A WORD OR LONG  
000019F2  4EB9 00001C78           1125      JSR         ADDI_ERROR_CHECK  
000019F8  41F9 00001CDE           1126      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000019FE  C9FC 0006               1127      MULS        #6, D4          *GET JUMP
00001A02  4EB0 4000               1128      JSR         0(A0, D4)       *JUMP
00001A06                          1129      
00001A06  16BC 0000               1130      MOVE.B      #00, (A3)
00001A0A                          1131      
00001A0A  6000 F830               1132      BRA         VALID_OPCODE
00001A0E                          1133  EA_LSD          *3 INVALID; DONE
00001A0E  3E00                    1134      MOVE.W      D0, D7
00001A10                          1135      
00001A10  3807                    1136      MOVE.W      D7, D4
00001A12  E14C                    1137      LSL.W       #8, D4
00001A14  E04C                    1138      LSR.W       #8, D4
00001A16  EC4C                    1139      LSR.W       #6, D4      *ISOLATE SIZE
00001A18  4EB9 00001E3E           1140      JSR         GET_SIZE_ADDI  *PRINT SIZE
00001A1E  B83C 0003               1141      CMP.B       #3, D4      *EA SHIFT
00001A22  6700 003E               1142      BEQ         EA_SHIFT    *BRANCH TO EA SHIFT
00001A26  3807                    1143      MOVE.W      D7, D4
00001A28  E14C                    1144      LSL.W       #8, D4
00001A2A  E54C                    1145      LSL.W       #2, D4
00001A2C  E04C                    1146      LSR.W       #8, D4
00001A2E  EE4C                    1147      LSR.W       #7, D4      *D4 = TYPE
00001A30                          1148      
00001A30  3A07                    1149      MOVE.W      D7, D5      *GETTING DATA
00001A32  E94D                    1150      LSL.W       #4, D5      *SHIFT LEFT 4; RIGHT 13
00001A34  E04D                    1151      LSR.W       #8, D5      *
00001A36  EA4D                    1152      LSR.W       #5, D5      *D5 = DATA / REGISTER
00001A38                          1153      
00001A38  4EB9 00001E5E           1154      JSR         TYPE_CHOOSER
00001A3E  4EB9 00001F1C           1155      JSR         COMMA
00001A44  4EB9 00001F7E           1156      JSR         SPACE
00001A4A  3A07                    1157      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001A4C  E14D                    1158      LSL.W       #8, D5  
00001A4E  EB4D                    1159      LSL.W       #5, D5      *
00001A50  E04D                    1160      LSR.W       #8, D5
00001A52  EA4D                    1161      LSR.W       #5, D5      * D5 = EA REGISTER
00001A54  4EB9 00001D0E           1162      JSR         DATA_0
00001A5A                          1163      
00001A5A  16BC 0000               1164      MOVE.B      #00, (A3)
00001A5E                          1165      
00001A5E  6000 F7DC               1166      BRA         VALID_OPCODE
00001A62                          1167  EA_SHIFT
00001A62  4EB9 00001F7E           1168      JSR         SPACE
00001A68  3807                    1169      MOVE.W      D7, D4      *
00001A6A  E14C                    1170      LSL.W       #8, D4      *
00001A6C  E54C                    1171      LSL.W       #2, D4
00001A6E  E04C                    1172      LSR.W       #8, D4      *
00001A70  EA4C                    1173      LSR.W       #5, D4      *D4 = EA MODE
00001A72                          1174      
00001A72  3A07                    1175      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001A74  E14D                    1176      LSL.W       #8, D5  
00001A76  EB4D                    1177      LSL.W       #5, D5      *
00001A78  E04D                    1178      LSR.W       #8, D5
00001A7A  EA4D                    1179      LSR.W       #5, D5      * D5 = EA REGISTER
00001A7C                          1180      
00001A7C  4EB9 00001EA0           1181      JSR         MODE_CHOOSER    *IF A WORD OR LONG   
00001A82  4EB9 00001C5E           1182      JSR         ADD_ERROR_CHECK 
00001A88  41F9 00001CDE           1183      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001A8E  C9FC 0006               1184      MULS        #6, D4          *GET JUMP
00001A92  4EB0 4000               1185      JSR         0(A0, D4)       *JUMP
00001A96  6000 0002               1186      BRA         DONE
00001A9A                          1187  DONE
00001A9A  16BC 0000               1188      MOVE.B      #00, (A3)
00001A9E                          1189      
00001A9E  6000 F79C               1190      BRA         VALID_OPCODE
00001AA2                          1191  
00001AA2                          1192  EA_CMP          *0 INVALID
00001AA2  3E00                    1193      MOVE.W      D0, D7
00001AA4                          1194      
00001AA4  3807                    1195      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
00001AA6  EF4C                    1196      LSL.W       #7, D4      * 
00001AA8  EE4C                    1197      LSR.W       #7, D4      *
00001AAA  EC4C                    1198      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
00001AAC  4EB9 00001E3E           1199      JSR         GET_SIZE_ADDI
00001AB2  3807                    1200      MOVE.W      D7, D4      
00001AB4  E14C                    1201      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001AB6  E54C                    1202      LSL.W       #2, D4
00001AB8  E04C                    1203      LSR.W       #8, D4      *
00001ABA  EA4C                    1204      LSR.W       #5, D4      *D4 = EA MODE
00001ABC                          1205      
00001ABC  3A07                    1206      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001ABE  E14D                    1207      LSL.W       #8, D5  
00001AC0  EB4D                    1208      LSL.W       #5, D5      *
00001AC2  E04D                    1209      LSR.W       #8, D5
00001AC4  EA4D                    1210      LSR.W       #5, D5      * D5 = EA REGISTER
00001AC6                          1211      
00001AC6  4EB9 00001EA0           1212      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001ACC  41F9 00001CDE           1213      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001AD2  C9FC 0006               1214      MULS        #6, D4          *GET JUMP
00001AD6  4EB0 4000               1215      JSR         0(A0, D4)       *JUMP
00001ADA  4EB9 00001F1C           1216      JSR         COMMA
00001AE0  4EB9 00001F7E           1217      JSR         SPACE
00001AE6  3A07                    1218      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
00001AE8  E94D                    1219      LSL.W       #4, D5      *
00001AEA  E04D                    1220      LSR.W       #8, D5      *
00001AEC  EA4D                    1221      LSR.W       #5, D5      *D5 DESTINATION REGISTER
00001AEE                          1222      
00001AEE  4EB9 00001D0E           1223      JSR         DATA_0
00001AF4  16BC 0000               1224      MOVE.B      #00, (A3)
00001AF8                          1225      
00001AF8  6000 F742               1226      BRA         VALID_OPCODE
00001AFC                          1227  EA_BCC          *0 INVALID (I THINK)
00001AFC  3E00                    1228      MOVE.W      D0, D7
00001AFE                          1229      
00001AFE  3807                    1230      MOVE.W      D7, D4
00001B00  E94C                    1231      LSL.W       #4, D4
00001B02  E04C                    1232      LSR.W       #8, D4
00001B04  E84C                    1233      LSR.W       #4, D4   *D4 = BINARY CONDITION CODE
00001B06  4EB9 00001E6E           1234      JSR         PRINT_BCC
00001B0C  4EB9 00001F7E           1235      JSR         SPACE
00001B12  4EB9 00001ECE           1236      JSR         OUTPUT_HEX
00001B18  16BC 0000               1237      MOVE.B      #00, (A3)
00001B1C                          1238      
00001B1C  6000 F71E               1239      BRA         VALID_OPCODE
00001B20                          1240  EA_JSR   *5 INVALID; DONE
00001B20                          1241  
00001B20  3E00                    1242      MOVE.W      D0, D7
00001B22                          1243      
00001B22  4EB9 00001F7E           1244      JSR         SPACE
00001B28  3807                    1245      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001B2A  E14C                    1246      LSL.W       #8, D4      *
00001B2C  E54C                    1247      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
00001B2E  E04C                    1248      LSR.W       #8, D4      *
00001B30  EA4C                    1249      LSR.W       #5, D4      *D4 = SOURCE MODE
00001B32                          1250      
00001B32  3A07                    1251      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
00001B34  E14D                    1252      LSL.W       #8, D5      *
00001B36  EB4D                    1253      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001B38  E04D                    1254      LSR.W       #8, D5      *
00001B3A  EA4D                    1255      LSR.W       #5, D5      *D5 = SOURCE REGISTER
00001B3C                          1256      
00001B3C  4EB9 00001EA0           1257      JSR         MODE_CHOOSER  *INCASE MODE IS $111
00001B42  4EB9 00001C8A           1258      JSR         LEA_ERROR_CHECK
00001B48  41F9 00001CDE           1259      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001B4E  C9FC 0006               1260      MULS        #6, D4        *GET JUMP
00001B52  4EB0 4000               1261      JSR         0(A0, D4)     *JUM
00001B56                          1262      
00001B56  16BC 0000               1263      MOVE.B      #00, (A3)
00001B5A                          1264      
00001B5A  6000 F6E0               1265      BRA         VALID_OPCODE
00001B5E                          1266  EA_MOVEM
00001B5E                          1267  
00001B5E  3C00                    1268      MOVE.W      D0, D6
00001B60  3806                    1269      MOVE.W      D6, D4
00001B62  EB4C                    1270      LSL.W       #5, D4
00001B64  E94C                    1271      LSL.W       #4, D4
00001B66  E04C                    1272      LSR.W       #8, D4
00001B68  EE4C                    1273      LSR.W       #7, D4
00001B6A  4EB9 00001E88           1274      JSR         REG_SIZE
00001B70  3E06                    1275      MOVE.W      D6, D7
00001B72  EB4F                    1276      LSL.W       #5, D7
00001B74  E04F                    1277      LSR.W       #8, D7
00001B76  EE4F                    1278      LSR.W       #7, D7
00001B78  BE3C 0000               1279      CMP.B       #0, D7
00001B7C  6700 003E               1280      BEQ         PRINT_LIST
00001B80  BE7C 0000               1281  EAP CMP.W       #0, D7      *IF ITS A ZERO, THAT MEANS WE JUST JUMPED HERE 
00001B84  6700 00A2               1282      BEQ         COMMA_SPACE *FROM CHECK TYPE, ELSE MEANS ITS UNALTERED
00001B88  3806                    1283  EAS MOVE.W      D6, D4      
00001B8A  E14C                    1284      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001B8C  E54C                    1285      LSL.W       #2, D4
00001B8E  E04C                    1286      LSR.W       #8, D4      *
00001B90  EA4C                    1287      LSR.W       #5, D4      *D4 = EA MODE
00001B92                          1288      
00001B92  3A06                    1289      MOVE.W      D6, D5      *SHIFT LEFT 13; RIGHT 13
00001B94  E14D                    1290      LSL.W       #8, D5  
00001B96  EB4D                    1291      LSL.W       #5, D5      *
00001B98  E04D                    1292      LSR.W       #8, D5
00001B9A  EA4D                    1293      LSR.W       #5, D5      * D5 = EA REGISTER
00001B9C                          1294      
00001B9C  4EB9 00001EA0           1295      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001BA2  41F9 00001CDE           1296      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001BA8  C9FC 0006               1297      MULS        #6, D4          *GET JUMP
00001BAC  4EB0 4000               1298      JSR         0(A0, D4)       *JUMP
00001BB0                          1299      
00001BB0  BE7C 0001               1300      CMP.W       #1, D7 *IF ONE THEN THIS WAS PRINTED FIRST
00001BB4  6700 0006               1301      BEQ         PRINT_LIST
00001BB8                          1302      
00001BB8  6000 008E               1303      BRA         DONE_PRINTING
00001BBC                          1304  PRINT_LIST
00001BBC  BE3C 0001               1305      CMP.B       #1, D7 
00001BC0  6700 0076               1306      BEQ         COMMA_SPACE2
00001BC4  2E0A                    1307  EA2 MOVE.L      A2, D7
00001BC6  548A                    1308      ADD.L       #2, A2
00001BC8  143C 0008               1309      MOVE.B      #$8, D2
00001BCC  4244                    1310      CLR         D4
00001BCE                          1311  FOR_LOOP    
00001BCE  B404                    1312      CMP.B       D4, D2
00001BD0  6700 001E               1313      BEQ         ADDRESS_REGISTERS
00001BD4  E25F                    1314      ROR.W       #1, D7
00001BD6  6000 0006               1315      BRA         PRINT_CURRENT
00001BDA  5244                    1316  JFZ ADDQ        #1, D4
00001BDC  60F0                    1317      BRA         FOR_LOOP
00001BDE                          1318      
00001BDE                          1319  PRINT_CURRENT
00001BDE  64FA                    1320      BCC         JFZ
00001BE0  1A04                    1321      MOVE.B      D4, D5
00001BE2  4EB9 00001D0E           1322      JSR         DATA_0
00001BE8  4EB9 00001FA6           1323      JSR         SLASH
00001BEE  60EA                    1324      BRA         JFZ
00001BF0                          1325      
00001BF0                          1326  ADDRESS_REGISTERS
00001BF0  4244                    1327      CLR         D4
00001BF2                          1328  FOR_2
00001BF2  B404                    1329      CMP.B       D4, D2
00001BF4  6700 001E               1330      BEQ         CHECK_TYPE
00001BF8  E25F                    1331      ROR.W       #1, D7
00001BFA  6000 0006               1332      BRA         EA_PRINT_ADDRESS
00001BFE  5244                    1333  JFF ADDQ        #1, D4
00001C00  60F0                    1334      BRA         FOR_2
00001C02                          1335      
00001C02                          1336  EA_PRINT_ADDRESS
00001C02  64FA                    1337      BCC         JFF
00001C04  1A04                    1338      MOVE.B      D4, D5
00001C06  4EB9 00001FA6           1339      JSR         SLASH
00001C0C  4EB9 00001D1C           1340      JSR         ADDR_1
00001C12  60EA                    1341      BRA         JFF  
00001C14                          1342  CHECK_TYPE
00001C14  3E06                    1343      MOVE.W      D6, D7
00001C16  EB4F                    1344      LSL.W       #5, D7  
00001C18  E04F                    1345      LSR.W       #8, D7
00001C1A  EE4F                    1346      LSR.W       #7, D7
00001C1C  BE3C 0000               1347      CMP.B       #0, D7   *IF TYPE IS 0 THE LIST HAS BEEN PRINTED FIRST  
00001C20  6700 FF5E               1348      BEQ         EAP      *THEREFORE ITS TIME TO PRINT THE EAP
00001C24  6600 0022               1349      BNE         DONE_PRINTING
00001C28                          1350      
00001C28                          1351  COMMA_SPACE
00001C28  4EB9 00001F1C           1352      JSR         COMMA
00001C2E  4EB9 00001F7E           1353      JSR         SPACE
00001C34  6000 FF52               1354      BRA         EAS
00001C38                          1355      
00001C38                          1356  COMMA_SPACE2
00001C38  4EB9 00001F1C           1357      JSR         COMMA
00001C3E  4EB9 00001F7E           1358      JSR         SPACE
00001C44  6000 FF7E               1359      BRA         EA2
00001C48                          1360      
00001C48                          1361  DONE_PRINTING
00001C48  16BC 0000               1362      MOVE.B      #00, (A3)
00001C4C  6000 F5EE               1363      BRA         VALID_OPCODE
00001C50                          1364  
00001C50                          1365  
00001C50                          1366  
00001C50                          1367  
00001C50                          1368  
00001C50                          1369  
00001C50                          1370  
00001C50                          1371  
00001C50                          1372  
00001C50                          1373  
00001C50                          1374  
00001C50                          1375  
00001C50                          1376  
00001C50                          1377  
00001C50                          1378  
00001C50                          1379  
00001C50                          1380  BYEBYE
00001C50  FFFF FFFF               1381      SIMHALT
00001C54                          1382  
00001C54                          1383  
00001C54                          1384  
00001C54                          1385  
00001C54                          1386  
00001C54                          1387  
00001C54                          1388  
00001C54                          1389  
00001C54                          1390  
00001C54                          1391  
00001C54                          1392  
00001C54                          1393  
00001C54                          1394  
00001C54                          1395  
00001C54                          1396  
00001C54                          1397  MOVE_ERROR_CHECK       *only invalid move is desn addr reg
00001C54  B83C 0001               1398      CMP.B       #1, D4 *if d4 is one, dest is addr reg
00001C58  6700 0354               1399      BEQ         INVALID
00001C5C  4E75                    1400      RTS
00001C5E                          1401      
00001C5E                          1402  ADD_ERROR_CHECK  *COVERS ALL SHIFTS
00001C5E  B83C 0007               1403      CMP.B       #7, D4
00001C62  6700 0072               1404      BEQ         EAT_INVALID
00001C66  B83C 0001               1405      CMP.B       #1, D4
00001C6A  6700 0342               1406      BEQ         INVALID
00001C6E  B83C 0000               1407      CMP.B       #0, D4
00001C72  6700 033A               1408      BEQ         INVALID
00001C76  4E75                    1409      RTS 
00001C78                          1410      
00001C78                          1411  ADDI_ERROR_CHECK *COVERS CLR
00001C78  B83C 0001               1412      CMP.B       #1, D4
00001C7C  6700 0330               1413      BEQ         INVALID
00001C80  B83C 0007               1414      CMP.B       #7, D4
00001C84  6700 0050               1415      BEQ         EAT_INVALID
00001C88  4E75                    1416      RTS
00001C8A                          1417      
00001C8A                          1418  LEA_ERROR_CHECK *COVERS JSR
00001C8A  B83C 0000               1419      CMP.B       #0, D4
00001C8E  6700 031E               1420      BEQ         INVALID
00001C92  B83C 0001               1421      CMP.B       #1, D4
00001C96  6700 0316               1422      BEQ         INVALID
00001C9A  B83C 0003               1423      CMP.B       #3, D4
00001C9E  6700 030E               1424      BEQ         INVALID
00001CA2  B83C 0004               1425      CMP.B       #4, D4
00001CA6  6700 0306               1426      BEQ         INVALID
00001CAA  B83C 0007               1427      CMP.B       #7, D4
00001CAE  6700 0026               1428      BEQ         EAT_INVALID
00001CB2  4E75                    1429      RTS
00001CB4                          1430      
00001CB4                          1431  MOVEM_ERROR_CHECK *0, 1, 4, 7
00001CB4  B83C 0000               1432      CMP.B       #0, D4
00001CB8  6700 02F4               1433      BEQ         INVALID
00001CBC  B83C 0001               1434      CMP.B       #1, D4
00001CC0  6700 02EC               1435      BEQ         INVALID
00001CC4  B83C 0004               1436      CMP.B       #4, D4
00001CC8  6700 02E4               1437      BEQ         INVALID
00001CCC  B83C 0007               1438      CMP.B       #7, D4
00001CD0  6700 0004               1439      BEQ         EAT_INVALID
00001CD4  4E75                    1440      RTS
00001CD6                          1441      
00001CD6                          1442      
00001CD6                          1443      
00001CD6                          1444      *assuming FOR NOW that it always eats a long
00001CD6                          1445  EAT_INVALID *EATS THE NEXT TWO WORD VALUES... THEN CALLS INVALID
00001CD6  548A                    1446      ADD.L       #2, A2      *EAT THE FIRST WORD
00001CD8  548A                    1447      ADD.L       #2, A2      *EAT THE SECOND WORD
00001CDA  6000 02D2               1448      BRA         INVALID
00001CDE                          1449  
00001CDE                          1450  
00001CDE                          1451  
00001CDE                          1452  
00001CDE                          1453  
00001CDE                          1454  
00001CDE                          1455  
00001CDE                          1456  
00001CDE                          1457  
00001CDE                          1458  
00001CDE                          1459  
00001CDE                          1460  
00001CDE                          1461  
00001CDE                          1462  
00001CDE                          1463  
00001CDE                          1464  
00001CDE                          1465  
00001CDE                          1466  
00001CDE  4EF9 00001D0E           1467  MODE_JUMP       JMP     DATA_0
00001CE4  4EF9 00001D1C           1468                  JMP     ADDR_1
00001CEA  4EF9 00001D2A           1469                  JMP     ADDI_2
00001CF0  4EF9 00001D3C           1470                  JMP     ADDP_3
00001CF6  4EF9 00001D48           1471                  JMP     ADDM_4
00001CFC  4EF9 00001D54           1472                  JMP     ABSW_5
00001D02  4EF9 00001D6A           1473                  JMP     ABSL_6
00001D08  4EF9 00001D8E           1474                  JMP     IMME_7
00001D0E                          1475  
00001D0E                          1476  DATA_0 *DONE
00001D0E  16F9 00003574           1477      MOVE.B      M_DREG, (A3)+
00001D14  4EB9 00001DCA           1478      JSR         GET_REG
00001D1A  4E75                    1479      RTS
00001D1C                          1480  
00001D1C                          1481  ADDR_1 *ADD CONDITIONS FOR SOURCE ONLY, AND NEVER BYTES
00001D1C  16F9 00003576           1482      MOVE.B      M_AREG, (A3)+
00001D22  4EB9 00001DCA           1483      JSR         GET_REG
00001D28  4E75                    1484      RTS
00001D2A                          1485   
00001D2A                          1486  ADDI_2 *DONE
00001D2A  4EB9 00001F5E           1487      JSR         OPEN
00001D30  4EB8 1D1C               1488      JSR         ADDR_1
00001D34  4EB9 00001F66           1489      JSR         CLOSE
00001D3A  4E75                    1490      RTS
00001D3C                          1491      
00001D3C                          1492  ADDP_3 *DONE
00001D3C  4EB8 1D2A               1493      JSR         ADDI_2
00001D40  4EB9 00001F6E           1494      JSR         PLUS
00001D46  4E75                    1495      RTS
00001D48                          1496      
00001D48                          1497  ADDM_4 *DONE
00001D48  4EB9 00001F76           1498      JSR         SUB
00001D4E  4EB8 1D2A               1499      JSR         ADDI_2
00001D52  4E75                    1500      RTS
00001D54                          1501      
00001D54                          1502  ABSW_5  *DONE
00001D54  548A                    1503      ADD.L       #2, A2      *INCREMENT INTO WORD ADDRESS
00001D56  141A                    1504      MOVE.B      (A2)+, D2
00001D58  E15A                    1505      ROL         #8, D2
00001D5A  1412                    1506      MOVE.B      (A2), D2
00001D5C  534A                    1507      SUB         #1, A2  
00001D5E  4EB9 00001F86           1508      JSR         CASH
00001D64  6100 0168               1509      BSR         OUTPUT_HEX
00001D68  4E75                    1510      RTS
00001D6A                          1511  
00001D6A                          1512   
00001D6A                          1513  ABSL_6 *
00001D6A  4EB9 00001F86           1514      JSR         CASH
00001D70  548A                    1515      ADD.L       #2, A2      *INCREMENT INTO WORD
00001D72  141A                    1516      MOVE.B      (A2)+, D2
00001D74  E15A                    1517      ROL         #8, D2
00001D76  1412                    1518      MOVE.B      (A2), D2
00001D78  534A                    1519      SUB         #1, A2
00001D7A  6100 0152               1520      BSR         OUTPUT_HEX
00001D7E                          1521      
00001D7E                          1522      
00001D7E  548A                    1523      ADD.L       #2, A2      *IDCREMENT INTO NEXT WORK
00001D80  141A                    1524      MOVE.B      (A2)+, D2
00001D82  E15A                    1525      ROL         #8, D2
00001D84  1412                    1526      MOVE.B      (A2), D2
00001D86  534A                    1527      SUB         #1, A2
00001D88  6100 0144               1528      BSR         OUTPUT_HEX
00001D8C  4E75                    1529      RTS
00001D8E                          1530      
00001D8E                          1531  IMME_7  *FOR NOW ONLY WORKING WITH IMMEDIATE HEX VALUES
00001D8E  4EB9 00001F24           1532      JSR         POUND
00001D94  4EB9 00001F86           1533      JSR         CASH
00001D9A                          1534      
00001D9A  548A                    1535      ADD.L       #2, A2
00001D9C  141A                    1536      MOVE.B      (A2)+, D2
00001D9E  E15A                    1537      ROL         #8, D2
00001DA0  1412                    1538      MOVE.B      (A2), D2
00001DA2  534A                    1539      SUB         #1, A2
00001DA4  6100 0128               1540      BSR         OUTPUT_HEX
00001DA8                          1541      
00001DA8                          1542      
00001DA8                          1543      
00001DA8                          1544      *IDEA IS TO HAVE A FLAG HERE TO SEE IF THE DATA IS GONNA BE A LONG
00001DA8                          1545      *THEN BRANCH TO THE BELOW THREE COMMANDS IF THE IMMEDIATE DATA IS A LONG
00001DA8                          1546      
00001DA8  4E75                    1547      RTS
00001DAA                          1548  
00001DAA                          1549  GET_SIZE
00001DAA  4EB9 00001F2C           1550      JSR         DOT
00001DB0  B83C 0001               1551      CMP.B       #1, D4
00001DB4  6700 018C               1552      BEQ         BYTE
00001DB8  B83C 0003               1553      CMP.B       #3, D4
00001DBC  6700 0176               1554      BEQ         WORD
00001DC0  B83C 0002               1555      CMP.B       #2, D4
00001DC4  6700 018A               1556      BEQ         LONG  
00001DC8  4E75                    1557      RTS
00001DCA                          1558      
00001DCA                          1559  GET_REG ******************
00001DCA  2205                    1560      MOVE.L      D5, D1 
00001DCC  4EB8 1278               1561      JSR         CONVERT_TO_ASCII
00001DD0  16C1                    1562      MOVE.B      D1, (A3)+
00001DD2  4E75                    1563      RTS
00001DD4                          1564      
00001DD4                          1565  GET_OPMODE
00001DD4  4EB9 00001F2C           1566      JSR         DOT
00001DDA  B83C 0003               1567      CMP.B       #3, D4
00001DDE  6700 0154               1568      BEQ         WORD
00001DE2  B83C 0007               1569      CMP.B       #7, D4
00001DE6  6700 0168               1570      BEQ         LONG
00001DEA  4E75                    1571      RTS
00001DEC                          1572      
00001DEC                          1573  GET_OPMODE_MATH
00001DEC  4EB9 00001F2C           1574      JSR         DOT
00001DF2  B83C 0000               1575      CMP.B       #0, D4
00001DF6  6700 014A               1576      BEQ         BYTE
00001DFA  B83C 0004               1577      CMP.B       #4, D4
00001DFE  6700 0142               1578      BEQ         BYTE
00001E02  B83C 0001               1579      CMP.B       #1, D4
00001E06  6700 012C               1580      BEQ         WORD
00001E0A  B83C 0005               1581      CMP.B       #5, D4
00001E0E  6700 0124               1582      BEQ         WORD
00001E12  B83C 0002               1583      CMP.B       #2, D4
00001E16  6700 0138               1584      BEQ         LONG
00001E1A  B83C 0006               1585      CMP.B       #6, D4
00001E1E  6700 0130               1586      BEQ         LONG
00001E22  4E75                    1587      RTS
00001E24                          1588      
00001E24                          1589  GET_DATA ******************
00001E24  4EB9 00001F24           1590      JSR         POUND
00001E2A  BA3C 0000               1591      CMP.B       #0, D5
00001E2E  6700 0008               1592      BEQ         PRINT_8
00001E32  2205                    1593      MOVE.L      D5, D1
00001E34  16C1                    1594      MOVE.B      D1, (A3)+
00001E36  4E75                    1595      RTS
00001E38                          1596      
00001E38                          1597  PRINT_8 ********
00001E38  7208                    1598      MOVE.L      #8, D1
00001E3A  16C1                    1599      MOVE.B      D1, (A3)+
00001E3C  4E75                    1600      RTS
00001E3E                          1601      
00001E3E                          1602  GET_SIZE_ADDI
00001E3E  4EB9 00001F2C           1603      JSR         DOT
00001E44  B83C 0000               1604      CMP.B       #0, D4
00001E48  6700 00F8               1605      BEQ         BYTE
00001E4C  B83C 0001               1606      CMP.B       #1, D4
00001E50  6700 00E2               1607      BEQ         WORD
00001E54  B83C 0002               1608      CMP.B       #2, D4
00001E58  6700 00F6               1609      BEQ         LONG  
00001E5C  4E75                    1610      RTS
00001E5E                          1611      
00001E5E                          1612  TYPE_CHOOSER
00001E5E  B83C 0000               1613      CMP.B       #0, D4      *IF IMMEDIATE
00001E62  67C0                    1614      BEQ         GET_DATA    *IF BRANCHED  ->  #1 IS NOW PRINTED
00001E64  B83C 0001               1615      CMP.B       #1, D4      *IF A DATA REG
00001E68  6700 FEA4               1616      BEQ         DATA_0
00001E6C  4E75                    1617      RTS
00001E6E                          1618      
00001E6E                          1619  PRINT_BCC
00001E6E  B83C 0004               1620      CMP.B       #4, D4
00001E72  6700 011A               1621      BEQ         CC
00001E76  B83C 000E               1622      CMP.B       #14, D4
00001E7A  6700 011A               1623      BEQ         GT
00001E7E  B83C 000F               1624      CMP.B       #15, D4
00001E82  6700 011A               1625      BEQ         LE
00001E86  4E75                    1626      RTS
00001E88                          1627      
00001E88                          1628  REG_SIZE
00001E88  4EB9 00001F2C           1629      JSR         DOT
00001E8E  B83C 0000               1630      CMP.B       #0, D4
00001E92  6700 00A0               1631      BEQ         WORD
00001E96  B83C 0001               1632      CMP.B       #1, D4
00001E9A  6700 00B4               1633      BEQ         LONG
00001E9E  4E75                    1634      RTS
00001EA0                          1635  MODE_CHOOSER
00001EA0  B83C 0007               1636      CMP.B       #7, D4
00001EA4  6700 0004               1637      BEQ         NEW_MODE
00001EA8  4E75                    1638      RTS
00001EAA                          1639      
00001EAA                          1640  NEW_MODE
00001EAA  BA3C 0000               1641      CMP.B       #0, D5 *CHECK REGISTER(D5), WORD ADDRESS?
00001EAE  6700 001A               1642      BEQ         TO_FIVE *CHANGE MODE (D4) TO 5
00001EB2  BA3C 0001               1643      CMP.B       #1, D5 *CHECK REGISTER(D5), LONG ADDRESS?
00001EB6  6700 000E               1644      BEQ         TO_SIX *CHANGE MODE(D4) TO 6
00001EBA                          1645      
00001EBA  BA3C 0004               1646      CMP.B       #4, D5 *for immediate data
00001EBE  6700 0004               1647      BEQ         TO_EIGHT
00001EC2  4E75                    1648      RTS
00001EC4                          1649      
00001EC4                          1650  TO_EIGHT
00001EC4  4E75                    1651      RTS
00001EC6                          1652      
00001EC6                          1653  TO_SIX  
00001EC6  5304                    1654      SUB.B      #1, D4
00001EC8  4E75                    1655      RTS
00001ECA                          1656  
00001ECA                          1657  TO_FIVE
00001ECA  5504                    1658      SUB.B      #2, D4
00001ECC  4E75                    1659      RTS
00001ECE                          1660  
00001ECE                          1661  OUTPUT_HEX
00001ECE                          1662      *OUTPUT 1ST
00001ECE  3802                    1663      MOVE.W      D2, D4              *D7 = <1010 1111 0101 0111>
00001ED0  E04C                    1664      LSR.W       #8, D4              *D7 = <0000 0000 1010 1111>
00001ED2  E84C                    1665      LSR.W       #4, D4              *D7 = <0000 0000 0000 1010>
00001ED4  1204                    1666      MOVE.B      D4, D1
00001ED6  6100 F3A0               1667      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
00001EDA  6100 003C               1668      BSR         ADD_CHAR         *print the char in D1  
00001EDE                          1669      *OUTPUT 2ND
00001EDE  3802                    1670      MOVE.W      D2, D4
00001EE0  E94C                    1671      LSL.W       #4, D4              *SHIFT OUT FURTHEST RIGHT BIT
00001EE2  E04C                    1672      LSR.W       #8, D4
00001EE4  E84C                    1673      LSR.W       #4, D4  
00001EE6  1204                    1674      MOVE.B      D4, D1
00001EE8  6100 F38E               1675      BSR         CONVERT_TO_ASCII
00001EEC  6100 002A               1676      BSR         ADD_CHAR
00001EF0                          1677      *OUTPUT 3RD
00001EF0  3802                    1678      MOVE.W      D2, D4
00001EF2  E14C                    1679      LSL.W       #8, D4
00001EF4  E04C                    1680      LSR.W       #8, D4
00001EF6  E84C                    1681      LSR.W       #4, D4
00001EF8  1204                    1682      MOVE.B      D4, D1
00001EFA  6100 F37C               1683      BSR         CONVERT_TO_ASCII
00001EFE  6100 0018               1684      BSR         ADD_CHAR
00001F02                          1685      *OUTPUT 4TH
00001F02  3802                    1686      MOVE.W      D2, D4  *D7 = <1010 1111 0101 0111>
00001F04  E14C                    1687      LSL.W       #8, D4  *     <0101 0111 0000 0000>
00001F06  E94C                    1688      LSL.W       #4, D4  *     <0111 0000 0000 0000>
00001F08  E04C                    1689      LSR.W       #8, D4  *     <
00001F0A  E84C                    1690      LSR.W       #4, D4
00001F0C  1204                    1691      MOVE.B      D4, D1
00001F0E  6100 F368               1692      BSR         CONVERT_TO_ASCII
00001F12  6100 0004               1693      BSR         ADD_CHAR
00001F16  4E75                    1694      RTS
00001F18                          1695                                     *continue converting            
00001F18                          1696  ADD_CHAR ********
00001F18  16C1                    1697      MOVE.B      D1, (A3)+
00001F1A  4E75                    1698      RTS
00001F1C                          1699  
00001F1C                          1700  COMMA
00001F1C  16F9 00003560           1701      MOVE.B      M_COMMA, (A3)+
00001F22  4E75                    1702      RTS
00001F24                          1703      
00001F24                          1704  POUND
00001F24  16F9 00003562           1705      MOVE.B      M_POUND, (A3)+
00001F2A  4E75                    1706      RTS
00001F2C                          1707          
00001F2C                          1708  DOT
00001F2C  16F9 00003564           1709      MOVE.B      M_DOT, (A3)+
00001F32  4E75                    1710      RTS   
00001F34                          1711  
00001F34                          1712  WORD
00001F34  16F9 00003566           1713      MOVE.B      M_WORD, (A3)+
00001F3A  4EB9 00001F7E           1714      JSR         SPACE
00001F40  4E75                    1715      RTS
00001F42                          1716  
00001F42                          1717  BYTE
00001F42  16F9 00003568           1718      MOVE.B      M_BYTE, (A3)+
00001F48  4EB9 00001F7E           1719      JSR         SPACE
00001F4E  4E75                    1720      RTS
00001F50                          1721      
00001F50                          1722  LONG
00001F50  16F9 0000356A           1723      MOVE.B      M_LONG, (A3)+
00001F56                          1724      
00001F56  4EB9 00001F7E           1725      JSR         SPACE
00001F5C  4E75                    1726      RTS
00001F5E                          1727      
00001F5E                          1728  OPEN
00001F5E  16F9 0000356C           1729      MOVE.B      M_OPEN, (A3)+
00001F64  4E75                    1730      RTS
00001F66                          1731  
00001F66                          1732  CLOSE
00001F66  16F9 0000356E           1733      MOVE.B      M_CLOSE, (A3)+
00001F6C  4E75                    1734      RTS
00001F6E                          1735      
00001F6E                          1736  PLUS
00001F6E  16F9 00003570           1737      MOVE.B      M_PLUS, (A3)+
00001F74  4E75                    1738      RTS
00001F76                          1739      
00001F76                          1740  SUB
00001F76  16F9 00003572           1741      MOVE.B      M_SUB, (A3)+
00001F7C  4E75                    1742      RTS
00001F7E                          1743      
00001F7E                          1744  SPACE
00001F7E  16F9 000034E0           1745      MOVE.B      M_SPACE, (A3)+
00001F84  4E75                    1746      RTS    
00001F86                          1747      
00001F86                          1748  CASH
00001F86  16F9 0000355E           1749      MOVE.B      M_CASH, (A3)+
00001F8C  4E75                    1750      RTS
00001F8E                          1751  
00001F8E                          1752  CC
00001F8E  16F9 00003578           1753      MOVE.B      M_CC, (A3)+
00001F94  4E75                    1754      RTS
00001F96                          1755  GT
00001F96  16F9 0000357B           1756      MOVE.B      M_GT, (A3)+
00001F9C  4E75                    1757      RTS
00001F9E                          1758  
00001F9E                          1759  LE
00001F9E  16F9 0000357E           1760      MOVE.B      M_LE, (A3)+
00001FA4  4E75                    1761      RTS
00001FA6                          1762      
00001FA6                          1763  SLASH
00001FA6  16F9 00003581           1764      MOVE.B      M_SLASH, (A3)+
00001FAC  4E75                    1765      RTS
00001FAE                          1766      
00001FAE                          1767  INVALID
00001FAE  16BC 0000               1768      MOVE.B      #00, (A3)
00001FB2  6000 F208               1769      BRA         INVALID_OPCODE
00001FB6                          1770      
00001FB6                          1771  
00001FB6  =0000000D               1772  CR      EQU     $0D
00001FB6  =0000000A               1773  LF      EQU     $0A
00001FB6                          1774  
00001FB6                          1775  
00001FB6                          1776  
00001FB6                          1777  
00001FB6                          1778  
00001FB6                          1779  
00001FB6                          1780  
00001FB6                          1781  
00001FB6                          1782  
00001FB6                          1783  
00001FB6                          1784  
00001FB6                          1785  
00001FB6                          1786  
00001FB6                          1787  
00001FB6                          1788  
00001FB6                          1789  
00001FB6                          1790  
00001FB6                          1791  
00001FB6                          1792  -------------------- end include --------------------
00001FB6                          1793      INCLUDE         'testingFile.x68'
00003000                          1794      ORG    $3000
00003000                          1795          
00003000                          1796  
00003000                          1797      *NOP* DONE
00003000                          1798      *NOP
00003000                          1799      
00003000                          1800      *MOVE* DONE
00003000                          1801      *MOVE SOURCE: DATA REGISTER -> DN
00003000  1401                    1802      MOVE.B      D1, D2
00003002  1281                    1803      MOVE.B      D1, (A1)
00003004  12C1                    1804      MOVE.B      D1, (A1)+
00003006  1301                    1805      MOVE.B      D1, -(A1)
00003008  11C1 1234               1806      MOVE.B      D1, $1234
0000300C  13C1 12345678           1807      MOVE.B      D1, $12345678
00003012  3401                    1808      MOVE.W      D1, D2
00003014  3281                    1809      MOVE.W      D1, (A1)
00003016  32C1                    1810      MOVE.W      D1, (A1)+
00003018  3301                    1811      MOVE.W      D1, -(A1)
0000301A  31C1 1234               1812      MOVE.W      D1, $1234
0000301E  33C1 12345678           1813      MOVE.W      D1, $12345678
00003024  2401                    1814      MOVE.L      D1, D2
00003026  2281                    1815      MOVE.L      D1, (A1)
00003028  22C1                    1816      MOVE.L      D1, (A1)+
0000302A  2301                    1817      MOVE.L      D1, -(A1)
0000302C  21C1 1234               1818      MOVE.L      D1, $1234
00003030  23C1 12345678           1819      MOVE.L      D1, $12345678
00003036                          1820      *MOVE SOURCE: ADDRESS REGISTER -> AN
00003036                          1821      *INVALID: MOVE.B      
00003036  3209                    1822      MOVE.W       A1, D1
00003038  3449                    1823      MOVE.W       A1, A2
0000303A  3489                    1824      MOVE.W       A1, (A2)
0000303C  3509                    1825      MOVE.W       A1, -(A2)
0000303E  34C9                    1826      MOVE.W       A1, (A2)+
00003040  31C9 1234               1827      MOVE.W       A1, $1234
00003044  33C9 12345678           1828      MOVE.W       A1, $12345678
0000304A  2209                    1829      MOVE.L      A1, D1
0000304C  2449                    1830      MOVE.L      A1, A2
0000304E  2489                    1831      MOVE.L      A1, (A2)
00003050  2509                    1832      MOVE.L      A1, -(A2)
00003052  24C9                    1833      MOVE.L      A1, (A2)+
00003054  21C9 1234               1834      MOVE.L      A1, $1234
00003058  23C9 12345678           1835      MOVE.L      A1, $12345678
0000305E                          1836      *MOVE SOURCE: ADDRESS REGISTER INDIRECT -> (AN)
0000305E  1211                    1837      MOVE.B       (A1), D1
00003060  1491                    1838      MOVE.B       (A1), (A2)
00003062  1511                    1839      MOVE.B       (A1), -(A2)
00003064  14D1                    1840      MOVE.B       (A1), (A2)+
00003066  11D1 1234               1841      MOVE.B       (A1), $1234
0000306A  13D1 12345678           1842      MOVE.B       (A1), $12345678
00003070  3211                    1843      MOVE.W       (A1), D1
00003072  3491                    1844      MOVE.W       (A1), (A2)
00003074  3511                    1845      MOVE.W       (A1), -(A2)
00003076  34D1                    1846      MOVE.W       (A1), (A2)+
00003078  31D1 1234               1847      MOVE.W       (A1), $1234
0000307C  33D1 12345678           1848      MOVE.W       (A1), $12345678
00003082  2211                    1849      MOVE.L      (A1), D1
00003084  2491                    1850      MOVE.L      (A1), (A2)
00003086  2511                    1851      MOVE.L      (A1), -(A2)
00003088  24D1                    1852      MOVE.L      (A1), (A2)+
0000308A  21D1 1234               1853      MOVE.L      (A1), $1234
0000308E  23D1 12345678           1854      MOVE.L      (A1), $12345678
00003094                          1855      *MOVE SOURCE: ADDRESS REG IND POST INCREMENT
00003094  1219                    1856      MOVE.B       (A1)+, D1
00003096  1499                    1857      MOVE.B       (A1)+, (A2)
00003098  14D9                    1858      MOVE.B       (A1)+, (A2)+
0000309A  1519                    1859      MOVE.B       (A1)+, -(A2)
0000309C  11D9 1234               1860      MOVE.B       (A1)+, $1234
000030A0  13D9 12345678           1861      MOVE.B       (A1)+, $12345678
000030A6  3219                    1862      MOVE.W       (A1)+, D1
000030A8  3499                    1863      MOVE.W       (A1)+, (A2)
000030AA  34D9                    1864      MOVE.W       (A1)+, (A2)+
000030AC  3519                    1865      MOVE.W       (A1)+, -(A2)
000030AE  31D9 1234               1866      MOVE.W       (A1)+, $1234
000030B2  33D9 12345678           1867      MOVE.W       (A1)+, $12345678
000030B8  2219                    1868      MOVE.L      (A1)+, D1
000030BA  2499                    1869      MOVE.L      (A1)+, (A2)
000030BC  24D9                    1870      MOVE.L      (A1)+, (A2)+
000030BE  2519                    1871      MOVE.L      (A1)+, -(A2)
000030C0  21D9 1234               1872      MOVE.L      (A1)+, $1234
000030C4  23D9 12345678           1873      MOVE.L      (A1)+, $12345678
000030CA                          1874      *MOVE SOURCE: ADDRESS REG IND PRE DECREMENT
000030CA  1221                    1875      MOVE.B       -(A1), D1
000030CC  14A1                    1876      MOVE.B       -(A1), (A2)
000030CE  14E1                    1877      MOVE.B       -(A1), (A2)+
000030D0  1521                    1878      MOVE.B       -(A1), -(A2)
000030D2  11E1 1234               1879      MOVE.B       -(A1), $1234
000030D6  13E1 12345678           1880      MOVE.B       -(A1), $12345678
000030DC  3221                    1881      MOVE.W       -(A1), D1
000030DE  34A1                    1882      MOVE.W       -(A1), (A2)
000030E0  34E1                    1883      MOVE.W       -(A1), (A2)+
000030E2  3521                    1884      MOVE.W       -(A1), -(A2)
000030E4  31E1 1234               1885      MOVE.W       -(A1), $1234
000030E8  33E1 12345678           1886      MOVE.W       -(A1), $12345678
000030EE  2221                    1887      MOVE.L      -(A1), D1
000030F0  24A1                    1888      MOVE.L      -(A1), (A2)
000030F2  24E1                    1889      MOVE.L      -(A1), (A2)+
000030F4  2521                    1890      MOVE.L      -(A1), -(A2)
000030F6  21E1 1234               1891      MOVE.L      -(A1), $1234
000030FA  23E1 12345678           1892      MOVE.L      -(A1), $12345678
00003100                          1893      *MOVE SOURCE: ABSOLUTE WORD -> (XXX).W      
00003100  1238 1234               1894      MOVE.B       $1234, D1
00003104  14B8 1235               1895      MOVE.B       $1235, (A2)
00003108  14F9 00009987           1896      MOVE.B       $9987, (A2)+
0000310E  1538 5543               1897      MOVE.B       $5543, -(A2)
00003112  11F8 1123 1111          1898      MOVE.B       $1123, $1111
00003118  13F9 00009980 AAA89999  1899      MOVE.B       $9980, $AAA89999
00003122  3238 1234               1900      MOVE.W       $1234, D1
00003126  34B8 1235               1901      MOVE.W       $1235, (A2)
0000312A  34F9 00009987           1902      MOVE.W       $9987, (A2)+
00003130  3538 5543               1903      MOVE.W       $5543, -(A2)
00003134  31F8 1123 1111          1904      MOVE.W       $1123, $1111
0000313A  33F9 00009980 AAA89999  1905      MOVE.W       $9980, $AAA89999
00003144  2238 1234               1906      MOVE.L      $1234, D1
00003148  24B8 1235               1907      MOVE.L      $1235, (A2)
0000314C  24F9 00009987           1908      MOVE.L      $9987, (A2)+
00003152  2538 5543               1909      MOVE.L      $5543, -(A2)
00003156  21F8 1123 1111          1910      MOVE.L      $1123, $1111
0000315C  23F9 00009980 AAA89999  1911      MOVE.L      $9980, $AAA89999
00003166                          1912      *MOVE SOURCE: ABSOLUTE LONG -> (XXX).L
00003166  1239 0FFF8111           1913      MOVE.B       $0FFF8111, D1
0000316C  12B9 0FFF8222           1914      MOVE.B       $0FFF8222, (A1)
00003172  12F9 0FFF9999           1915      MOVE.B       $0FFF9999, (A1)+
00003178  1339 0FFF1111           1916      MOVE.B       $0FFF1111, -(A1)
0000317E  13F9 0FFF8799 00009879  1917      MOVE.B       $0FFF8799, $9879
00003188  13F9 0FFF1222 0FFF8878  1918      MOVE.B       $0FFF1222, $0FFF8878
00003192  3239 0FFF8111           1919      MOVE.W       $0FFF8111, D1
00003198  32B9 0FFF8222           1920      MOVE.W       $0FFF8222, (A1)
0000319E  32F9 0FFF9999           1921      MOVE.W       $0FFF9999, (A1)+
000031A4  3339 0FFF1111           1922      MOVE.W       $0FFF1111, -(A1)
000031AA  33F9 0FFF8799 00009879  1923      MOVE.W       $0FFF8799, $9879
000031B4  33F9 0FFF1222 0FFF8878  1924      MOVE.W       $0FFF1222, $0FFF8878
000031BE  2239 0FFF8111           1925      MOVE.L      $0FFF8111, D1
000031C4  22B9 0FFF8222           1926      MOVE.L      $0FFF8222, (A1)
000031CA  22F9 0FFF9999           1927      MOVE.L      $0FFF9999, (A1)+
000031D0  2339 0FFF1111           1928      MOVE.L      $0FFF1111, -(A1)
000031D6  23F9 0FFF8799 00009879  1929      MOVE.L      $0FFF8799, $9879
000031E0  23F9 0FFF1222 0FFF8878  1930      MOVE.L      $0FFF1222, $0FFF8878
000031EA                          1931      *MOVE SOURCE: IMMEDIATE DATA -> #<DATA>
000031EA  123C 0001               1932      MOVE.B       #1, D1
000031EE  12BC 0002               1933      MOVE.B       #2, (A1)
000031F2  12FC 0003               1934      MOVE.B       #3, (A1)+
000031F6  133C 0004               1935      MOVE.B       #4, -(A1)
000031FA  11FC 0005 1234          1936      MOVE.B       #5, $1234
00003200  13FC 0006 0FFF1234      1937      MOVE.B       #6, $0FFF1234
00003208  323C 0457               1938      MOVE.W       #1111, D1
0000320C  32BC 08AE               1939      MOVE.W       #2222, (A1)
00003210  32FC 0D05               1940      MOVE.W       #3333, (A1)+
00003214  333C 115C               1941      MOVE.W       #4444, -(A1)
00003218  31FC 15B3 1234          1942      MOVE.W       #5555, $1234
0000321E  33FC 1A0A 0FFF1234      1943      MOVE.W       #6666, $0FFF1234
00003226  223C 00A98B42           1944      MOVE.L      #11111234, D1
0000322C  22BC 00BC53CE           1945      MOVE.L      #12342222, (A1)
00003232  22FC 00BC5825           1946      MOVE.L      #12343333, (A1)+
00003238  233C 00BC5C7C           1947      MOVE.L      #12344444, -(A1)
0000323E  21FC 00BC60D3 1234      1948      MOVE.L      #12345555, $1234
00003246  23FC 00BC652A 0FFF1234  1949      MOVE.L      #12346666, $0FFF1234
00003250                          1950  
00003250                          1951      *MOVEA* (good) BYTES INVALID
00003250  3442                    1952      MOVEA.W       D2, A2
00003252  344B                    1953      MOVEA.W       A3, A2
00003254  3453                    1954      MOVEA.W       (A3), A2
00003256  345B                    1955      MOVEA.W       (A3)+, A2
00003258  3463                    1956      MOVEA.W       -(A3), A2
0000325A  3478 1050               1957      MOVEA.W       $1050, A2
0000325E  3479 000F1050           1958      MOVEA.W       $000F1050, A2
00003264  347C 1050               1959      MOVEA.W       #$1050, A2
00003268  2442                    1960      MOVEA.L      D2, A2
0000326A  244B                    1961      MOVEA.L      A3, A2
0000326C  2453                    1962      MOVEA.L      (A3), A2
0000326E  245B                    1963      MOVEA.L      (A3)+, A2
00003270  2463                    1964      MOVEA.L      -(A3), A2
00003272  2478 1050               1965      MOVEA.L      $1050, A2
00003276  2479 000F1050           1966      MOVEA.L      $000F1050, A2
0000327C  247C 00001050           1967      MOVEA.L      #$1050, A2
00003282                          1968      
00003282                          1969      *MOVEQ* (good) ONLY WORKS ON LONGS
00003282  74FF                    1970      MOVEQ.L      #255, D2
00003284  7411                    1971      MOVEQ.L      #$00000011, D2
00003286                          1972      
00003286                          1973      *MOVEM* move multiple registers... saving this for last i think
00003286                          1974      
00003286                          1975      *ADD* this one also weird with the whole effecive address thing...
00003286                          1976      
00003286                          1977      *ADDA* *good) ADDA CANT OPERATE ON BYTES
00003286  D4C2                    1978      ADDA.W       D2, A2
00003288  D4CB                    1979      ADDA.W       A3, A2
0000328A  D4D3                    1980      ADDA.W       (A3), A2
0000328C  D4DB                    1981      ADDA.W       (A3)+, A2
0000328E  D4E3                    1982      ADDA.W       -(A3), A2
00003290  D4F8 1050               1983      ADDA.W       $1050, A2
00003294  D4F9 000F1050           1984      ADDA.W       $000F1050, A2
0000329A  D4FC 1050               1985      ADDA.W       #$1050, A2
0000329E  D5C2                    1986      ADDA.L      D2, A2
000032A0  D5CB                    1987      ADDA.L      A3, A2
000032A2  D5D3                    1988      ADDA.L      (A3), A2
000032A4  D5DB                    1989      ADDA.L      (A3)+, A2
000032A6  D5E3                    1990      ADDA.L      -(A3), A2
000032A8  D5F8 1050               1991      ADDA.L      $1050, A2
000032AC  D5F9 000F1050           1992      ADDA.L      $000F1050, A2
000032B2  D5FC 00001050           1993      ADDA.L      #$1050, A2
000032B8                          1994      
000032B8                          1995      *ADDI*  (good) BYTE DONE
000032B8  0602 0012               1996      ADDI.B       #$12, D2
000032BC  0612 0045               1997      ADDI.B       #$45, (A2)
000032C0  061A 0056               1998      ADDI.B       #$56, (A2)+
000032C4  0622 0067               1999      ADDI.B       #$67, -(A2)
000032C8  0638 0056 1060          2000      ADDI.B       #$56, $1060
000032CE  0639 0089 000F1060      2001      ADDI.B       #$89, $000F1060
000032D6  0642 1234               2002      ADDI.W       #$1234, D2
000032DA  0652 2345               2003      ADDI.W       #$2345, (A2)
000032DE  065A 3456               2004      ADDI.W       #$3456, (A2)+
000032E2  0662 4567               2005      ADDI.W       #$4567, -(A2)
000032E6  0678 5678 1060          2006      ADDI.W       #$5678, $1060
000032EC  0679 6789 000F1060      2007      ADDI.W       #$6789, $000F1060
000032F4  0682 00001234           2008      ADDI.L      #$1234, D2
000032FA  0692 00002345           2009      ADDI.L      #$2345, (A2)
00003300  069A 00003456           2010      ADDI.L      #$3456, (A2)+
00003306  06A2 00004567           2011      ADDI.L      #$4567, -(A2)
0000330C  06B8 00005678 1060      2012      ADDI.L      #$5678, $1060
00003314  06B9 00006789 000F1060  2013      ADDI.L      #$6789, $000F1060
0000331E                          2014      
0000331E                          2015      *ADDQ* (good) BYTE DONE, cant move a byte into an address reg...
0000331E  5203                    2016      ADDQ.B        #1, D3
00003320  561B                    2017      ADDQ.B        #3, (A3)+
00003322  5823                    2018      ADDQ.B        #4, -(A3)
00003324  5A38 1234               2019      ADDQ.B        #5, $1234
00003328  5C39 000F1234           2020      ADDQ.B        #6, $000F1234
0000332E  5243                    2021      ADDQ.W        #1, D3
00003330  544B                    2022      ADDQ.W        #2, A3
00003332  565B                    2023      ADDQ.W        #3, (A3)+
00003334  5863                    2024      ADDQ.W        #4, -(A3)
00003336  5A78 1234               2025      ADDQ.W        #5, $1234
0000333A  5C79 000F1234           2026      ADDQ.W        #6, $000F1234
00003340  5283                    2027      ADDQ.L       #1, D3
00003342  548B                    2028      ADDQ.L       #2, A3
00003344  569B                    2029      ADDQ.L       #3, (A3)+
00003346  58A3                    2030      ADDQ.L       #4, -(A3)
00003348  5AB8 1234               2031      ADDQ.L       #5, $1234
0000334C  5CB9 000F1234           2032      ADDQ.L       #6, $000F1234
00003352                          2033      
00003352                          2034      *SUB*  same with the effective address thing
00003352                          2035      
00003352                          2036      *MULS*  same as sub and add
00003352                          2037      
00003352                          2038      *DIVU* same as sub add muls
00003352                          2039      
00003352                          2040      *LEA*   (good)
00003352  47D4                    2041      LEA (A4), A3
00003354  47F8 1234               2042      LEA $1234, A3
00003358  47F9 12345678           2043      LEA $12345678, A3
0000335E  47F9 000033D4           2044      LEA TEST_MESSAGE, A3
00003364                          2045      
00003364                          2046      *CLR*   (good) BYTE DONE
00003364  4201                    2047      CLR.B         D1
00003366  4211                    2048      CLR.B         (A1)
00003368  4219                    2049      CLR.B         (A1)+
0000336A  4221                    2050      CLR.B         -(A1)
0000336C  4238 1234               2051      CLR.B         $1234
00003370  4239 12345678           2052      CLR.B         $12345678
00003376  4241                    2053      CLR.W         D1
00003378  4251                    2054      CLR.W         (A1)
0000337A  4259                    2055      CLR.W         (A1)+
0000337C  4261                    2056      CLR.W         -(A1)
0000337E  4278 1234               2057      CLR.W         $1234
00003382  4279 12345678           2058      CLR.W         $12345678
00003388  4281                    2059      CLR.L        D1
0000338A  4291                    2060      CLR.L        (A1)
0000338C  4299                    2061      CLR.L        (A1)+
0000338E  42A1                    2062      CLR.L        -(A1)
00003390  42B8 1234               2063      CLR.L        $1234
00003394  42B9 12345678           2064      CLR.L        $12345678
0000339A                          2065      
0000339A                          2066      
0000339A                          2067      *AND*  damn it gonna have to look this up on github
0000339A                          2068      
0000339A                          2069      *OR*    and this
0000339A                          2070      
0000339A                          2071      *LSL* look up this
0000339A                          2072      
0000339A                          2073      *LSR*  and this
0000339A                          2074      
0000339A                          2075      *ASR*  and this
0000339A                          2076      
0000339A                          2077      *ASL*  and this
0000339A                          2078      
0000339A                          2079      *ROL*  and this
0000339A                          2080      
0000339A                          2081      *ROR*  and this
0000339A                          2082      
0000339A                          2083      *CMP*   (good) BYTE DONE.... cant do     CMP.B         A1, D2
0000339A  B401                    2084      CMP.B         D1, D2
0000339C  B411                    2085      CMP.B         (A1), D2
0000339E  B419                    2086      CMP.B         (A1)+, D2
000033A0  B421                    2087      CMP.B         -(A1), D2
000033A2  B438 1000               2088      CMP.B         $1000, D2
000033A6  B438 1002               2089      CMP.B         $00001002, D2
000033AA  B441                    2090      CMP.W         D1, D2
000033AC  B449                    2091      CMP.W         A1, D2
000033AE  B451                    2092      CMP.W         (A1), D2
000033B0  B459                    2093      CMP.W         (A1)+, D2
000033B2  B461                    2094      CMP.W         -(A1), D2
000033B4  B478 1000               2095      CMP.W         $1000, D2
000033B8  B478 1002               2096      CMP.W         $00001002, D2
000033BC  B481                    2097      CMP.L        D1, D2
000033BE  B489                    2098      CMP.L        A1, D2
000033C0  B491                    2099      CMP.L        (A1), D2
000033C2  B499                    2100      CMP.L        (A1)+, D2
000033C4  B4A1                    2101      CMP.L        -(A1), D2
000033C6  B4B8 1000               2102      CMP.L        $1000, D2
000033CA  B4B8 1002               2103      CMP.L        $00001002, D2
000033CE                          2104      
000033CE                          2105      *BCC*  look these up
000033CE                          2106      
000033CE                          2107      *BGT*   look these up 
000033CE                          2108      
000033CE                          2109      *BLE*   look these up
000033CE                          2110      
000033CE                          2111      *JSR*  (NOT SURE HOW TO TEST THIS CORRECTLY
000033CE                          2112      *JSR $1234
000033CE                          2113      *JSR $12345678
000033CE                          2114      *JSR (A4)
000033CE                          2115      
000033CE                          2116      *RTS* (good)
000033CE  4E75                    2117      RTS
000033D0                          2118      
000033D0                          2119      
000033D0                          2120      
000033D0  FFFF FFFF               2121      SIMHALT             ; halt simulator
000033D4                          2122  
000033D4= 49 20 4C 4F 56 45 ...   2123  TEST_MESSAGE    DC.B       'I LOVE APPLES',0
000033E2                          2124  
000033E2                          2125  
000033E2                          2126  
000033E2                          2127  
000033E2                          2128  
000033E2                          2129  
000033E2                          2130  
000033E2                          2131  
000033E2                          2132  -------------------- end include --------------------
000033E2                          2133  END
000033E2  FFFF FFFF               2134      SIMHALT             ; halt simulator
000033E6                          2135  
000033E6  =0000000D               2136  CR          EQU     $0D
000033E6  =0000000A               2137  LF          EQU     $0A
000033E6                          2138  
000033E6= 50 6C 65 61 73 65 ...   2139  M_INPUT_START DC.B 'Please enter starting memory address in hexadecimal:',CR,LF,0
0000341D= 50 6C 65 61 73 65 ...   2140  M_INPUT_END   DC.B 'Please enter ending memory address in hexadecimal:',CR,LF,0
00003452= 49 6E 76 61 6C 69 ...   2141  M_INVALID     DC.B 'Invalid value. Please enter a valid value: ',CR,LF,0
00003480= 45 71 75 61 6C 20 ...   2142  M_EQUAL       DC.B 'Equal values. No memory read. Please enter new values',CR,LF,0
000034B8= 44 41 54 41 20 20 ...   2143  M_DATA        DC.B 'DATA    ',0
000034C1= 20 20 20 20 00          2144  M_TAB         DC.B '    ',0
000034C6= 50 72 65 73 73 20 ...   2145  M_PRESS_CONT  DC.B 'Press any key to continue',0
000034E0                          2146  
000034E0  =00000500               2147  STRING_START    EQU     $0500
000034E0  =00000400               2148  DATA_START      EQU     $0400
000034E0                          2149  
000034E0  =00000100               2150  MEM_START       EQU     $0100
000034E0  =00000200               2151  MEM_END         EQU     $0200
000034E0                          2152  
000034E0= 20 00                   2153  M_SPACE       DC.B  ' ',0
000034E2= 0D 0A 00                2154  M_NEW_LINE    DC.B  '',CR,LF,0
000034E5                          2155  
000034E5= 41 44 44 49 00          2156  ADDI    DC.B    'ADDI',0
000034EA= 4D 4F 56 45 00          2157  MOVE    DC.B    'MOVE',0
000034EF= 4D 4F 56 45 41 00       2158  MOVEA   DC.B    'MOVEA',0
000034F5= 43 4C 52 00             2159  OPCLR   DC.B    'CLR',0
000034F9= 4C 45 41 00             2160  OPLEA   DC.B    'LEA',0
000034FD= 4A 53 52 00             2161  OPJSR   DC.B    'JSR',0
00003501= 4E 4F 50 00             2162  OPNOP   DC.B    'NOP',0
00003505= 52 54 53 00             2163  OPRTS   DC.B    'RTS',0
00003509= 4D 4F 56 45 4D 00       2164  MOVEM   DC.B    'MOVEM',0
0000350F= 41 44 44 51 00          2165  ADDQ    DC.B    'ADDQ',0
00003514= 42 00                   2166  Bcc     DC.B    'B',0
00003516= 4D 4F 56 45 51 00       2167  MOVEQ   DC.B    'MOVEQ',0
0000351C= 44 49 56 55 00          2168  DIVU    DC.B    'DIVU',0
00003521= 4F 52 00                2169  OR      DC.B    'OR',0
00003524= 53 55 42 00             2170  OPSUB   DC.B    'SUB',0
00003528= 43 4D 50 00             2171  CMP     DC.B    'CMP',0
0000352C= 4D 55 4C 53 00          2172  MULS    DC.B    'MULS',0
00003531= 41 4E 44 00             2173  AND     DC.B    'AND',0
00003535= 41 44 44 00             2174  ADD     DC.B    'ADD',0
00003539= 41 44 44 41 00          2175  ADDA    DC.B    'ADDA',0
0000353E= 4C 53 4C 00             2176  LSL     DC.B    'LSL',0
00003542= 4C 53 52 00             2177  LSR     DC.B    'LSR',0
00003546= 41 53 4C 00             2178  ASL     DC.B    'ASL',0
0000354A= 41 53 52 00             2179  ASR     DC.B    'ASR',0
0000354E= 52 4F 4C 00             2180  ROL     DC.B    'ROL',0
00003552= 52 4F 52 00             2181  ROR     DC.B    'ROR',0
00003556= 49 4E 56 41 4C 49 ...   2182  M_INVAL DC.B 'INVALID',0
0000355E= 24 00                   2183  M_CASH  DC.B '$',0
00003560                          2184  *M_SPACE DC.B ' ',0
00003560= 2C 00                   2185  M_COMMA DC.B ',',0
00003562= 23 00                   2186  M_POUND DC.B '#',0
00003564= 2E 00                   2187  M_DOT   DC.B '.',0
00003566= 57 00                   2188  M_WORD  DC.B 'W',0
00003568= 42 00                   2189  M_BYTE  DC.B 'B',0
0000356A= 4C 00                   2190  M_LONG  DC.B 'L',0
0000356C= 28 00                   2191  M_OPEN  DC.B '(',0
0000356E= 29 00                   2192  M_CLOSE DC.B ')',0
00003570= 2B 00                   2193  M_PLUS  DC.B '+',0
00003572= 2D 00                   2194  M_SUB   DC.B '-',0
00003574= 44 00                   2195  M_DREG  DC.B 'D',0
00003576= 41 00                   2196  M_AREG  DC.B 'A',0
00003578= 43 43 00                2197  M_CC    DC.B 'CC',0
0000357B= 47 54 00                2198  M_GT    DC.B 'GT',0
0000357E= 4C 45 00                2199  M_LE    DC.B 'LE',0
00003581= 2F 00                   2200  M_SLASH DC.B '/',0
00003583                          2201  
00003583                          2202  
00003583                          2203  STOP:
00003583                          2204      END    MAIN

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSL_6              1D6A
ABSW_5              1D54
ADD                 3535
ADDA                3539
ADDI                34E5
ADDI_2              1D2A
ADDI_ERROR_CHECK    1C78
ADDM_4              1D48
ADDP_3              1D3C
ADDQ                350F
ADDRESS_REGISTERS   1BF0
ADDR_1              1D1C
ADD_CHAR            1F18
ADD_ERROR_CHECK     1C5E
ALPH_CHAR           128A
AND                 3531
ASL                 3546
ASR                 354A
BCC                 3514
BYEBYE              1C50
BYTE                1F42
CASH                1F86
CC                  1F8E
CHECK_TYPE          1C14
CLOSE               1F66
CMP                 3528
COMMA               1F1C
COMMA_SPACE         1C28
COMMA_SPACE2        1C38
CONVERT_TO_ASCII    1278
CR                  D
DATA                12C0
DATA_0              1D0E
DATA_START          400
DIVU                351C
DN_VERSION          176E
DONE                1A9A
DONE_PRINTING       1C48
DOT                 1F2C
EA2                 1BC4
EAP                 1B80
EAS                 1B88
EAT_INVALID         1CD6
EA_ADD              174E
EA_ADDA             18C4
EA_ADDI             1808
EA_ADDQ             186A
EA_BCC              1AFC
EA_CLR              19C8
EA_CMP              1AA2
EA_JSR              1B20
EA_LEA              1970
EA_LSD              1A0E
EA_MOVE             1648
EA_MOVEA            16BC
EA_MOVEM            1B5E
EA_MOVEQ            1714
EA_MULS             191E
EA_PRINT_ADDRESS    1C02
EA_SHIFT            1A62
EA_VERSION          17B8
EFFECTIVE_ADDRESSING  1196
END                 33E2
END_PRINT_DATA_LOOP  1216
EQUAL_ERROR         113E
FOR_2               1BF2
FOR_LOOP            1BCE
GET_DATA            1E24
GET_NEXT_INPUT      1066
GET_OPMODE          1DD4
GET_OPMODE_MATH     1DEC
GET_REG             1DCA
GET_SIZE            1DAA
GET_SIZE_ADDI       1E3E
GT                  1F96
IMME_7              1D8E
IM_NEW_LINE         1298
IM_SPACE            12A6
INCREMENT_LINE      11B4
INPUT_END           103A
INPUT_START         100A
INVALID             1FAE
INVALID_CHAR_ERROR  10D2
INVALID_OPCODE      11BC
INVALID_OPCODE_CONT  11CA
JFF                 1BFE
JFZ                 1BDA
LE                  1F9E
LEA_ERROR_CHECK     1C8A
LF                  A
LONG                1F50
LSL                 353E
LSR                 3542
MAIN                1000
MEM_END             200
MEM_START           100
MODE_CHOOSER        1EA0
MODE_JUMP           1CDE
MOVE                34EA
MOVEA               34EF
MOVEM               3509
MOVEM_ERROR_CHECK   1CB4
MOVEQ               3516
MOVE_ERROR_CHECK    1C54
MULS                352C
M_AREG              3576
M_BYTE              3568
M_CASH              355E
M_CC                3578
M_CLOSE             356E
M_COMMA             3560
M_DATA              34B8
M_DOT               3564
M_DREG              3574
M_EQUAL             3480
M_GT                357B
M_INPUT_END         341D
M_INPUT_START       33E6
M_INVAL             3556
M_INVALID           3452
M_LE                357E
M_LONG              356A
M_NEW_LINE          34E2
M_OPEN              356C
M_PLUS              3570
M_POUND             3562
M_PRESS_CONT        34C6
M_SLASH             3581
M_SPACE             34E0
M_SUB               3572
M_TAB               34C1
M_WORD              3566
NEW_MODE            1EAA
NUMERIC_CHAR        1284
OP0000              1348
OP0001              1358
OP0010              1368
OP0011              136C
OP0100              13A4
OP0101              144C
OP0110              145C
OP0111              1476
OP1000              1486
OP1001              14BC
OP1011              14CC
OP1100              14DC
OP1101              1514
OP1110              154C
OPCLR               34F5
OPEN                1F5E
OPJSR               34FD
OPLEA               34F9
OPNOP               3501
OPRTS               3505
OPSUB               3524
OP_JTAB             12E6
OR                  3521
OUTPUT_CHAR         1290
OUTPUT_D1B          1220
OUTPUT_HEX          1ECE
PASTE_3             1626
PASTE_4             162E
PASTE_5             1638
PLUS                1F6E
POUND               1F24
PRESS_TO_CONTINUE   1196
PRE_READ_MEMORY     116A
PRINT_8             1E38
PRINT_ADDRESS       11E8
PRINT_ADDRESS_LOOP  11EE
PRINT_BCC           1E6E
PRINT_CURRENT       1BDE
PRINT_DATA          11D0
PRINT_DATA_LOOP     1202
PRINT_LIST          1BBC
PRINT_OPCODE        1262
PRINT_OPCODE_EA     1248
READ_CHAR           1068
READ_CHAR_LOOP      108A
READ_MEMORY         1120
READ_MEMORY_CONT    1184
READ_MEMORY_LOOP    116C
REG_SIZE            1E88
REMOVE_ZERO         1084
REMOVE_ZEROES       1072
RETURN_TO_SUBROUTINE  1276
ROL                 354E
ROR                 3552
SLASH               1FA6
SPACE               1F7E
STOP                3583
STRING_START        500
SUB                 1F76
SWAP_VALUES         114E
TAB                 12B2
TEST                110C
TEST_MESSAGE        33D4
TO_EIGHT            1EC4
TO_FIVE             1ECA
TO_SIX              1EC6
TYPE_CHOOSER        1E5E
VALIDATE_START_END  112C
VALID_CHAR          10FC
VALID_LETTER_LC     10F4
VALID_LETTER_UC     10EC
VALID_NUMBER        10E4
VALID_OPCODE        123C
VERIFY_OPCODE       12CE
WORD                1F34
_ADD                152C
_ADDA               153C
_AND                1504
_ASD                15B2
_ASL                15CC
_ASR                15DC
_CLR                13EC
_DIVU               149E
_JSR                140C
_LEA                13FC
_LSD                157A
_LSL                1592
_LSR                15A2
_MOVE               1384
_MOVEA              1394
_MOVEM              143C
_MULS               14F4
_NOP                141C
_OR                 14AE
_ROD                15EC
_ROL                1606
_ROR                1616
_RTS                142C
