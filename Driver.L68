00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/2/2016 11:34:53 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  MAIN:                  ; first instruction of program
00001000  1401                       9      MOVE.B          D1, D2
00001002  6000 0006                 10      BRA             INPUT_START
00001006                            11      
00001006                            12      INCLUDE         'Main.X68'
00001006                            13  
00001006                            14      *TODO: CHANGE THIS VALUE TO RIGHT AFTER PROGRAM CODE   
00001006  6000 0104                 15      BRA         TEST
0000100A                            16      
0000100A                            17  
0000100A                            18  INPUT_START
0000100A  6000 0100                 19      BRA         TEST
0000100E  43F9 000033E6             20      LEA         M_INPUT_START,A1      *load message
00001014  103C 000E                 21      MOVE.B      #14,D0          *display string
00001018  4E4F                      22      TRAP        #15             *output string
0000101A  227C 00000300             23      MOVE.L      #$0300,A1       *set address of register A1 for string
00001020  103C 0002                 24      MOVE.B      #2,D0           *input string into A1 Trap
00001024  4E4F                      25      TRAP        #15             *input string from user
00001026  6100 0040                 26      BSR         READ_CHAR       *check for valid input
0000102A  23C3 00000100             27      MOVE.L      D3,MEM_START    *put the starting address in memory
00001030  B87C 0000                 28      CMP         #0,D4           *check the result register (D4)
00001034  6700 0004                 29      BEQ         INPUT_END       *valid value. read the ending value
00001038  60D0                      30      BRA         INPUT_START     *invalid value. try inputting start value again    
0000103A                            31      
0000103A                            32  INPUT_END
0000103A  43F9 0000341D             33      LEA         M_INPUT_END,A1  *load message
00001040  103C 000E                 34      MOVE.B      #14,D0          *display string
00001044  4E4F                      35      TRAP        #15             *output string
00001046  227C 00000300             36      MOVE.L      #$0300,A1       *set address of register A1 for string
0000104C  103C 0002                 37      MOVE.B      #2,D0           *input string into A1 Trap
00001050  4E4F                      38      TRAP        #15             *input string from user
00001052  6100 0014                 39      BSR         READ_CHAR       *check for valid input
00001056  23C3 00000200             40      MOVE.L      D3,MEM_END      *put ending address into memory
0000105C  B87C 0000                 41      CMP         #0,D4           *check the result register (D4)
00001060  6700 00BE                 42      BEQ         READ_MEMORY     *valid value. read the ending value
00001064  60D4                      43      BRA         INPUT_END       *invalid value. try inputting start value again    
00001066                            44      
00001066                            45  GET_NEXT_INPUT
00001066  4E75                      46      RTS
00001068                            47  
00001068                            48  READ_CHAR                       *verify that string is valid (all hexadecimal digits)
00001068  4243                      49      CLR         D3              *D3 will act as the total result
0000106A  2849                      50      MOVE.L      A1,A4           *the stop address
0000106C  143C 0006                 51      MOVE.B      #6,D2           *put 6 in D2
00001070  D8C2                      52      ADD.W       D2,A4           *A4 is now the stop address(A4)
00001072                            53      
00001072                            54  REMOVE_ZEROES
00001072  4281                      55      CLR.L       D1              *D1 will act as the temporary value
00001074  1211                      56      MOVE.B      (A1),D1         *read the byte from string
00001076  143C 0030                 57      MOVE.B      #$30,D2         *put ascii zero in D2
0000107A  B202                      58      CMP.B       D2,D1           *compare ascii zero and value of D1
0000107C  6700 0006                 59      BEQ         REMOVE_ZERO     *skip over that character   
00001080  6000 0008                 60      BRA         READ_CHAR_LOOP  *begin converting characters to numerical values
00001084                            61  REMOVE_ZERO
00001084  5289                      62      ADD.L       #1,A1           *increment string start address
00001086  528C                      63      ADD.L       #1,A4           *increment string end address
00001088  60E8                      64      BRA         REMOVE_ZEROES   *loop back and keep removing zeroes
0000108A                            65  READ_CHAR_LOOP     
0000108A  4281                      66      CLR.L       D1              *D1 will act as the temporary value
0000108C  1211                      67      MOVE.B      (A1),D1         *read the byte from string
0000108E  B27C 0000                 68      CMP         #0,D1           *compare 00 (NULL) and the byte ascii value in D1
00001092  67D2                      69      BEQ         GET_NEXT_INPUT    *if you reached the end of the string, end loop
00001094                            70      
00001094  143C 0030                 71      MOVE.B      #$30,D2         *put ascii zero in D2
00001098  B202                      72      CMP.B       D2,D1           *compare ascii zero and value of D1
0000109A  6D00 0036                 73      BLT         INVALID_CHAR_ERROR *branch on invalid (too small) ascii value   
0000109E  143C 0066                 74      MOVE.B      #$66,D2         *put ascii f in D2
000010A2  B202                      75      CMP.B       D2,D1           *compare ascii f and value of D1
000010A4  6E2C                      76      BGT.B       INVALID_CHAR_ERROR *branch on invalid ascii value
000010A6  143C 0061                 77      MOVE.B      #$61,D2         *put ascii a in D2
000010AA  B202                      78      CMP.B       D2,D1           *compare ascii a and value of D1
000010AC  6C00 0046                 79      BGE         VALID_LETTER_LC *value is between a and f. Loop back.
000010B0                            80      
000010B0  143C 0039                 81      MOVE.B      #$39,D2         *put ascii 9 in D2
000010B4  B202                      82      CMP.B       D2,D1           *compare ascii 9 and value of D1
000010B6  6F00 002C                 83      BLE         VALID_NUMBER    *value between 0 and 9. Loop back.
000010BA                            84  
000010BA  143C 0041                 85      MOVE.B      #$41,D2         *put ascii A into D2
000010BE  B202                      86      CMP.B       D2,D1           *compare ascii A and value of D1
000010C0  6D00 0010                 87      BLT         INVALID_CHAR_ERROR    *value between 9 and A (Invalid)
000010C4                            88      
000010C4  143C 0046                 89      MOVE.B      #$46,D2         *put ascii F into D2
000010C8  B202                      90      CMP.B       D2,D1           *compare ascii F and value of D1
000010CA  6E00 0006                 91      BGT         INVALID_CHAR_ERROR    *value between F and a (Invalid)
000010CE                            92           
000010CE  6000 001C                 93      BRA         VALID_LETTER_UC *value is between A and F        
000010D2                            94  INVALID_CHAR_ERROR   
000010D2  43F9 00003452             95      LEA         M_INVALID,A1    *load error message
000010D8  103C 000E                 96      MOVE.B      #14,D0          *display string trap
000010DC  4E4F                      97      TRAP        #15             *output error message
000010DE  183C 0001                 98      MOVE.B      #1,D4           *put invalid output in result register
000010E2  4E75                      99      RTS
000010E4                           100  VALID_NUMBER
000010E4  0401 0030                101      SUB.B       #$30,D1         *get actual value from ascii value
000010E8  6000 0012                102      BRA         VALID_CHAR      *read the next char in string
000010EC                           103  VALID_LETTER_UC
000010EC  0401 0037                104      SUB.B       #$37,D1         *get actual value from ascii value
000010F0  6000 000A                105      BRA         VALID_CHAR      *read the next char in string    
000010F4                           106  VALID_LETTER_LC
000010F4  0401 0057                107      SUB.B       #$57,D1         *get actual value from ascii value
000010F8  6000 0002                108      BRA         VALID_CHAR      *read the next char in string   
000010FC                           109  VALID_CHAR
000010FC  183C 0000                110      MOVE.B      #0,D4           *return valid value entry in D4    
00001100  E98B                     111      LSL.L       #4,D3           *put hex digit in proper place
00001102  D681                     112      ADD.L       D1,D3           *put new total in D3
00001104  5289                     113      ADD.L       #1,A1           *increment address
00001106  B8C9                     114      CMP         A1,A4           *if A1 > A4
00001108  6E80                     115      BGT         READ_CHAR_LOOP  *begin converting to float    
0000110A  4E75                     116      RTS                         *loop back to INPUT_START || INPUT_END   
0000110C                           117     
0000110C                           118  TEST
0000110C  23FC 00003000 00000100   119      MOVE.L      #$3000,MEM_START
00001116  23FC 00003300 00000200   120      MOVE.L      #$3300,MEM_END
00001120                           121  READ_MEMORY   
00001120  2479 00000100            122      MOVEA.L     MEM_START,A2    *A2 will be the starting/current address
00001126  2679 00000200            123      MOVEA.L     MEM_END,A3      *A3 will act as the ending address
0000112C                           124      
0000112C                           125  VALIDATE_START_END
0000112C  220A                     126      MOVE.L      A2,D1           *copy start address into D1
0000112E  240B                     127      MOVE.L      A3,D2           *copy end address into D2
00001130  B441                     128      CMP         D1,D2           *compare start and end values
00001132  6700 000A                129      BEQ         EQUAL_ERROR     *Start address is equal to end address
00001136  6D00 0016                130      BLT         SWAP_VALUES     *Start address is larger than end address
0000113A  6000 002E                131      BRA         PRE_READ_MEMORY *begin reading memory
0000113E                           132      
0000113E                           133  EQUAL_ERROR
0000113E  43F9 00003480            134      LEA         M_EQUAL,A1      *load error message
00001144  103C 000E                135      MOVE.B      #14,D0          *display string trap
00001148  4E4F                     136      TRAP        #15             *output error message
0000114A  6000 FEBE                137      BRA         INPUT_START     *restart program (request ui again)
0000114E                           138      
0000114E                           139  SWAP_VALUES
0000114E  2239 00000100            140      MOVE.L      MEM_START,D1    *put starting address in D1
00001154  2439 00000200            141      MOVE.L      MEM_END,D2      *put ending address in D2
0000115A  23C2 00000100            142      MOVE.L      D2,MEM_START    *swap the two values in memory
00001160  23C1 00000200            143      MOVE.L      D1,MEM_END
00001166  2442                     144      MOVEA.L     D2,A2           *A2 will be the starting/current address
00001168  2641                     145      MOVEA.L     D1,A3           *A3 will act as the ending address
0000116A                           146  PRE_READ_MEMORY
0000116A  2C4A                     147      MOVE.L      A2,A6           *A6 will act as the current address for Data               
0000116C                           148  READ_MEMORY_LOOP
0000116C  2679 00000200            149      MOVE.L      MEM_END,A3        *put ending address in A3
00001172  B6CA                     150      CMP         A2,A3             *compare the incrementing address and the end address
00001174  6700 0158                151      BEQ         END               *stop if the end address is reached
00001178                           152      
00001178  E05E                     153      ROR         #8,D6               *select correct byte
0000117A  BC3C 001E                154      CMP.B       #30,D6              *see if maximum lines printed
0000117E  6C00 0016                155      BGE         PRESS_TO_CONTINUE
00001182  E15E                     156      ROL         #8,D6
00001184                           157  
00001184                           158      
00001184                           159  READ_MEMORY_CONT                    *continue reading memory (if branched)  
00001184  101A                     160      MOVE.B      (A2)+,D0          *get the value from incrementing address 
00001186  E148                     161      LSL.W       #8,D0             *make room for the next byte of A2
00001188  1012                     162      MOVE.B      (A2),D0          *copy the rest of A2 to D0  
0000118A  538A                     163      SUB.L       #1, A2
0000118C  47F9 00000500            164      LEA         STRING_START,A3   *A3 will act as the string address  
00001192  6000 013A                165      BRA         VERIFY_OPCODE
00001196                           166      
00001196                           167      
00001196                           168          
00001196                           169  
00001196                           170  EFFECTIVE_ADDRESSING
00001196                           171  
00001196                           172      
00001196                           173  PRESS_TO_CONTINUE
00001196  1C3C 0000                174      MOVE.B      #00,D6              *reset counter
0000119A  E19E                     175      ROL.L       #8,D6               *put byte back in place
0000119C  43F9 000034C6            176      LEA         M_PRESS_CONT,A1     *load press key to continue messageu
000011A2  103C 000E                177      MOVE.B      #14,D0              *load into D0
000011A6  4E4F                     178      TRAP        #15                 *display message
000011A8  103C 0005                179      MOVE.B      #5,D0               *read single character from keyboard
000011AC  4E4F                     180      TRAP        #15    
000011AE  6100 00E8                181      BSR         IM_NEW_LINE            *add new line
000011B2  60D0                     182      BRA         READ_MEMORY_CONT    *continue reading loop
000011B4                           183      
000011B4                           184  INCREMENT_LINE
000011B4  E09E                     185      ROR.L       #8,D6               *select correct byte
000011B6  5206                     186      ADD.B       #1,D6               *increment counter
000011B8  E19E                     187      ROL.L       #8,D6               *put byte back in place
000011BA  4E75                     188      RTS 
000011BC                           189      
000011BC                           190  INVALID_OPCODE
000011BC  BC3C 0008                191      CMP.B       #8,D6               *check the loop increment counter
000011C0  6D00 0008                192      BLT         INVALID_OPCODE_CONT *less than long length. continue       
000011C4  6100 000A                193      BSR         PRINT_DATA          *long amount of data. print it.
000011C8  60A2                     194      BRA         READ_MEMORY_LOOP    *read the next byte
000011CA                           195  INVALID_OPCODE_CONT  
000011CA  528A                     196      ADD.L       #1,A2               *increment current address  
000011CC  5206                     197      ADD.B       #1,D6               *increment counter
000011CE  609C                     198      BRA         READ_MEMORY_LOOP    *data cap not reached. read next byte.    
000011D0                           199      
000011D0                           200  PRINT_DATA
000011D0  1C3C 0000                201      MOVE.B      #00,D6              *reset the increment counter
000011D4  6100 0012                202      BSR         PRINT_ADDRESS       *print the data address
000011D8  6100 00D8                203      BSR         TAB                 *insert a space
000011DC  6100 00E2                204      BSR         DATA                *print 'DATA'   
000011E0  61D2                     205      BSR         INCREMENT_LINE      *increment line counter (line was printed)
000011E2  6100 001E                206      BSR         PRINT_DATA_LOOP     *print the data
000011E6  4E75                     207      RTS
000011E8                           208  PRINT_ADDRESS
000011E8  280E                     209      MOVE.L      A6,D4               *put the address in D4
000011EA  4243                     210      CLR         D3                  *counter for long
000011EC  2C4A                     211      MOVE.L      A2, A6
000011EE                           212      
000011EE                           213  PRINT_ADDRESS_LOOP
000011EE  B67C 0004                214      CMP         #4,D3               *if long reached
000011F2  6C00 0082                215      BGE         RETURN_TO_SUBROUTINE *exit loop
000011F6  E19C                     216      ROL.L       #8,D4               *put ending byte at beginning
000011F8  1204                     217      MOVE.B      D4,D1               *put byte in D1 for printing
000011FA  6100 0024                218      BSR         OUTPUT_D1B          *print the first byte of D1
000011FE  5203                     219      ADD.B       #1,D3               *increment D3 (loop counter)
00001200  60EC                     220      BRA         PRINT_ADDRESS_LOOP  *repeat loop         
00001202                           221           
00001202                           222  PRINT_DATA_LOOP
00001202  121E                     223      MOVE.B      (A6)+,D1            *get the data
00001204  1401                     224      MOVE.B      D1,D2               *copy the data to D2
00001206  BDCA                     225      CMP.L       A2,A6               *if current address reached
00001208  6E00 000C                226      BGT         END_PRINT_DATA_LOOP *continue reading addresses 
0000120C                           227                                      *otherwise keep printing the data
0000120C  6100 0012                228      BSR         OUTPUT_D1B          *print byte in D1 in hex
00001210                           229      *---print a space----*
00001210  6100 0094                230      BSR         IM_SPACE               *print a space                                
00001214  60EC                     231      BRA         PRINT_DATA_LOOP     *repeat loop
00001216                           232  
00001216                           233  END_PRINT_DATA_LOOP
00001216  2C4A                     234      MOVE.L      A2,A6               *set new address for data/opcode
00001218  6100 007E                235      BSR         IM_NEW_LINE            *end line
0000121C  6196                     236      BSR         INCREMENT_LINE      *increment line printing counter
0000121E  4E75                     237      RTS                             *repeat loop   
00001220                           238   
00001220                           239  OUTPUT_D1B
00001220                           240      *print the left character
00001220  1401                     241      MOVE.B      D1,D2               *copy D1 to D2
00001222  E809                     242      LSR.B       #4,D1               *get rid of right nibble  
00001224  6100 0052                243      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
00001228  6100 0066                244      BSR         OUTPUT_CHAR         *print the char in D1
0000122C                           245      *print the right character
0000122C  E90A                     246      LSL.B       #4,D2               *get rid of left nibble
0000122E  E80A                     247      LSR.B       #4,D2               *put right nibble in place
00001230  1202                     248      MOVE.B      D2,D1               *put right nibble in D1
00001232  6100 0044                249      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
00001236  6100 0058                250      BSR         OUTPUT_CHAR         *print the char in D1
0000123A  4E75                     251      RTS
0000123C                           252  VALID_OPCODE 
0000123C  548A                     253      ADD.L       #02,A2              *increment the current address because word is valid
0000123E  BC3C 0000                254      CMP.B       #00,D6              *if leftover data not printed
00001242  6700 0004                255      BEQ         PRINT_OPCODE_EA     *print just the opcode
00001246  6188                     256      BSR         PRINT_DATA          *print unreadable data
00001248                           257                                      *and the opcode
00001248                           258  PRINT_OPCODE_EA
00001248  1C3C 0000                259      MOVE.B      #00,D6              *reset the increment counter
0000124C  619A                     260      BSR         PRINT_ADDRESS       *print the data address
0000124E  6100 0062                261      BSR         TAB                 *insert a space
00001252  6100 000E                262      BSR         PRINT_OPCODE        *print out hte opcode and eA
00001256  6100 FF5C                263      BSR         INCREMENT_LINE      *increment line counter (line was printed)
0000125A  6100 003C                264      BSR         IM_NEW_LINE
0000125E  6000 FF0C                265      BRA         READ_MEMORY_LOOP    *read next byte.
00001262                           266      
00001262                           267  
00001262                           268  PRINT_OPCODE
00001262  43F9 00000500            269      LEA         STRING_START,A1     *put the starting address of the string into A1
00001268  103C 000E                270      MOVE.B      #14,D0              *print null terminated string into A
0000126C  4E4F                     271      TRAP        #15                 *output to terminal
0000126E  47F9 00000500            272      lea         STRING_START,A3     *reset the current string pointer
00001274  4E75                     273      RTS
00001276                           274      
00001276                           275      
00001276                           276            
00001276                           277      
00001276                           278  RETURN_TO_SUBROUTINE
00001276  4E75                     279      RTS
00001278                           280    
00001278                           281  CONVERT_TO_ASCII
00001278  B23C 0009                282      CMP.B       #9,D1           *compare value with 9
0000127C  6E00 000C                283      BGT         ALPH_CHAR       *convert to numeric ascii
00001280  6000 0002                284      BRA         NUMERIC_CHAR    *convert to alphabetical ascii
00001284                           285  NUMERIC_CHAR        
00001284  0601 0030                286      ADD.B       #48,D1          *convert to ascii value
00001288  4E75                     287      RTS                         *continue converting
0000128A                           288  ALPH_CHAR
0000128A  0601 0037                289      ADD.B       #55,D1          *convert to ascii value
0000128E  4E75                     290      RTS                         *continue converting            
00001290                           291  OUTPUT_CHAR
00001290  103C 0006                292      MOVE.B      #6,D0           *output whatever's in D1
00001294  4E4F                     293      TRAP        #15
00001296  4E75                     294      RTS
00001298                           295  
00001298                           296  
00001298                           297  IM_NEW_LINE
00001298  43F9 000034E2            298      LEA         M_NEW_LINE,A1      *load new line
0000129E  103C 000E                299      MOVE.B      #14,D0          *load message
000012A2  4E4F                     300      TRAP        #15             *display message
000012A4  4E75                     301      RTS
000012A6                           302  IM_SPACE
000012A6  123C 0020                303      MOVE.B      #32,D1
000012AA  103C 0006                304      MOVE.B      #6,D0
000012AE  4E4F                     305      TRAP        #15
000012B0  4E75                     306      RTS
000012B2                           307  TAB
000012B2  43F9 000034C1            308      LEA         M_TAB,A1
000012B8  103C 000E                309      MOVE.B      #14,D0
000012BC  4E4F                     310      TRAP        #15
000012BE  4E75                     311      RTS
000012C0                           312  DATA
000012C0  43F9 000034B8            313      LEA         M_DATA,A1
000012C6  103C 000E                314      MOVE.B      #14,D0
000012CA  4E4F                     315      TRAP        #15
000012CC  4E75                     316      RTS
000012CE                           317      
000012CE                           318  END
000012CE                           319  
000012CE                           320  
000012CE                           321  
000012CE                           322  
000012CE                           323  
000012CE                           324  
000012CE                           325  
000012CE                           326  
000012CE                           327  
000012CE                           328  
000012CE                           329  
000012CE                           330  
000012CE                           331  
000012CE                           332  
000012CE                           333  
000012CE                           334  
000012CE                           335  
000012CE                           336  
000012CE                           337  
000012CE                           338  
000012CE                           339  
000012CE                           340  
000012CE                           341  
000012CE                           342  
000012CE                           343  
000012CE                           344  -------------------- end include --------------------
000012CE                           345      INCLUDE         'OP_jumpTable.X68'
000012CE                           346  VERIFY_OPCODE
000012CE  3200                     347      MOVE.W  D0,D1   *Copy instruction for modification
000012D0                           348      
000012D0                           349      **ISOLATE FIRST FOUR BITS**                                             
000012D0  E849                     350      LSR.W   #4,D1       *Shift left four bits
000012D2  E049                     351      LSR.W   #8,D1       *Shift left again (12 shifts total)
000012D4                           352      
000012D4  4242                     353      CLR     D2
000012D6  1401                     354      MOVE.B  D1,D2
000012D8                           355      
000012D8  41F9 000012E6            356      LEA     OP_JTAB,A0 
000012DE  C5FC 0006                357      MULS    #6, D2
000012E2  4EB0 2000                358      JSR     0(A0,D2)
000012E6                           359  
000012E6                           360  
000012E6                           361  
000012E6  4EF9 00001348            362  OP_JTAB    JMP     OP0000      *ADDI
000012EC  4EF9 00001358            363      JMP     OP0001      *MOVE.B
000012F2  4EF9 00001368            364      JMP     OP0010      *MOVE.W, MOVEA(WORD)
000012F8  4EF9 0000136C            365      JMP     OP0011      *MOVE.L, MOVEA(LONG) 
000012FE  4EF9 000013A4            366      JMP     OP0100      *NOP, MOVEM, LEA, CLR, JSR, RTS
00001304  4EF9 0000144C            367      JMP     OP0101      *ADDQ
0000130A  4EF9 0000145C            368      JMP     OP0110      *Bcc
00001310  4EF9 00001476            369      JMP     OP0111      *MOVEQ
00001316  4EF9 00001486            370      JMP     OP1000      *DIVU, OR
0000131C  4EF9 000014BC            371      JMP     OP1001      *SUB
00001322  4EF8 11BC                372      JMP     INVALID_OPCODE
00001326  4EF9 000014CC            373      JMP     OP1011      *CMP
0000132C  4EF9 000014DC            374      JMP     OP1100      *MULS, AND
00001332  4EF9 00001514            375      JMP     OP1101      *ADD, ADDA
00001338  4EF9 0000154C            376      JMP     OP1110      *LSR, LSL, ASR, ASL, ROL, ROR
0000133E  4EF8 11BC                377      JMP     INVALID_OPCODE
00001342                           378  
00001342                           379  
00001342                           380      
00001342  6000 FE78                381      BRA    INVALID_OPCODE     *Subroutine to store as non-decodable
00001346  4E75                     382      RTS
00001348                           383  
00001348                           384  OP0000
00001348                           385      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
00001348                           386      *BEGIN OUTPUT
00001348                           387      
00001348                           388      *MOVE.W  ADDI,(A3)+      *Load 'ADDI' to Add Reg 1 and then increment
00001348  49F9 000034E5            389      LEA     ADDI, A4
0000134E  4EB9 0000162E            390      JSR     PASTE_4
00001354  6000 04B2                391      BRA     EA_ADDI         *Branch to EA analysis of the command
00001358                           392  
00001358                           393  OP0001  *SINGLE CODE, DO NOT NEED FURTHER CHECKING 
00001358                           394          *BEGIN OUTPUT
00001358                           395      
00001358                           396      *MOVE.L  MOVE,(A3)+     *Load 'MOVE.B' to Add Reg 1 and then increment
00001358  49F9 000034EA            397      LEA     MOVE, A4
0000135E  4EB9 0000162E            398      JSR     PASTE_4
00001364  6000 02E2                399      BRA     EA_MOVE        *Branch to EA analysis of the command
00001368                           400  
00001368                           401  OP0010
00001368                           402      *Identical to OP0011 for these purposes, branch there
00001368  6000 0002                403      BRA OP0011
0000136C                           404  
0000136C                           405  OP0011
0000136C                           406      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
0000136C                           407  
0000136C                           408      **ISOLATE NEXT BITS TO CHECK**
0000136C  3200                     409      MOVE.W  D0,D1           *Copy instruction for modification
0000136E  EF49                     410      LSL.W   #7,D1           *Shift left 7 bits 
00001370  EA49                     411      LSR.W   #5,D1           *Rotate right 5 bits
00001372  E049                     412      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001374  0241 000F                413      ANDI.W  #$00F,D1        *Keep 3 bits
00001378                           414      
00001378  B27C 0001                415      CMP     #%001,D1      *Check for 0010 to eliminate CLR
0000137C  6700 0016                416      BEQ     _MOVEA          *If equal, branch to CLR
00001380                           417      
00001380  6000 0002                418      BRA     _MOVE
00001384                           419      
00001384                           420  _MOVE
00001384                           421      *MOVE.L  MOVE,(A3)+     *Load 'MOVE.L' to Add Reg 1 and then increment  
00001384  49F9 000034EA            422      LEA     MOVE, A4
0000138A  4EB9 0000162E            423      JSR     PASTE_4
00001390  6000 02B6                424      BRA     EA_MOVE        *Branch to EA analysis of the command
00001394                           425  
00001394                           426  _MOVEA
00001394                           427      *MOVE.L  MOVEA,(A3)+    *Load 'MOVEA.L' to Add Reg 1 and then increment
00001394  49F9 000034EF            428      LEA     MOVEA, A4
0000139A  4EB9 00001638            429      JSR     PASTE_5
000013A0  6000 031A                430      BRA     EA_MOVEA       *Branch to EA analysis of the command
000013A4                           431  
000013A4                           432  OP0100
000013A4                           433      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000013A4  3200                     434       MOVE.W  D0,D1           *Copy instruction for modification
000013A6                           435      
000013A6  B27C 4E71                436      CMP     #%0100111001110001,D1   *Check to eliminate NOP
000013AA  6700 0070                437      BEQ     _NOP
000013AE  B27C 4E75                438      CMP     #%0100111001110101,D1   *Check to eliminate RTS
000013B2  6700 0078                439      BEQ     _RTS
000013B6                           440      
000013B6  EC49                     441      LSR.W   #6,D1                   *Shift right 6 bits
000013B8  B27C 013A                442      CMP     #%0000000100111010,D1   *Check to eliminate RTS
000013BC  6700 004E                443      BEQ     _JSR
000013C0                           444      
000013C0                           445      **ISOLATE 4 BITS TO CHECK CLR**    
000013C0  3200                     446      MOVE.W  D0,D1           *Copy instruction for modification
000013C2  E949                     447      LSL.W   #4,D1           *Shift left 7 bits 
000013C4  E849                     448      LSR.W   #4,D1           *Rotate right 5 bits
000013C6  E049                     449      LSR.W   #8,D1           *Shift right again (13 shifts total)
000013C8  0241 000F                450      ANDI.W  #$000F,D1       *Keep 4 bits
000013CC                           451      
000013CC  B27C 0002                452      CMP     #%0010,D1       *Check for 0010 to eliminate CLR
000013D0  6700 001A                453      BEQ     _CLR            *If equal, branch to CLR
000013D4                           454  
000013D4                           455      **ISOLATE 3 BITS TO CHECK MOVEM**
000013D4  3200                     456      MOVE.W  D0,D1           *Copy instruction for modification
000013D6  ED49                     457      LSL.W   #6,D1           *Shift left 6 bits 
000013D8  EA49                     458      LSR.W   #5,D1           *Shift right 5 bits
000013DA  E049                     459      LSR.W   #8,D1           *Shift right again (13 shifts total)
000013DC  0241 000F                460      ANDI.W  #$00F,D1        *Keep 3 bits
000013E0                           461      
000013E0  B27C 0001                462      CMP     #%001,D1
000013E4  6700 0056                463      BEQ     _MOVEM
000013E8                           464      
000013E8  6000 0012                465      BRA     _LEA            *Else by process of elimination it must be LEA   
000013EC                           466      
000013EC                           467  _CLR
000013EC                           468      *MOVE.W  OPCLR,(A3)+     *Load 'CLR' to Add Reg 1 and then increment
000013EC  49F9 000034F5            469      LEA     OPCLR, A4
000013F2  4EB9 00001626            470      JSR     PASTE_3
000013F8  6000 05CE                471      BRA     EA_CLR          *Branch to EA analysis of the command
000013FC                           472  
000013FC                           473  _LEA
000013FC                           474      *MOVE.W  OPLEA,(A3)+     *Load 'LEA' to Add Reg 1 and then increment
000013FC  49F9 000034F9            475      LEA     OPLEA, A4
00001402  4EB9 00001626            476      JSR     PASTE_3
00001408  6000 0566                477      BRA     EA_LEA          *Branch to EA analysis of the command
0000140C                           478  
0000140C                           479  _JSR
0000140C                           480      *MOVE.W  OPJSR,(A3)+     *Load 'JSR' to Add Reg 1 and then increment
0000140C  49F9 000034FD            481      LEA     OPJSR, A4
00001412  4EB9 00001626            482      JSR     PASTE_3
00001418  6000 0706                483      BRA     EA_JSR          *Branch to EA analysis of the command
0000141C                           484  
0000141C                           485  _NOP
0000141C                           486      *MOVE.W  OPNOP,(A3)+     *Load 'NOP' to Add Reg 1 and then increment
0000141C  49F9 00003501            487      LEA     OPNOP, A4
00001422  4EB9 00001626            488      JSR     PASTE_3
00001428  6000 FE12                489      BRA     VALID_OPCODE          *Branch to EA analysis of the command      
0000142C                           490  
0000142C                           491  _RTS
0000142C                           492      *MOVE.W  OPRTS,(A3)+     *Load 'RTS' to Add Reg 1 and then increment
0000142C  49F9 00003505            493      LEA     OPRTS, A4
00001432  4EB9 00001626            494      JSR     PASTE_3
00001438  6000 FE02                495      BRA     VALID_OPCODE          *Branch to EA analysis of the command      
0000143C                           496  
0000143C                           497  _MOVEM
0000143C                           498      *MOVE.W  MOVEM,(A3)+     *Load 'MOVEM' to Add Reg 1 and then increment
0000143C  49F9 00003509            499      LEA     MOVEM, A4
00001442  4EB9 00001638            500      JSR     PASTE_5
00001448  6000 0714                501      BRA     EA_MOVEM        *Branch to EA analysis of the command
0000144C                           502      
0000144C                           503  OP0101
0000144C                           504      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
0000144C                           505      *BEGIN OUTPUT
0000144C                           506      
0000144C                           507      *MOVE.W  ADDQ,(A3)+      *Load 'AddQ' to Add Reg 1 and then increment
0000144C  49F9 0000350F            508      LEA     ADDQ, A4
00001452  4EB9 0000162E            509      JSR     PASTE_4
00001458  6000 0410                510      BRA     EA_ADDQ         *Branch to EA analysis of the command
0000145C                           511      
0000145C                           512  OP0110
0000145C                           513      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
0000145C                           514      *BEGIN OUTPUT
0000145C  3200                     515      MOVE.W  D0,D1
0000145E  E949                     516      LSL.W   #4,D1
00001460  E849                     517      LSR.W   #4,D1
00001462  E049                     518      LSR.W   #8,D1
00001464  B23C 0000                519      CMP.B   #0,D1
00001468  6700 FD52                520      BEQ     INVALID_OPCODE
0000146C                           521      
0000146C  16F9 00003514            522      MOVE.B  Bcc,(A3)+       *Load 'Bcc' to Add Reg 1 and then increment 
00001472  6000 0688                523      BRA     EA_BCC          *Branch to EA analysis of the command
00001476                           524  
00001476                           525  OP0111
00001476                           526      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
00001476                           527      *BEGIN OUTPUT
00001476                           528      
00001476                           529      *MOVE.W  MOVEQ,(A3)+     *Load 'MOVEQ' to Add Reg 1 and then increment
00001476  49F9 00003516            530      LEA     MOVEQ, A4
0000147C  4EB9 00001638            531      JSR     PASTE_5
00001482  6000 0290                532      BRA     EA_MOVEQ        *Branch to EA analysis of the command
00001486                           533      
00001486                           534  OP1000
00001486                           535      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
00001486                           536      
00001486                           537      **ISOLATE NEXT BITS TO CHECK**
00001486  3200                     538      MOVE.W  D0,D1           *Copy instruction for modification
00001488  EF49                     539      LSL.W   #7,D1           *Shift left 7 bits 
0000148A  EA49                     540      LSR.W   #5,D1           *Rotate right 5 bits
0000148C  E049                     541      LSR.W   #8,D1           *Shift right again (13 shifts total)
0000148E  0241 000F                542      ANDI.W  #$00F,D1        *Keep 3 bits
00001492                           543            
00001492  B27C 0003                544      CMP     #%011,D1    *Check for 011 to eliminate DIVU
00001496  6700 0006                545      BEQ     _DIVU        *If equal, branch to DIVU
0000149A  6000 0012                546      BRA     _OR          *Else must be OR, branch
0000149E                           547      
0000149E                           548  _DIVU
0000149E                           549      *MOVE.W  DIVU,(A3)+      *Load 'DIVU' to Add Reg 1 and then increment
0000149E  49F9 0000351C            550      LEA     DIVU, A4
000014A4  4EB9 0000162E            551      JSR     PASTE_4
000014AA  6000 0472                552      BRA     EA_MULS         *Branch to EA analysis of the command
000014AE                           553  
000014AE                           554  _OR
000014AE                           555      *MOVE.W  OR,(A3)+        *Load 'OR' to Add Reg 1 and then increment
000014AE  49F9 00003521            556      LEA     OR, A4
000014B4  16DC                     557      MOVE.B  (A4)+, (A3)+
000014B6  16DC                     558      MOVE.B  (A4)+, (A3)+
000014B8  6000 0294                559      BRA     EA_ADD           *Branch to EA analysis of the command
000014BC                           560  
000014BC                           561  OP1001
000014BC                           562      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014BC                           563      *BEGIN OUTPUT
000014BC                           564      
000014BC                           565      *MOVE.W  OPSUB,(A3)+     *Load 'SUB' to Add Reg 1 and then increment
000014BC  49F9 00003524            566      LEA     OPSUB, A4
000014C2  4EB9 00001626            567      JSR     PASTE_3
000014C8  6000 0284                568      BRA     EA_ADD          *Branch to EA analysis of the command
000014CC                           569  
000014CC                           570  OP1011
000014CC                           571      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014CC                           572      *BEGIN OUTPUT
000014CC                           573      *MOVE.W  CMP,(A3)+     *Load 'CMP' to Add Reg 1 and then increment
000014CC  49F9 00003528            574      LEA     CMP, A4
000014D2  4EB9 00001626            575      JSR     PASTE_3
000014D8  6000 05C8                576      BRA     EA_CMP          *Branch to EA analysis of the command
000014DC                           577  
000014DC                           578  OP1100
000014DC                           579      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000014DC                           580  
000014DC  3200                     581      MOVE.W  D0,D1           *Copy instruction for modification
000014DE  EF49                     582      LSL.W   #7,D1           *Shift left 7 bits 
000014E0  EA49                     583      LSR.W   #5,D1           *Rotate right 5 bits
000014E2  E049                     584      LSR.W   #8,D1           *Shift right again (13 shifts total)
000014E4  0241 000F                585      ANDI.W  #$00F,D1        *Keep 3 bits
000014E8                           586           
000014E8  B27C 0007                587      CMP     #%111,D1       *Check for 111 to eliminate MULS
000014EC  6700 0006                588      BEQ     _MULS           *If equal, branch to MULS
000014F0  6000 0012                589      BRA     _AND            *Else must be AND, branch
000014F4                           590      
000014F4                           591  _MULS
000014F4                           592      *MOVE.W  MULS,(A3)+      *Load 'MULS' to Add Reg 1 and then increment
000014F4  49F9 0000352C            593      LEA     MULS, A4
000014FA  4EB9 0000162E            594      JSR     PASTE_4
00001500  6000 041C                595      BRA     EA_MULS         *Branch to EA analysis of the command
00001504                           596  
00001504                           597  _AND
00001504                           598      *MOVE.W  AND,(A3)+       *Load 'AND' to Add Reg 1 and then increment
00001504  49F9 00003531            599      LEA     AND, A4
0000150A  4EB9 00001626            600      JSR     PASTE_3
00001510  6000 023C                601      BRA     EA_ADD          *Branch to EA analysis of the command
00001514                           602      
00001514                           603  OP1101
00001514                           604      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS  
00001514                           605  
00001514  3200                     606      MOVE.W  D0,D1           *Copy instruction for modification
00001516  E149                     607      LSL.W   #8,D1           *Shift left 7 bits 
00001518  EA49                     608      LSR.W   #5,D1           *Rotate left 5 bits
0000151A  E049                     609      LSR.W   #8,D1           *Shift left again (13 shifts total)
0000151C  0241 000F                610      ANDI.W  #$0F,D1         *Keep 3 bits
00001520                           611                
00001520  B27C 0003                612      CMP     #%11,D1         *Check for 011 to eliminate ADDA (Size dependant)
00001524  6700 0016                613      BEQ     _ADDA           *If equal, branch to ADDA
00001528  6000 0002                614      BRA     _ADD            *Else must be ADD, branch
0000152C                           615      
0000152C                           616  _ADD
0000152C                           617      *MOVE.W  ADD,(A3)+       *Load 'ADD' to Add Reg 1 and then increment
0000152C  49F9 00003535            618      LEA     ADD, A4
00001532  4EB9 00001626            619      JSR     PASTE_3
00001538  6000 0214                620      BRA     EA_ADD          *Branch to EA analysis of the command
0000153C                           621  
0000153C                           622  _ADDA
0000153C                           623      *MOVE.W  ADDA,(A3)+      *Load 'ADDA' to Add Reg 1 and then increment
0000153C  49F9 00003539            624      LEA     ADDA, A4
00001542  4EB9 0000162E            625      JSR     PASTE_4
00001548  6000 037A                626      BRA     EA_ADDA         *Branch to EA analysis of the command
0000154C                           627      
0000154C                           628  OP1110
0000154C                           629      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
0000154C                           630        
0000154C  3200                     631      MOVE.W  D0,D1           *Copy instruction for modification
0000154E  EF49                     632      LSL.W   #7,D1           *Shift left 7 bits 
00001550  EA49                     633      LSR.W   #5,D1           *Rotate right 5 bits
00001552  E049                     634      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001554  0241 000F                635      ANDI.W  #$00F,D1        *Keep 3 bits
00001558                           636                    
00001558  B27C 0001                637      CMP     #%001,D1        *Check for 001 to eliminate LSd instructions
0000155C  6700 001C                638      BEQ     _LSd            *If equal, branch to LSd to determine LSR or LSL
00001560                           639  
00001560                           640      **ELSE CONTINUE CHECKING**
00001560  3200                     641      MOVE.W  D0,D1           *Copy instruction for modification
00001562  E149                     642      LSL.W   #8,D1          *Shift left 7 bits
00001564  E749                     643      LSL.W   #3,D1 
00001566  EA49                     644      LSR.W   #5,D1           *Rotate left 5 bits
00001568  E049                     645      LSR.W   #8,D1           *Shift left again (13 shifts total)
0000156A  0241 000F                646      ANDI.W  #$0F,D1         *Keep 2 bits
0000156E                           647      
0000156E                           648      **BEGIN ELIMINATION 'IF/ELSE' STATEMENTS                   
0000156E  B27C 0000                649      CMP     #%00,D1         *Check for 00 to eliminate ASd
00001572  6700 003E                650      BEQ     _ASd            *If equal, branch to ASd to determine ASR or ASL
00001576  6000 0074                651      BRA     _ROd            *Else must be a ROd instruction, branch to determine
0000157A                           652      
0000157A                           653  _LSd   
0000157A                           654   
0000157A  3200                     655      MOVE.W  D0,D1           *Copy instruction for modification
0000157C  EF49                     656      LSL.W   #7,D1           *Shift left 7 bits 
0000157E  EE49                     657      LSR.W   #7,D1           *Rotate right 5 bits
00001580  E049                     658      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001582  0241 000F                659      ANDI.W  #$F,D1          *Keep 3 bits
00001586                           660  
00001586  B27C 0000                661      CMP     #%0,D1        *Check for 011 to eliminate LSR
0000158A  6700 0016                662      BEQ     _LSR            *If equal, branch to LSR
0000158E  6000 0002                663      BRA     _LSL            *Else must be LSL, branch
00001592                           664  
00001592                           665  _LSL    
00001592                           666      *MOVE.W  LSL,(A3)+       *Load 'LSL' to Add Reg 1 and then increment
00001592  49F9 0000353E            667      LEA     LSL, A4
00001598  4EB9 00001626            668      JSR     PASTE_3
0000159E  6000 046E                669      BRA     EA_LSD         *Branch to EA analysis of the command
000015A2                           670  
000015A2                           671  _LSR
000015A2                           672      *MOVE.W  LSR,(A3)+       *Load 'LSR' to Add Reg 1 and then increment
000015A2  49F9 00003542            673      LEA     LSR, A4
000015A8  4EB9 00001626            674      JSR     PASTE_3
000015AE  6000 045E                675      BRA     EA_LSD          *Branch to EA analysis of the command
000015B2                           676  
000015B2                           677  _ASd
000015B2                           678  
000015B2  3200                     679      MOVE.W  D0,D1           *Copy instruction for modification
000015B4  E149                     680      LSL.W   #8,D1           *Shift left 7 bits 
000015B6  E549                     681      LSL.W   #2,D1           *Shift left 7 bits
000015B8  EA49                     682      LSR.W   #5,D1           *Rotate right 5 bits
000015BA  E049                     683      LSR.W   #8,D1           *Shift right again (13 shifts total)
000015BC  0241 000F                684      ANDI.W  #$00F,D1        *Keep 3 bits
000015C0                           685     
000015C0  B27C 0000                686      CMP     #%000,D1        *Check for 000 to eliminate ASR
000015C4  6700 0016                687      BEQ     _ASR            *If equal, branch to ASR
000015C8  6000 0002                688      BRA     _ASL            *Else must be ASL, branch
000015CC                           689  
000015CC                           690  _ASL    
000015CC                           691      *MOVE.W  ASL,(A3)+       *Load 'ASL' to Add Reg 1 and then increment
000015CC  49F9 00003546            692      LEA     ASL, A4
000015D2  4EB9 00001626            693      JSR     PASTE_3
000015D8  6000 0434                694      BRA     EA_LSD          *Branch to EA analysis of the command
000015DC                           695  
000015DC                           696  _ASR
000015DC                           697      *MOVE.W  ASR,(A3)+       *Load 'ASR' to Add Reg 1 and then increment
000015DC  49F9 0000354A            698      LEA     ASR, A4
000015E2  4EB9 00001626            699      JSR     PASTE_3
000015E8  6000 0424                700      BRA     EA_LSD          *Branch to EA analysis of the command
000015EC                           701  
000015EC                           702  _ROd
000015EC                           703  
000015EC  3200                     704      MOVE.W  D0,D1           *Copy instruction for modification
000015EE  E549                     705      LSL.W   #2,D1           *Shift left 7 bits
000015F0  E149                     706      LSL.W   #8,D1           *Shift left 7 bits 
000015F2  EA49                     707      LSR.W   #5,D1           *Rotate right 5 bits
000015F4  E049                     708      LSR.W   #8,D1           *Shift right again (13 shifts total)
000015F6  0241 000F                709      ANDI.W  #$00F,D1        *Keep 3 bits
000015FA                           710  
000015FA                           711      **BEGIN ELIMINATION 'IF/ELSE' STATEMENTS   
000015FA  B27C 0003                712      CMP     #%011,D1        *Check for 011 to eliminate ROR
000015FE  6700 0016                713      BEQ     _ROR            *If equal, branch to ROR
00001602  6000 0002                714      BRA     _ROL            *Else must be ROL, branch
00001606                           715      
00001606                           716  _ROL    
00001606                           717      *MOVE.W  ROL,(A3)+       *Load 'ROL' to Add Reg 1 and then increment
00001606  49F9 0000354E            718      LEA     ROL, A4
0000160C  4EB9 00001626            719      JSR     PASTE_3
00001612  6000 03FA                720      BRA     EA_LSD          *Branch to EA analysis of the command
00001616                           721  
00001616                           722  _ROR
00001616                           723      *MOVE.W  ROR,(A3)+       *Load 'ROR' to Add Reg 1 and then increment
00001616  49F9 00003552            724      LEA     ROR, A4
0000161C  4EB9 00001626            725      JSR     PASTE_3
00001622  6000 03EA                726      BRA     EA_LSD          *Branch to EA analysis of the command
00001626                           727      
00001626                           728  PASTE_3
00001626  16DC                     729      MOVE.B  (A4)+, (A3)+
00001628  16DC                     730      MOVE.B  (A4)+, (A3)+
0000162A  16DC                     731      MOVE.B  (A4)+, (A3)+
0000162C  4E75                     732      RTS
0000162E                           733  
0000162E                           734  PASTE_4
0000162E  16DC                     735      MOVE.B  (A4)+, (A3)+
00001630  16DC                     736      MOVE.B  (A4)+, (A3)+
00001632  16DC                     737      MOVE.B  (A4)+, (A3)+
00001634  16DC                     738      MOVE.B  (A4)+, (A3)+
00001636  4E75                     739      RTS
00001638                           740  
00001638                           741  PASTE_5
00001638  16DC                     742      MOVE.B  (A4)+, (A3)+
0000163A  16DC                     743      MOVE.B  (A4)+, (A3)+
0000163C  16DC                     744      MOVE.B  (A4)+, (A3)+
0000163E  16DC                     745      MOVE.B  (A4)+, (A3)+
00001640  16DC                     746      MOVE.B  (A4)+, (A3)+
00001642  4E75                     747      RTS
00001644                           748  
00001644  FFFF FFFF                749      SIMHALT
00001648                           750  
00001648                           751  
00001648                           752  
00001648                           753  
00001648                           754  
00001648                           755  -------------------- end include --------------------
00001648                           756      INCLUDE         'EFFECTIVE_ADDRESSES.X68'
00001648                           757  
00001648                           758      *EXAMPLE, MOVE A HEX CODE INTO D6
00001648                           759      *CALL THE CORRESPONDING EA CODE
00001648                           760      *MOVE.W     #$2E7C, D6
00001648                           761      *BRA         EA_MOVE
00001648                           762      *END EXAMPLE
00001648                           763      
00001648                           764  EA_MOVE      *1 invalid; done
00001648  3E00                     765      MOVE.W      D0, D7 *DO THIS AT THE BEGGINING OF EVERY EA 
0000164A                           766      
0000164A  3807                     767      MOVE.W      D7, D4      *
0000164C  E04C                     768      LSR.W       #8, D4      *
0000164E  E84C                     769      LSR.W       #4, D4      *D4 = SIZE
00001650  4EB9 00001D92            770      JSR GET_SIZE
00001656                           771      
00001656  3807                     772      MOVE.W      D7, D4      *
00001658  E14C                     773      LSL.W       #8, D4      *
0000165A  E54C                     774      LSL.W       #2, D4
0000165C  E04C                     775      LSR.W       #8, D4      *
0000165E  EA4C                     776      LSR.W       #5, D4      *D4 = <0000 0000> D4 = SOURCE MODE
00001660                           777      
00001660  3A07                     778      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001662  E14D                     779      LSL.W       #8, D5  
00001664  EB4D                     780      LSL.W       #5, D5      *
00001666  E04D                     781      LSR.W       #8, D5
00001668  EA4D                     782      LSR.W       #5, D5      *D5 = SOURCE REGISTER
0000166A                           783      
0000166A  4EB9 00001E88            784      JSR         MODE_CHOOSER
00001670  41F9 00001CDE            785      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001676  C9FC 0006                786      MULS        #6, D4          *GET JUMP
0000167A  4EB0 4000                787      JSR         0(A0, D4)       *JUMP
0000167E  4EB9 00001EFA            788      JSR COMMA
00001684  4EB9 00001F5C            789      JSR SPACE
0000168A  3807                     790      MOVE.W      D7, D4      *
0000168C  EF4C                     791      LSL.W       #7, D4      *
0000168E  EE4C                     792      LSR.W       #7, D4      *
00001690  EC4C                     793      LSR.W       #6, D4      *D4 = DESTINATION MODE
00001692  4EB9 00001C54            794      JSR         MOVE_ERROR_CHECK 
00001698                           795      
00001698  3A07                     796      MOVE.W      D7, D5      *
0000169A  E94D                     797      LSL.W       #4, D5      *
0000169C  E04D                     798      LSR.W       #8, D5      *
0000169E  EA4D                     799      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
000016A0                           800      
000016A0  4EB9 00001E88            801      JSR         MODE_CHOOSER
000016A6  41F9 00001CDE            802      LEA         MODE_JUMP, A0   *LOAD MODE JUMP
000016AC  C9FC 0006                803      MULS        #6, D4          *GET JUMP
000016B0  4EB0 4000                804      JSR         0(A0, D4)       *JUMP
000016B4  16BC 0000                805      MOVE.B      #00, (A3) 
000016B8  6000 FB82                806      BRA         VALID_OPCODE
000016BC                           807  EA_MOVEA        *0 invalid
000016BC  3E00                     808      MOVE.W      D0, D7
000016BE                           809  
000016BE  3807                     810      MOVE.W      D7, D4      *GETTING SIZE
000016C0  E04C                     811      LSR.W       #8, D4      *
000016C2  E84C                     812      LSR.W       #4, D4      *SHIFT 12 BITS RIGHT
000016C4  4EB9 00001D92            813      JSR         GET_SIZE    *D4 = SIZE
000016CA                           814      
000016CA  3807                     815      MOVE.W      D7, D4      *GETTING SOURCE MODE
000016CC  E14C                     816      LSL.W       #8, D4      *
000016CE  E54C                     817      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
000016D0  E04C                     818      LSR.W       #8, D4      *
000016D2  EA4C                     819      LSR.W       #5, D4      *D4 = SOURCE MODE
000016D4                           820  
000016D4  3A07                     821      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
000016D6  E14D                     822      LSL.W       #8, D5      *
000016D8  EB4D                     823      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
000016DA  E04D                     824      LSR.W       #8, D5      *
000016DC  EA4D                     825      LSR.W       #5, D5      *D5 = SOURCE REGISTER
000016DE                           826      
000016DE  4EB9 00001E88            827      JSR         MODE_CHOOSER  *INCASE MODE IS $111
000016E4  41F9 00001CDE            828      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
000016EA  C9FC 0006                829      MULS        #6, D4        *GET JUMP
000016EE  4EB0 4000                830      JSR         0(A0, D4)     *JUMP
000016F2  4EB9 00001EFA            831      JSR         COMMA
000016F8  4EB9 00001F5C            832      JSR         SPACE
000016FE  3A07                     833      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
00001700  E94D                     834      LSL.W       #4, D5      *
00001702  E04D                     835      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
00001704  EA4D                     836      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
00001706                           837      
00001706  4EB9 00001D1C            838      JSR         ADDR_1
0000170C  16BC 0000                839      MOVE.B      #00, (A3)
00001710  6000 FB2A                840      BRA         VALID_OPCODE
00001714                           841  EA_MOVEQ        *0 invalid
00001714  3E00                     842      MOVE.W      D0, D7
00001716                           843  
00001716  4EB9 00001F5C            844      JSR SPACE
0000171C  4EB9 00001F02            845      JSR POUND
00001722  4EB9 00001F64            846      JSR CASH
00001728  6100 0782                847      BSR OUTPUT_HEX    
0000172C  4EB9 00001EFA            848      JSR COMMA
00001732  4EB9 00001F5C            849      JSR SPACE
00001738  3A07                     850      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
0000173A  E94D                     851      LSL.W       #4, D5      *
0000173C  E04D                     852      LSR.W       #8, D5      *
0000173E  EA4D                     853      LSR.W       #5, D5      * D5 = DESTINATION REGISTER
00001740                           854      
00001740  4EB9 00001D0E            855      JSR         DATA_0
00001746  16BC 0000                856      MOVE.B      #00, (A3)
0000174A  6000 FAF0                857      BRA         VALID_OPCODE
0000174E                           858  EA_ADD          *3 invalid; done
0000174E                           859  
0000174E  3E00                     860      MOVE.W      D0, D7
00001750                           861  
00001750  3807                     862      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
00001752  EF4C                     863      LSL.W       #7, D4      * 
00001754  EE4C                     864      LSR.W       #7, D4      *
00001756  EC4C                     865      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
00001758  4EB9 00001DD4            866      JSR         GET_OPMODE_MATH *PRINTS THE SIZE
0000175E                           867  
0000175E  B83C 0003                868      CMP.B       #3, D4
00001762  6D00 000A                869      BLT         DN_VERSION
00001766  B83C 0003                870      CMP.B       #3, D4
0000176A  6E00 004C                871      BGT         EA_VERSION
0000176E                           872  DN_VERSION *EA IS SOURCE, REGISTER IS DESTINATION <EA> + DN -> DN
0000176E  3807                     873      MOVE.W      D7, D4      
00001770  E14C                     874      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001772  E54C                     875      LSL.W       #2, D4
00001774  E04C                     876      LSR.W       #8, D4      *
00001776  EA4C                     877      LSR.W       #5, D4      *D4 = EA MODE
00001778                           878      
00001778  3A07                     879      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
0000177A  E14D                     880      LSL.W       #8, D5  
0000177C  EB4D                     881      LSL.W       #5, D5      *
0000177E  E04D                     882      LSR.W       #8, D5
00001780  EA4D                     883      LSR.W       #5, D5      * D5 = EA REGISTER
00001782                           884      
00001782  4EB9 00001E88            885      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001788  41F9 00001CDE            886      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
0000178E  C9FC 0006                887      MULS        #6, D4          *GET JUMP
00001792  4EB0 4000                888      JSR         0(A0, D4)       *JUMP
00001796                           889          
00001796  4EB9 00001EFA            890      JSR         COMMA
0000179C  4EB9 00001F5C            891      JSR         SPACE
000017A2                           892      
000017A2  3A07                     893      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
000017A4  E94D                     894      LSL.W       #4, D5      *
000017A6  E04D                     895      LSR.W       #8, D5      *
000017A8  EA4D                     896      LSR.W       #5, D5      *D5 DESTINATION REGISTER
000017AA                           897      
000017AA  4EB9 00001D0E            898      JSR         DATA_0
000017B0  16BC 0000                899      MOVE.B      #00, (A3)
000017B4  6000 FA86                900      BRA         VALID_OPCODE
000017B8                           901  EA_VERSION
000017B8  3A07                     902      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
000017BA  E94D                     903      LSL.W       #4, D5      *
000017BC  E04D                     904      LSR.W       #8, D5      *
000017BE  EA4D                     905      LSR.W       #5, D5      *D5 DESTINATION REGISTER
000017C0  4EB9 00001D0E            906      JSR         DATA_0
000017C6                           907      
000017C6  4EB9 00001EFA            908      JSR         COMMA
000017CC  4EB9 00001F5C            909      JSR         SPACE
000017D2                           910      
000017D2  3807                     911      MOVE.W      D7, D4      
000017D4  E14C                     912      LSL.W       #8, D4      *LEFT 10; RIGHT 13
000017D6  E54C                     913      LSL.W       #2, D4
000017D8  E04C                     914      LSR.W       #8, D4      *
000017DA  EA4C                     915      LSR.W       #5, D4      *D4 = EA MODE
000017DC                           916      
000017DC  3A07                     917      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000017DE  E14D                     918      LSL.W       #8, D5  
000017E0  EB4D                     919      LSL.W       #5, D5      *
000017E2  E04D                     920      LSR.W       #8, D5
000017E4  EA4D                     921      LSR.W       #5, D5      * D5 = EA REGISTER
000017E6                           922      
000017E6                           923      *the only way there could be an error is if 
000017E6                           924      *we are in THIS addressing mo
000017E6                           925      
000017E6  4EB9 00001E88            926      JSR         MODE_CHOOSER    *IF A WORD OR LONG 
000017EC  4EB9 00001C5E            927      JSR         ADD_ERROR_CHECK
000017F2  41F9 00001CDE            928      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000017F8  C9FC 0006                929      MULS        #6, D4          *GET JUMP
000017FC  4EB0 4000                930      JSR         0(A0, D4)       *JUMP
00001800                           931      
00001800  16BC 0000                932      MOVE.B      #00, (A3)
00001804  6000 FA36                933      BRA         VALID_OPCODE
00001808                           934  EA_ADDI  *2 invalid; DONE
00001808  3E00                     935      MOVE.W      D0, D7
0000180A                           936      
0000180A  3807                     937      MOVE.W      D7, D4      *
0000180C  E14C                     938      LSL.W       #8, D4      *
0000180E  E04C                     939      LSR.W       #8, D4      *
00001810  EC4C                     940      LSR.W       #6, D4      *D4 = SIZE
00001812  4EB9 00001E26            941      JSR         GET_SIZE_ADDI
00001818  4EB9 00001F02            942      JSR         POUND
0000181E  4EB9 00001F64            943      JSR         CASH
00001824  6100 0686                944      BSR         OUTPUT_HEX
00001828  4EB9 00001EFA            945      JSR         COMMA
0000182E  4EB9 00001F5C            946      JSR         SPACE
00001834  3807                     947      MOVE.W      D7, D4      
00001836  E14C                     948      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001838  E54C                     949      LSL.W       #2, D4
0000183A  E04C                     950      LSR.W       #8, D4      *
0000183C  EA4C                     951      LSR.W       #5, D4      *D4 = EA MODE
0000183E                           952      
0000183E  3A07                     953      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001840  E14D                     954      LSL.W       #8, D5  
00001842  EB4D                     955      LSL.W       #5, D5      *
00001844  E04D                     956      LSR.W       #8, D5
00001846  EA4D                     957      LSR.W       #5, D5      * D5 = EA REGISTER
00001848                           958      
00001848  4EB9 00001E88            959      JSR         MODE_CHOOSER    *IF A WORD OR LONG  
0000184E  4EB9 00001C78            960      JSR         ADDI_ERROR_CHECK
00001854  41F9 00001CDE            961      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
0000185A  C9FC 0006                962      MULS        #6, D4          *GET JUMP
0000185E  4EB0 4000                963      JSR         0(A0, D4)       *JUMP'
00001862                           964      
00001862  16BC 0000                965      MOVE.B      #00, (A3)
00001866  6000 F9D4                966      BRA         VALID_OPCODE
0000186A                           967  EA_ADDQ     *0 INVALID
0000186A  3E00                     968      MOVE.W      D0, D7
0000186C                           969      
0000186C  3807                     970      MOVE.W      D7, D4
0000186E  E14C                     971      LSL.W       #8, D4
00001870  E04C                     972      LSR.W       #8, D4
00001872  EC4C                     973      LSR.W       #6, D4
00001874  4EB9 00001E26            974      JSR         GET_SIZE_ADDI    *PRINT SIZE
0000187A                           975      
0000187A  3A07                     976      MOVE.W      D7, D5      *GETTING DATA
0000187C  E94D                     977      LSL.W       #4, D5      *SHIFT LEFT 4; RIGHT 13
0000187E  E04D                     978      LSR.W       #8, D5      *
00001880  EA4D                     979      LSR.W       #5, D5      *D5 = DATA
00001882  4EB9 00001E0C            980      JSR         GET_DATA
00001888  4EB9 00001EFA            981      JSR COMMA
0000188E  4EB9 00001F5C            982      JSR SPACE
00001894  3807                     983      MOVE.W      D7, D4      *GETTING EA MODE
00001896  E14C                     984      LSL.W       #8, D4      *
00001898  E54C                     985      LSL.W       #2, D4      *SHIFT 10 LEFT; 13 RIGHT
0000189A  E04C                     986      LSR.W       #8, D4      *
0000189C  EA4C                     987      LSR.W       #5, D4      *D4 = EA MODE
0000189E                           988      
0000189E  3A07                     989      MOVE.W      D7, D5      *GETTING EA REGISTER
000018A0  E14D                     990      LSL.W       #8, D5      *
000018A2  EB4D                     991      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
000018A4  E04D                     992      LSR.W       #8, D5      *
000018A6  EA4D                     993      LSR.W       #5, D5      *D5 = EA REGISTER
000018A8                           994      
000018A8  4EB9 00001E88            995      JSR         MODE_CHOOSER
000018AE  41F9 00001CDE            996      LEA         MODE_JUMP, A0   *LOAD MODE JUMP
000018B4  C9FC 0006                997      MULS        #6, D4          *GET JUMP
000018B8  4EB0 4000                998      JSR         0(A0, D4)       *JUMP
000018BC                           999      
000018BC  16BC 0000               1000      MOVE.B      #00, (A3)
000018C0                          1001      
000018C0  6000 F97A               1002      BRA         VALID_OPCODE
000018C4                          1003  EA_ADDA         *0 INVALID
000018C4  3E00                    1004      MOVE.W      D0, D7
000018C6                          1005      
000018C6  3807                    1006      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
000018C8  EF4C                    1007      LSL.W       #7, D4      * 
000018CA  EE4C                    1008      LSR.W       #7, D4      *
000018CC  EC4C                    1009      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
000018CE  4EB9 00001DBC           1010      JSR         GET_OPMODE
000018D4                          1011      
000018D4  3807                    1012      MOVE.W      D7, D4      *GETTING SOURCE MODE
000018D6  E14C                    1013      LSL.W       #8, D4      *
000018D8  E54C                    1014      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
000018DA  E04C                    1015      LSR.W       #8, D4      *
000018DC  EA4C                    1016      LSR.W       #5, D4      *D4 = SOURCE MODE
000018DE                          1017      
000018DE  3A07                    1018      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
000018E0  E14D                    1019      LSL.W       #8, D5      *
000018E2  EB4D                    1020      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
000018E4  E04D                    1021      LSR.W       #8, D5      *
000018E6  EA4D                    1022      LSR.W       #5, D5      *D5 = SOURCE REGISTER
000018E8                          1023      
000018E8  4EB9 00001E88           1024      JSR         MODE_CHOOSER  *INCASE MODE IS $111
000018EE  41F9 00001CDE           1025      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
000018F4  C9FC 0006               1026      MULS        #6, D4        *GET JUMP
000018F8  4EB0 4000               1027      JSR         0(A0, D4)     *JUMP
000018FC  4EB9 00001EFA           1028      JSR COMMA 
00001902  4EB9 00001F5C           1029      JSR SPACE
00001908  3A07                    1030      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
0000190A  E94D                    1031      LSL.W       #4, D5      *
0000190C  E04D                    1032      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
0000190E  EA4D                    1033      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
00001910                          1034      
00001910  4EB9 00001D1C           1035      JSR         ADDR_1
00001916  16BC 0000               1036      MOVE.B      #00, (A3)
0000191A                          1037      
0000191A  6000 F920               1038      BRA         VALID_OPCODE
0000191E                          1039  EA_MULS                *1 INVALID;
0000191E                          1040  
0000191E  3E00                    1041      MOVE.W      D0, D7
00001920                          1042      
00001920  4EB9 00001F5C           1043      JSR         SPACE
00001926  3807                    1044      MOVE.W      D7, D4      
00001928  E14C                    1045      LSL.W       #8, D4      *LEFT 10; RIGHT 13
0000192A  E54C                    1046      LSL.W       #2, D4
0000192C  E04C                    1047      LSR.W       #8, D4      *
0000192E  EA4C                    1048      LSR.W       #5, D4      *D4 = EA MODE
00001930                          1049      
00001930  3A07                    1050      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001932  E14D                    1051      LSL.W       #8, D5  
00001934  EB4D                    1052      LSL.W       #5, D5      *
00001936  E04D                    1053      LSR.W       #8, D5
00001938  EA4D                    1054      LSR.W       #5, D5      * D5 = EA REGISTER
0000193A                          1055      
0000193A  4EB9 00001E88           1056      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001940  41F9 00001CDE           1057      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001946  C9FC 0006               1058      MULS        #6, D4          *GET JUMP
0000194A  4EB0 4000               1059      JSR         0(A0, D4)       *JUMP
0000194E  4EB9 00001EFA           1060      JSR         COMMA
00001954  4EB9 00001F5C           1061      JSR         SPACE
0000195A  3A07                    1062      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
0000195C  E94D                    1063      LSL.W       #4, D5      *
0000195E  E04D                    1064      LSR.W       #8, D5      *
00001960  EA4D                    1065      LSR.W       #5, D5      *D5 DESTINATION REGISTER
00001962                          1066      
00001962  4EB9 00001D0E           1067      JSR         DATA_0
00001968  16BC 0000               1068      MOVE.B      #00, (A3)
0000196C                          1069      
0000196C  6000 F8CE               1070      BRA         VALID_OPCODE
00001970                          1071  EA_LEA          *5 INVALIDS; DONE
00001970  3E00                    1072      MOVE.W      D0, D7
00001972                          1073      
00001972  4EB9 00001F5C           1074      JSR         SPACE
00001978  3807                    1075      MOVE.W      D7, D4      *GETTING SOURCE MODE
0000197A  E14C                    1076      LSL.W       #8, D4      *
0000197C  E54C                    1077      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
0000197E  E04C                    1078      LSR.W       #8, D4      *
00001980  EA4C                    1079      LSR.W       #5, D4      *D4 = SOURCE MODE
00001982                          1080      
00001982  3A07                    1081      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
00001984  E14D                    1082      LSL.W       #8, D5      *
00001986  EB4D                    1083      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001988  E04D                    1084      LSR.W       #8, D5      *
0000198A  EA4D                    1085      LSR.W       #5, D5      *D5 = SOURCE REGISTER
0000198C                          1086      
0000198C  4EB9 00001E88           1087      JSR         MODE_CHOOSER  *INCASE MODE IS $111
00001992  4EB9 00001C8A           1088      JSR         LEA_ERROR_CHECK
00001998  41F9 00001CDE           1089      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
0000199E  C9FC 0006               1090      MULS        #6, D4        *GET JUMP
000019A2  4EB0 4000               1091      JSR         0(A0, D4)     *JUMP
000019A6  4EB9 00001EFA           1092      JSR COMMA
000019AC  4EB9 00001F5C           1093      JSR SPACE
000019B2  3A07                    1094      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
000019B4  E94D                    1095      LSL.W       #4, D5      *
000019B6  E04D                    1096      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
000019B8  EA4D                    1097      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
000019BA                          1098      
000019BA  4EB9 00001D1C           1099      JSR         ADDR_1
000019C0  16BC 0000               1100      MOVE.B      #00, (A3)
000019C4                          1101      
000019C4  6000 F876               1102      BRA         VALID_OPCODE
000019C8                          1103  EA_CLR          *2 INVALID; DONE
000019C8  3E00                    1104      MOVE.W      D0, D7
000019CA                          1105      
000019CA  3807                    1106      MOVE.W      D7, D4
000019CC  E14C                    1107      LSL.W       #8, D4      *
000019CE  E04C                    1108      LSR.W       #8, D4      *
000019D0  EC4C                    1109      LSR.W       #6, D4      *D4 = SIZE
000019D2  4EB9 00001E26           1110      JSR         GET_SIZE_ADDI
000019D8  3807                    1111      MOVE.W      D7, D4      
000019DA  E14C                    1112      LSL.W       #8, D4      *LEFT 10; RIGHT 13
000019DC  E54C                    1113      LSL.W       #2, D4
000019DE  E04C                    1114      LSR.W       #8, D4      *
000019E0  EA4C                    1115      LSR.W       #5, D4      *D4 = EA MODE
000019E2                          1116      
000019E2  3A07                    1117      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000019E4  E14D                    1118      LSL.W       #8, D5  
000019E6  EB4D                    1119      LSL.W       #5, D5      *
000019E8  E04D                    1120      LSR.W       #8, D5
000019EA  EA4D                    1121      LSR.W       #5, D5      * D5 = EA REGISTER
000019EC                          1122      
000019EC  4EB9 00001E88           1123      JSR         MODE_CHOOSER    *IF A WORD OR LONG  
000019F2  4EB9 00001C78           1124      JSR         ADDI_ERROR_CHECK  
000019F8  41F9 00001CDE           1125      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000019FE  C9FC 0006               1126      MULS        #6, D4          *GET JUMP
00001A02  4EB0 4000               1127      JSR         0(A0, D4)       *JUMP
00001A06                          1128      
00001A06  16BC 0000               1129      MOVE.B      #00, (A3)
00001A0A                          1130      
00001A0A  6000 F830               1131      BRA         VALID_OPCODE
00001A0E                          1132  EA_LSD          *3 INVALID; DONE
00001A0E  3E00                    1133      MOVE.W      D0, D7
00001A10                          1134      
00001A10  3807                    1135      MOVE.W      D7, D4
00001A12  E14C                    1136      LSL.W       #8, D4
00001A14  E04C                    1137      LSR.W       #8, D4
00001A16  EC4C                    1138      LSR.W       #6, D4      *ISOLATE SIZE
00001A18  4EB9 00001E26           1139      JSR         GET_SIZE_ADDI  *PRINT SIZE
00001A1E  B83C 0003               1140      CMP.B       #3, D4      *EA SHIFT
00001A22  6700 003E               1141      BEQ         EA_SHIFT    *BRANCH TO EA SHIFT
00001A26  3807                    1142      MOVE.W      D7, D4
00001A28  E14C                    1143      LSL.W       #8, D4
00001A2A  E54C                    1144      LSL.W       #2, D4
00001A2C  E04C                    1145      LSR.W       #8, D4
00001A2E  EE4C                    1146      LSR.W       #7, D4      *D4 = TYPE
00001A30                          1147      
00001A30  3A07                    1148      MOVE.W      D7, D5      *GETTING DATA
00001A32  E94D                    1149      LSL.W       #4, D5      *SHIFT LEFT 4; RIGHT 13
00001A34  E04D                    1150      LSR.W       #8, D5      *
00001A36  EA4D                    1151      LSR.W       #5, D5      *D5 = DATA / REGISTER
00001A38                          1152      
00001A38  4EB9 00001E46           1153      JSR         TYPE_CHOOSER
00001A3E  4EB9 00001EFA           1154      JSR         COMMA
00001A44  4EB9 00001F5C           1155      JSR         SPACE
00001A4A  3A07                    1156      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001A4C  E14D                    1157      LSL.W       #8, D5  
00001A4E  EB4D                    1158      LSL.W       #5, D5      *
00001A50  E04D                    1159      LSR.W       #8, D5
00001A52  EA4D                    1160      LSR.W       #5, D5      * D5 = EA REGISTER
00001A54  4EB9 00001D0E           1161      JSR         DATA_0
00001A5A                          1162      
00001A5A  16BC 0000               1163      MOVE.B      #00, (A3)
00001A5E                          1164      
00001A5E  6000 F7DC               1165      BRA         VALID_OPCODE
00001A62                          1166  EA_SHIFT
00001A62  4EB9 00001F5C           1167      JSR         SPACE
00001A68  3807                    1168      MOVE.W      D7, D4      *
00001A6A  E14C                    1169      LSL.W       #8, D4      *
00001A6C  E54C                    1170      LSL.W       #2, D4
00001A6E  E04C                    1171      LSR.W       #8, D4      *
00001A70  EA4C                    1172      LSR.W       #5, D4      *D4 = EA MODE
00001A72                          1173      
00001A72  3A07                    1174      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001A74  E14D                    1175      LSL.W       #8, D5  
00001A76  EB4D                    1176      LSL.W       #5, D5      *
00001A78  E04D                    1177      LSR.W       #8, D5
00001A7A  EA4D                    1178      LSR.W       #5, D5      * D5 = EA REGISTER
00001A7C                          1179      
00001A7C  4EB9 00001E88           1180      JSR         MODE_CHOOSER    *IF A WORD OR LONG   
00001A82  4EB9 00001C5E           1181      JSR         ADD_ERROR_CHECK 
00001A88  41F9 00001CDE           1182      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001A8E  C9FC 0006               1183      MULS        #6, D4          *GET JUMP
00001A92  4EB0 4000               1184      JSR         0(A0, D4)       *JUMP
00001A96  6000 0002               1185      BRA         DONE
00001A9A                          1186  DONE
00001A9A  16BC 0000               1187      MOVE.B      #00, (A3)
00001A9E                          1188      
00001A9E  6000 F79C               1189      BRA         VALID_OPCODE
00001AA2                          1190  
00001AA2                          1191  EA_CMP          *0 INVALID
00001AA2  3E00                    1192      MOVE.W      D0, D7
00001AA4                          1193      
00001AA4  3807                    1194      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
00001AA6  EF4C                    1195      LSL.W       #7, D4      * 
00001AA8  EE4C                    1196      LSR.W       #7, D4      *
00001AAA  EC4C                    1197      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
00001AAC  4EB9 00001E26           1198      JSR         GET_SIZE_ADDI
00001AB2  3807                    1199      MOVE.W      D7, D4      
00001AB4  E14C                    1200      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001AB6  E54C                    1201      LSL.W       #2, D4
00001AB8  E04C                    1202      LSR.W       #8, D4      *
00001ABA  EA4C                    1203      LSR.W       #5, D4      *D4 = EA MODE
00001ABC                          1204      
00001ABC  3A07                    1205      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001ABE  E14D                    1206      LSL.W       #8, D5  
00001AC0  EB4D                    1207      LSL.W       #5, D5      *
00001AC2  E04D                    1208      LSR.W       #8, D5
00001AC4  EA4D                    1209      LSR.W       #5, D5      * D5 = EA REGISTER
00001AC6                          1210      
00001AC6  4EB9 00001E88           1211      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001ACC  41F9 00001CDE           1212      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001AD2  C9FC 0006               1213      MULS        #6, D4          *GET JUMP
00001AD6  4EB0 4000               1214      JSR         0(A0, D4)       *JUMP
00001ADA  4EB9 00001EFA           1215      JSR         COMMA
00001AE0  4EB9 00001F5C           1216      JSR         SPACE
00001AE6  3A07                    1217      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
00001AE8  E94D                    1218      LSL.W       #4, D5      *
00001AEA  E04D                    1219      LSR.W       #8, D5      *
00001AEC  EA4D                    1220      LSR.W       #5, D5      *D5 DESTINATION REGISTER
00001AEE                          1221      
00001AEE  4EB9 00001D0E           1222      JSR         DATA_0
00001AF4  16BC 0000               1223      MOVE.B      #00, (A3)
00001AF8                          1224      
00001AF8  6000 F742               1225      BRA         VALID_OPCODE
00001AFC                          1226  EA_BCC          *0 INVALID (I THINK)
00001AFC  3E00                    1227      MOVE.W      D0, D7
00001AFE                          1228      
00001AFE  3807                    1229      MOVE.W      D7, D4
00001B00  E94C                    1230      LSL.W       #4, D4
00001B02  E04C                    1231      LSR.W       #8, D4
00001B04  E84C                    1232      LSR.W       #4, D4   *D4 = BINARY CONDITION CODE
00001B06  4EB9 00001E56           1233      JSR         PRINT_BCC
00001B0C  4EB9 00001F5C           1234      JSR         SPACE
00001B12  4EB9 00001EAC           1235      JSR         OUTPUT_HEX
00001B18  16BC 0000               1236      MOVE.B      #00, (A3)
00001B1C                          1237      
00001B1C  6000 F71E               1238      BRA         VALID_OPCODE
00001B20                          1239  EA_JSR   *5 INVALID; DONE
00001B20                          1240  
00001B20  3E00                    1241      MOVE.W      D0, D7
00001B22                          1242      
00001B22  4EB9 00001F5C           1243      JSR         SPACE
00001B28  3807                    1244      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001B2A  E14C                    1245      LSL.W       #8, D4      *
00001B2C  E54C                    1246      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
00001B2E  E04C                    1247      LSR.W       #8, D4      *
00001B30  EA4C                    1248      LSR.W       #5, D4      *D4 = SOURCE MODE
00001B32                          1249      
00001B32  3A07                    1250      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
00001B34  E14D                    1251      LSL.W       #8, D5      *
00001B36  EB4D                    1252      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001B38  E04D                    1253      LSR.W       #8, D5      *
00001B3A  EA4D                    1254      LSR.W       #5, D5      *D5 = SOURCE REGISTER
00001B3C                          1255      
00001B3C  4EB9 00001E88           1256      JSR         MODE_CHOOSER  *INCASE MODE IS $111
00001B42  4EB9 00001C8A           1257      JSR         LEA_ERROR_CHECK
00001B48  41F9 00001CDE           1258      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001B4E  C9FC 0006               1259      MULS        #6, D4        *GET JUMP
00001B52  4EB0 4000               1260      JSR         0(A0, D4)     *JUM
00001B56                          1261      
00001B56  16BC 0000               1262      MOVE.B      #00, (A3)
00001B5A                          1263      
00001B5A  6000 F6E0               1264      BRA         VALID_OPCODE
00001B5E                          1265  EA_MOVEM
00001B5E                          1266  
00001B5E  3C00                    1267      MOVE.W      D0, D6
00001B60  3806                    1268      MOVE.W      D6, D4
00001B62  EB4C                    1269      LSL.W       #5, D4
00001B64  E94C                    1270      LSL.W       #4, D4
00001B66  E04C                    1271      LSR.W       #8, D4
00001B68  EE4C                    1272      LSR.W       #7, D4
00001B6A  4EB9 00001E70           1273      JSR         REG_SIZE
00001B70  3E06                    1274      MOVE.W      D6, D7
00001B72  EB4F                    1275      LSL.W       #5, D7
00001B74  E04F                    1276      LSR.W       #8, D7
00001B76  EE4F                    1277      LSR.W       #7, D7
00001B78  BE3C 0000               1278      CMP.B       #0, D7
00001B7C  6700 003E               1279      BEQ         PRINT_LIST
00001B80  BE7C 0000               1280  EAP CMP.W       #0, D7      *IF ITS A ZERO, THAT MEANS WE JUST JUMPED HERE 
00001B84  6700 00A2               1281      BEQ         COMMA_SPACE *FROM CHECK TYPE, ELSE MEANS ITS UNALTERED
00001B88  3806                    1282  EAS MOVE.W      D6, D4      
00001B8A  E14C                    1283      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001B8C  E54C                    1284      LSL.W       #2, D4
00001B8E  E04C                    1285      LSR.W       #8, D4      *
00001B90  EA4C                    1286      LSR.W       #5, D4      *D4 = EA MODE
00001B92                          1287      
00001B92  3A06                    1288      MOVE.W      D6, D5      *SHIFT LEFT 13; RIGHT 13
00001B94  E14D                    1289      LSL.W       #8, D5  
00001B96  EB4D                    1290      LSL.W       #5, D5      *
00001B98  E04D                    1291      LSR.W       #8, D5
00001B9A  EA4D                    1292      LSR.W       #5, D5      * D5 = EA REGISTER
00001B9C                          1293      
00001B9C  4EB9 00001E88           1294      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001BA2  41F9 00001CDE           1295      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001BA8  C9FC 0006               1296      MULS        #6, D4          *GET JUMP
00001BAC  4EB0 4000               1297      JSR         0(A0, D4)       *JUMP
00001BB0                          1298      
00001BB0  BE7C 0001               1299      CMP.W       #1, D7 *IF ONE THEN THIS WAS PRINTED FIRST
00001BB4  6700 0006               1300      BEQ         PRINT_LIST
00001BB8                          1301      
00001BB8  6000 008E               1302      BRA         DONE_PRINTING
00001BBC                          1303  PRINT_LIST
00001BBC  BE3C 0001               1304      CMP.B       #1, D7 
00001BC0  6700 0076               1305      BEQ         COMMA_SPACE2
00001BC4  2E0A                    1306  EA2 MOVE.L      A2, D7
00001BC6  548A                    1307      ADD.L       #2, A2
00001BC8  143C 0008               1308      MOVE.B      #$8, D2
00001BCC  4244                    1309      CLR         D4
00001BCE                          1310  FOR_LOOP    
00001BCE  B404                    1311      CMP.B       D4, D2
00001BD0  6700 001E               1312      BEQ         ADDRESS_REGISTERS
00001BD4  E25F                    1313      ROR.W       #1, D7
00001BD6  6000 0006               1314      BRA         PRINT_CURRENT
00001BDA  5244                    1315  JFZ ADDQ        #1, D4
00001BDC  60F0                    1316      BRA         FOR_LOOP
00001BDE                          1317      
00001BDE                          1318  PRINT_CURRENT
00001BDE  64FA                    1319      BCC         JFZ
00001BE0  1A04                    1320      MOVE.B      D4, D5
00001BE2  4EB9 00001D0E           1321      JSR         DATA_0
00001BE8  4EB9 00001F84           1322      JSR         SLASH
00001BEE  60EA                    1323      BRA         JFZ
00001BF0                          1324      
00001BF0                          1325  ADDRESS_REGISTERS
00001BF0  4244                    1326      CLR         D4
00001BF2                          1327  FOR_2
00001BF2  B404                    1328      CMP.B       D4, D2
00001BF4  6700 001E               1329      BEQ         CHECK_TYPE
00001BF8  E25F                    1330      ROR.W       #1, D7
00001BFA  6000 0006               1331      BRA         EA_PRINT_ADDRESS
00001BFE  5244                    1332  JFF ADDQ        #1, D4
00001C00  60F0                    1333      BRA         FOR_2
00001C02                          1334      
00001C02                          1335  EA_PRINT_ADDRESS
00001C02  64FA                    1336      BCC         JFF
00001C04  1A04                    1337      MOVE.B      D4, D5
00001C06  4EB9 00001F84           1338      JSR         SLASH
00001C0C  4EB9 00001D1C           1339      JSR         ADDR_1
00001C12  60EA                    1340      BRA         JFF  
00001C14                          1341  CHECK_TYPE
00001C14  3E06                    1342      MOVE.W      D6, D7
00001C16  EB4F                    1343      LSL.W       #5, D7  
00001C18  E04F                    1344      LSR.W       #8, D7
00001C1A  EE4F                    1345      LSR.W       #7, D7
00001C1C  BE3C 0000               1346      CMP.B       #0, D7   *IF TYPE IS 0 THE LIST HAS BEEN PRINTED FIRST  
00001C20  6700 FF5E               1347      BEQ         EAP      *THEREFORE ITS TIME TO PRINT THE EAP
00001C24  6600 0022               1348      BNE         DONE_PRINTING
00001C28                          1349      
00001C28                          1350  COMMA_SPACE
00001C28  4EB9 00001EFA           1351      JSR         COMMA
00001C2E  4EB9 00001F5C           1352      JSR         SPACE
00001C34  6000 FF52               1353      BRA         EAS
00001C38                          1354      
00001C38                          1355  COMMA_SPACE2
00001C38  4EB9 00001EFA           1356      JSR         COMMA
00001C3E  4EB9 00001F5C           1357      JSR         SPACE
00001C44  6000 FF7E               1358      BRA         EA2
00001C48                          1359      
00001C48                          1360  DONE_PRINTING
00001C48  16BC 0000               1361      MOVE.B      #00, (A3)
00001C4C  6000 F5EE               1362      BRA         VALID_OPCODE
00001C50                          1363  
00001C50                          1364  
00001C50                          1365  
00001C50                          1366  
00001C50                          1367  
00001C50                          1368  
00001C50                          1369  
00001C50                          1370  
00001C50                          1371  
00001C50                          1372  
00001C50                          1373  
00001C50                          1374  
00001C50                          1375  
00001C50                          1376  
00001C50                          1377  
00001C50                          1378  
00001C50                          1379  BYEBYE
00001C50  FFFF FFFF               1380      SIMHALT
00001C54                          1381  
00001C54                          1382  
00001C54                          1383  
00001C54                          1384  
00001C54                          1385  
00001C54                          1386  
00001C54                          1387  
00001C54                          1388  
00001C54                          1389  
00001C54                          1390  
00001C54                          1391  
00001C54                          1392  
00001C54                          1393  
00001C54                          1394  
00001C54                          1395  
00001C54                          1396  MOVE_ERROR_CHECK       *only invalid move is desn addr reg
00001C54  B83C 0001               1397      CMP.B       #1, D4 *if d4 is one, dest is addr reg
00001C58  6700 0332               1398      BEQ         INVALID
00001C5C  4E75                    1399      RTS
00001C5E                          1400      
00001C5E                          1401  ADD_ERROR_CHECK  *COVERS ALL SHIFTS
00001C5E  B83C 0007               1402      CMP.B       #7, D4
00001C62  6700 0072               1403      BEQ         EAT_INVALID
00001C66  B83C 0001               1404      CMP.B       #1, D4
00001C6A  6700 0320               1405      BEQ         INVALID
00001C6E  B83C 0000               1406      CMP.B       #0, D4
00001C72  6700 0318               1407      BEQ         INVALID
00001C76  4E75                    1408      RTS 
00001C78                          1409      
00001C78                          1410  ADDI_ERROR_CHECK *COVERS CLR
00001C78  B83C 0001               1411      CMP.B       #1, D4
00001C7C  6700 030E               1412      BEQ         INVALID
00001C80  B83C 0007               1413      CMP.B       #7, D4
00001C84  6700 0050               1414      BEQ         EAT_INVALID
00001C88  4E75                    1415      RTS
00001C8A                          1416      
00001C8A                          1417  LEA_ERROR_CHECK *COVERS JSR
00001C8A  B83C 0000               1418      CMP.B       #0, D4
00001C8E  6700 02FC               1419      BEQ         INVALID
00001C92  B83C 0001               1420      CMP.B       #1, D4
00001C96  6700 02F4               1421      BEQ         INVALID
00001C9A  B83C 0003               1422      CMP.B       #3, D4
00001C9E  6700 02EC               1423      BEQ         INVALID
00001CA2  B83C 0004               1424      CMP.B       #4, D4
00001CA6  6700 02E4               1425      BEQ         INVALID
00001CAA  B83C 0007               1426      CMP.B       #7, D4
00001CAE  6700 0026               1427      BEQ         EAT_INVALID
00001CB2  4E75                    1428      RTS
00001CB4                          1429      
00001CB4                          1430  MOVEM_ERROR_CHECK *0, 1, 4, 7
00001CB4  B83C 0000               1431      CMP.B       #0, D4
00001CB8  6700 02D2               1432      BEQ         INVALID
00001CBC  B83C 0001               1433      CMP.B       #1, D4
00001CC0  6700 02CA               1434      BEQ         INVALID
00001CC4  B83C 0004               1435      CMP.B       #4, D4
00001CC8  6700 02C2               1436      BEQ         INVALID
00001CCC  B83C 0007               1437      CMP.B       #7, D4
00001CD0  6700 0004               1438      BEQ         EAT_INVALID
00001CD4  4E75                    1439      RTS
00001CD6                          1440      
00001CD6                          1441      
00001CD6                          1442      
00001CD6                          1443      *assuming FOR NOW that it always eats a long
00001CD6                          1444  EAT_INVALID *EATS THE NEXT TWO WORD VALUES... THEN CALLS INVALID
00001CD6  548A                    1445      ADD.L       #2, A2      *EAT THE FIRST WORD
00001CD8  548A                    1446      ADD.L       #2, A2      *EAT THE SECOND WORD
00001CDA  6000 02B0               1447      BRA         INVALID
00001CDE                          1448  
00001CDE                          1449  
00001CDE                          1450  
00001CDE                          1451  
00001CDE                          1452  
00001CDE                          1453  
00001CDE                          1454  
00001CDE                          1455  
00001CDE                          1456  
00001CDE                          1457  
00001CDE                          1458  
00001CDE                          1459  
00001CDE                          1460  
00001CDE                          1461  
00001CDE                          1462  
00001CDE                          1463  
00001CDE                          1464  
00001CDE                          1465  
00001CDE  4EF9 00001D0E           1466  MODE_JUMP       JMP     DATA_0
00001CE4  4EF9 00001D1C           1467                  JMP     ADDR_1
00001CEA  4EF9 00001D2A           1468                  JMP     ADDI_2
00001CF0  4EF9 00001D3C           1469                  JMP     ADDP_3
00001CF6  4EF9 00001D48           1470                  JMP     ADDM_4
00001CFC  4EF9 00001D54           1471                  JMP     ABSW_5
00001D02  4EF9 00001D64           1472                  JMP     ABSL_6
00001D08  4EF9 00001D7C           1473                  JMP     IMME_7
00001D0E                          1474  
00001D0E                          1475  DATA_0 *DONE
00001D0E  16F9 00003574           1476      MOVE.B      M_DREG, (A3)+
00001D14  4EB9 00001DB2           1477      JSR         GET_REG
00001D1A  4E75                    1478      RTS
00001D1C                          1479  
00001D1C                          1480  ADDR_1 *ADD CONDITIONS FOR SOURCE ONLY, AND NEVER BYTES
00001D1C  16F9 00003576           1481      MOVE.B      M_AREG, (A3)+
00001D22  4EB9 00001DB2           1482      JSR         GET_REG
00001D28  4E75                    1483      RTS
00001D2A                          1484   
00001D2A                          1485  ADDI_2 *DONE
00001D2A  4EB9 00001F3C           1486      JSR         OPEN
00001D30  4EB8 1D1C               1487      JSR         ADDR_1
00001D34  4EB9 00001F44           1488      JSR         CLOSE
00001D3A  4E75                    1489      RTS
00001D3C                          1490      
00001D3C                          1491  ADDP_3 *DONE
00001D3C  4EB8 1D2A               1492      JSR         ADDI_2
00001D40  4EB9 00001F4C           1493      JSR         PLUS
00001D46  4E75                    1494      RTS
00001D48                          1495      
00001D48                          1496  ADDM_4 *DONE
00001D48  4EB9 00001F54           1497      JSR         SUB
00001D4E  4EB8 1D2A               1498      JSR         ADDI_2
00001D52  4E75                    1499      RTS
00001D54                          1500      
00001D54                          1501  ABSW_5  *DONE
00001D54  548A                    1502      ADD.L       #2, A2      *INCREMENT INTO WORD ADDRESS
00001D56  3412                    1503      MOVE.W      (A2), D2   
00001D58  4EB9 00001F64           1504      JSR         CASH
00001D5E  6100 014C               1505      BSR         OUTPUT_HEX
00001D62  4E75                    1506      RTS
00001D64                          1507  
00001D64                          1508   
00001D64                          1509  ABSL_6 *
00001D64  4EB9 00001F64           1510      JSR         CASH
00001D6A  548A                    1511      ADD.L       #2, A2      *INCREMENT INTO WORD
00001D6C  3412                    1512      MOVE.W      (A2), D2    *COPY
00001D6E  6100 013C               1513      BSR         OUTPUT_HEX
00001D72  548A                    1514      ADD.L       #2, A2      *IDCREMENT INTO NEXT WORK
00001D74  3412                    1515      MOVE.W      (A2), D2
00001D76  6100 0134               1516      BSR         OUTPUT_HEX
00001D7A  4E75                    1517      RTS
00001D7C                          1518      
00001D7C                          1519  IMME_7  *FOR NOW ONLY WORKING WITH IMMEDIATE HEX VALUES
00001D7C  4EB9 00001F02           1520      JSR         POUND
00001D82  4EB9 00001F64           1521      JSR         CASH
00001D88                          1522      
00001D88  548A                    1523      ADD.L       #2, A2
00001D8A  3412                    1524      MOVE.W      (A2), D2
00001D8C  6100 011E               1525      BSR         OUTPUT_HEX
00001D90                          1526      
00001D90                          1527      *major problem, how to know how long immediate data is
00001D90  4E75                    1528      RTS
00001D92                          1529  
00001D92                          1530  GET_SIZE
00001D92  4EB9 00001F0A           1531      JSR         DOT
00001D98  B83C 0001               1532      CMP.B       #1, D4
00001D9C  6700 0182               1533      BEQ         BYTE
00001DA0  B83C 0003               1534      CMP.B       #3, D4
00001DA4  6700 016C               1535      BEQ         WORD
00001DA8  B83C 0002               1536      CMP.B       #2, D4
00001DAC  6700 0180               1537      BEQ         LONG  
00001DB0  4E75                    1538      RTS
00001DB2                          1539      
00001DB2                          1540  GET_REG ******************
00001DB2  2205                    1541      MOVE.L      D5, D1 
00001DB4  4EB8 1278               1542      JSR         CONVERT_TO_ASCII
00001DB8  16C1                    1543      MOVE.B      D1, (A3)+
00001DBA  4E75                    1544      RTS
00001DBC                          1545      
00001DBC                          1546  GET_OPMODE
00001DBC  4EB9 00001F0A           1547      JSR         DOT
00001DC2  B83C 0003               1548      CMP.B       #3, D4
00001DC6  6700 014A               1549      BEQ         WORD
00001DCA  B83C 0007               1550      CMP.B       #7, D4
00001DCE  6700 015E               1551      BEQ         LONG
00001DD2  4E75                    1552      RTS
00001DD4                          1553      
00001DD4                          1554  GET_OPMODE_MATH
00001DD4  4EB9 00001F0A           1555      JSR         DOT
00001DDA  B83C 0000               1556      CMP.B       #0, D4
00001DDE  6700 0140               1557      BEQ         BYTE
00001DE2  B83C 0004               1558      CMP.B       #4, D4
00001DE6  6700 0138               1559      BEQ         BYTE
00001DEA  B83C 0001               1560      CMP.B       #1, D4
00001DEE  6700 0122               1561      BEQ         WORD
00001DF2  B83C 0005               1562      CMP.B       #5, D4
00001DF6  6700 011A               1563      BEQ         WORD
00001DFA  B83C 0002               1564      CMP.B       #2, D4
00001DFE  6700 012E               1565      BEQ         LONG
00001E02  B83C 0006               1566      CMP.B       #6, D4
00001E06  6700 0126               1567      BEQ         LONG
00001E0A  4E75                    1568      RTS
00001E0C                          1569      
00001E0C                          1570  GET_DATA ******************
00001E0C  4EB9 00001F02           1571      JSR         POUND
00001E12  BA3C 0000               1572      CMP.B       #0, D5
00001E16  6700 0008               1573      BEQ         PRINT_8
00001E1A  2205                    1574      MOVE.L      D5, D1
00001E1C  16C1                    1575      MOVE.B      D1, (A3)+
00001E1E  4E75                    1576      RTS
00001E20                          1577      
00001E20                          1578  PRINT_8 ********
00001E20  7208                    1579      MOVE.L      #8, D1
00001E22  16C1                    1580      MOVE.B      D1, (A3)+
00001E24  4E75                    1581      RTS
00001E26                          1582      
00001E26                          1583  GET_SIZE_ADDI
00001E26  4EB9 00001F0A           1584      JSR         DOT
00001E2C  B83C 0000               1585      CMP.B       #0, D4
00001E30  6700 00EE               1586      BEQ         BYTE
00001E34  B83C 0001               1587      CMP.B       #1, D4
00001E38  6700 00D8               1588      BEQ         WORD
00001E3C  B83C 0002               1589      CMP.B       #2, D4
00001E40  6700 00EC               1590      BEQ         LONG  
00001E44  4E75                    1591      RTS
00001E46                          1592      
00001E46                          1593  TYPE_CHOOSER
00001E46  B83C 0000               1594      CMP.B       #0, D4      *IF IMMEDIATE
00001E4A  67C0                    1595      BEQ         GET_DATA    *IF BRANCHED  ->  #1 IS NOW PRINTED
00001E4C  B83C 0001               1596      CMP.B       #1, D4      *IF A DATA REG
00001E50  6700 FEBC               1597      BEQ         DATA_0
00001E54  4E75                    1598      RTS
00001E56                          1599      
00001E56                          1600  PRINT_BCC
00001E56  B83C 0004               1601      CMP.B       #4, D4
00001E5A  6700 0110               1602      BEQ         CC
00001E5E  B83C 000E               1603      CMP.B       #14, D4
00001E62  6700 0110               1604      BEQ         GT
00001E66  B83C 000F               1605      CMP.B       #15, D4
00001E6A  6700 0110               1606      BEQ         LE
00001E6E  4E75                    1607      RTS
00001E70                          1608      
00001E70                          1609  REG_SIZE
00001E70  4EB9 00001F0A           1610      JSR         DOT
00001E76  B83C 0000               1611      CMP.B       #0, D4
00001E7A  6700 0096               1612      BEQ         WORD
00001E7E  B83C 0001               1613      CMP.B       #1, D4
00001E82  6700 00AA               1614      BEQ         LONG
00001E86  4E75                    1615      RTS
00001E88                          1616  MODE_CHOOSER
00001E88  B83C 0007               1617      CMP.B       #7, D4
00001E8C  6700 0004               1618      BEQ         NEW_MODE
00001E90  4E75                    1619      RTS
00001E92                          1620      
00001E92                          1621  NEW_MODE
00001E92  BA3C 0000               1622      CMP.B       #0, D5 *CHECK REGISTER(D5), WORD ADDRESS?
00001E96  6700 0010               1623      BEQ         TO_FIVE *CHANGE MODE (D4) TO 5
00001E9A  BA3C 0001               1624      CMP.B       #1, D5 *CHECK REGISTER(D5), LONG ADDRESS?
00001E9E  6700 0004               1625      BEQ         TO_SIX *CHANGE MODE(D4) TO 6
00001EA2  4E75                    1626      RTS
00001EA4                          1627      
00001EA4                          1628  TO_SIX  
00001EA4  5304                    1629      SUB.B      #1, D4
00001EA6  4E75                    1630      RTS
00001EA8                          1631  
00001EA8                          1632  TO_FIVE
00001EA8  5504                    1633      SUB.B      #2, D4
00001EAA  4E75                    1634      RTS
00001EAC                          1635  
00001EAC                          1636  OUTPUT_HEX
00001EAC                          1637      *OUTPUT 1ST
00001EAC  3802                    1638      MOVE.W      D2, D4              *D7 = <1010 1111 0101 0111>
00001EAE  E04C                    1639      LSR.W       #8, D4              *D7 = <0000 0000 1010 1111>
00001EB0  E84C                    1640      LSR.W       #4, D4              *D7 = <0000 0000 0000 1010>
00001EB2  1204                    1641      MOVE.B      D4, D1
00001EB4  6100 F3C2               1642      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
00001EB8  6100 003C               1643      BSR         ADD_CHAR         *print the char in D1  
00001EBC                          1644      *OUTPUT 2ND
00001EBC  3802                    1645      MOVE.W      D2, D4
00001EBE  E94C                    1646      LSL.W       #4, D4              *SHIFT OUT FURTHEST RIGHT BIT
00001EC0  E04C                    1647      LSR.W       #8, D4
00001EC2  E84C                    1648      LSR.W       #4, D4  
00001EC4  1204                    1649      MOVE.B      D4, D1
00001EC6  6100 F3B0               1650      BSR         CONVERT_TO_ASCII
00001ECA  6100 002A               1651      BSR         ADD_CHAR
00001ECE                          1652      *OUTPUT 3RD
00001ECE  3802                    1653      MOVE.W      D2, D4
00001ED0  E14C                    1654      LSL.W       #8, D4
00001ED2  E04C                    1655      LSR.W       #8, D4
00001ED4  E84C                    1656      LSR.W       #4, D4
00001ED6  1204                    1657      MOVE.B      D4, D1
00001ED8  6100 F39E               1658      BSR         CONVERT_TO_ASCII
00001EDC  6100 0018               1659      BSR         ADD_CHAR
00001EE0                          1660      *OUTPUT 4TH
00001EE0  3802                    1661      MOVE.W      D2, D4  *D7 = <1010 1111 0101 0111>
00001EE2  E14C                    1662      LSL.W       #8, D4  *     <0101 0111 0000 0000>
00001EE4  E94C                    1663      LSL.W       #4, D4  *     <0111 0000 0000 0000>
00001EE6  E04C                    1664      LSR.W       #8, D4  *     <
00001EE8  E84C                    1665      LSR.W       #4, D4
00001EEA  1204                    1666      MOVE.B      D4, D1
00001EEC  6100 F38A               1667      BSR         CONVERT_TO_ASCII
00001EF0  6100 0004               1668      BSR         ADD_CHAR
00001EF4  4E75                    1669      RTS
00001EF6                          1670                                     *continue converting            
00001EF6                          1671  ADD_CHAR ********
00001EF6  16C1                    1672      MOVE.B      D1, (A3)+
00001EF8  4E75                    1673      RTS
00001EFA                          1674  
00001EFA                          1675  COMMA
00001EFA  16F9 00003560           1676      MOVE.B      M_COMMA, (A3)+
00001F00  4E75                    1677      RTS
00001F02                          1678      
00001F02                          1679  POUND
00001F02  16F9 00003562           1680      MOVE.B      M_POUND, (A3)+
00001F08  4E75                    1681      RTS
00001F0A                          1682          
00001F0A                          1683  DOT
00001F0A  16F9 00003564           1684      MOVE.B      M_DOT, (A3)+
00001F10  4E75                    1685      RTS   
00001F12                          1686  
00001F12                          1687  WORD
00001F12  16F9 00003566           1688      MOVE.B      M_WORD, (A3)+
00001F18  4EB9 00001F5C           1689      JSR         SPACE
00001F1E  4E75                    1690      RTS
00001F20                          1691  
00001F20                          1692  BYTE
00001F20  16F9 00003568           1693      MOVE.B      M_BYTE, (A3)+
00001F26  4EB9 00001F5C           1694      JSR         SPACE
00001F2C  4E75                    1695      RTS
00001F2E                          1696      
00001F2E                          1697  LONG
00001F2E  16F9 0000356A           1698      MOVE.B      M_LONG, (A3)+
00001F34  4EB9 00001F5C           1699      JSR         SPACE
00001F3A  4E75                    1700      RTS
00001F3C                          1701      
00001F3C                          1702  OPEN
00001F3C  16F9 0000356C           1703      MOVE.B      M_OPEN, (A3)+
00001F42  4E75                    1704      RTS
00001F44                          1705  
00001F44                          1706  CLOSE
00001F44  16F9 0000356E           1707      MOVE.B      M_CLOSE, (A3)+
00001F4A  4E75                    1708      RTS
00001F4C                          1709      
00001F4C                          1710  PLUS
00001F4C  16F9 00003570           1711      MOVE.B      M_PLUS, (A3)+
00001F52  4E75                    1712      RTS
00001F54                          1713      
00001F54                          1714  SUB
00001F54  16F9 00003572           1715      MOVE.B      M_SUB, (A3)+
00001F5A  4E75                    1716      RTS
00001F5C                          1717      
00001F5C                          1718  SPACE
00001F5C  16F9 000034E0           1719      MOVE.B      M_SPACE, (A3)+
00001F62  4E75                    1720      RTS    
00001F64                          1721      
00001F64                          1722  CASH
00001F64  16F9 0000355E           1723      MOVE.B      M_CASH, (A3)+
00001F6A  4E75                    1724      RTS
00001F6C                          1725  
00001F6C                          1726  CC
00001F6C  16F9 00003578           1727      MOVE.B      M_CC, (A3)+
00001F72  4E75                    1728      RTS
00001F74                          1729  GT
00001F74  16F9 0000357B           1730      MOVE.B      M_GT, (A3)+
00001F7A  4E75                    1731      RTS
00001F7C                          1732  
00001F7C                          1733  LE
00001F7C  16F9 0000357E           1734      MOVE.B      M_LE, (A3)+
00001F82  4E75                    1735      RTS
00001F84                          1736      
00001F84                          1737  SLASH
00001F84  16F9 00003581           1738      MOVE.B      M_SLASH, (A3)+
00001F8A  4E75                    1739      RTS
00001F8C                          1740      
00001F8C                          1741  INVALID
00001F8C  16BC 0000               1742      MOVE.B      #00, (A3)
00001F90  6000 F22A               1743      BRA         INVALID_OPCODE
00001F94                          1744      
00001F94                          1745  
00001F94  =0000000D               1746  CR      EQU     $0D
00001F94  =0000000A               1747  LF      EQU     $0A
00001F94                          1748  
00001F94                          1749  
00001F94                          1750  
00001F94                          1751  
00001F94                          1752  
00001F94                          1753  
00001F94                          1754  
00001F94                          1755  
00001F94                          1756  
00001F94                          1757  
00001F94                          1758  
00001F94                          1759  
00001F94                          1760  
00001F94                          1761  
00001F94                          1762  
00001F94                          1763  
00001F94                          1764  
00001F94                          1765  
00001F94                          1766  -------------------- end include --------------------
00001F94                          1767      INCLUDE         'testingFile.x68'
00003000                          1768      ORG    $3000
00003000                          1769          
00003000                          1770  
00003000                          1771      *NOP* DONE
00003000                          1772      *NOP
00003000                          1773      
00003000                          1774      *MOVE* DONE
00003000                          1775      *MOVE SOURCE: DATA REGISTER -> DN
00003000  1401                    1776      MOVE.B D1, D2
00003002  1281                    1777      MOVE.B D1, (A1)
00003004  12C1                    1778      MOVE.B D1, (A1)+
00003006  1301                    1779      MOVE.B D1, -(A1)
00003008  11C1 1234               1780      MOVE.B D1, $1234
0000300C  13C1 12345678           1781      MOVE.B D1, $12345678
00003012  3401                    1782      MOVE.W D1, D2
00003014  3281                    1783      MOVE.W D1, (A1)
00003016  32C1                    1784      MOVE.W D1, (A1)+
00003018  3301                    1785      MOVE.W D1, -(A1)
0000301A  31C1 1234               1786      MOVE.W D1, $1234
0000301E  33C1 12345678           1787      MOVE.W D1, $12345678
00003024  2401                    1788      MOVE.L D1, D2
00003026  2281                    1789      MOVE.L D1, (A1)
00003028  22C1                    1790      MOVE.L D1, (A1)+
0000302A  2301                    1791      MOVE.L D1, -(A1)
0000302C  21C1 1234               1792      MOVE.L D1, $1234
00003030  23C1 12345678           1793      MOVE.L D1, $12345678
00003036                          1794      *MOVE SOURCE: ADDRESS REGISTER -> AN
00003036                          1795      *INVALID: MOVE.B
00003036  3209                    1796      MOVE.W A1, D1
00003038  3449                    1797      MOVE.W A1, A2
0000303A  3489                    1798      MOVE.W A1, (A2)
0000303C  3509                    1799      MOVE.W A1, -(A2)
0000303E  34C9                    1800      MOVE.W A1, (A2)+
00003040  31C9 1234               1801      MOVE.W A1, $1234
00003044  33C9 12345678           1802      MOVE.W A1, $12345678
0000304A  2209                    1803      MOVE.L A1, D1
0000304C  2449                    1804      MOVE.L A1, A2
0000304E  2489                    1805      MOVE.L A1, (A2)
00003050  2509                    1806      MOVE.L A1, -(A2)
00003052  24C9                    1807      MOVE.L A1, (A2)+
00003054  21C9 1234               1808      MOVE.L A1, $1234
00003058  23C9 12345678           1809      MOVE.L A1, $12345678
0000305E                          1810      *MOVE SOURCE: ADDRESS REGISTER INDIRECT -> (AN)
0000305E  1211                    1811      MOVE.B (A1), D1
00003060  1491                    1812      MOVE.B (A1), (A2)
00003062  1511                    1813      MOVE.B (A1), -(A2)
00003064  14D1                    1814      MOVE.B (A1), (A2)+
00003066  11D1 1234               1815      MOVE.B (A1), $1234
0000306A  13D1 12345678           1816      MOVE.B (A1), $12345678
00003070  3211                    1817      MOVE.W (A1), D1
00003072  3491                    1818      MOVE.W (A1), (A2)
00003074  3511                    1819      MOVE.W (A1), -(A2)
00003076  34D1                    1820      MOVE.W (A1), (A2)+
00003078  31D1 1234               1821      MOVE.W (A1), $1234
0000307C  33D1 12345678           1822      MOVE.W (A1), $12345678
00003082  2211                    1823      MOVE.L (A1), D1
00003084  2491                    1824      MOVE.L (A1), (A2)
00003086  2511                    1825      MOVE.L (A1), -(A2)
00003088  24D1                    1826      MOVE.L (A1), (A2)+
0000308A  21D1 1234               1827      MOVE.L (A1), $1234
0000308E  23D1 12345678           1828      MOVE.L (A1), $12345678
00003094                          1829      *MOVE SOURCE: ADDRESS REG IND POST INCREMENT
00003094  1219                    1830      MOVE.B (A1)+, D1
00003096  1499                    1831      MOVE.B (A1)+, (A2)
00003098  14D9                    1832      MOVE.B (A1)+, (A2)+
0000309A  1519                    1833      MOVE.B (A1)+, -(A2)
0000309C  11D9 1234               1834      MOVE.B (A1)+, $1234
000030A0  13D9 12345678           1835      MOVE.B (A1)+, $12345678
000030A6  3219                    1836      MOVE.W (A1)+, D1
000030A8  3499                    1837      MOVE.W (A1)+, (A2)
000030AA  34D9                    1838      MOVE.W (A1)+, (A2)+
000030AC  3519                    1839      MOVE.W (A1)+, -(A2)
000030AE  31D9 1234               1840      MOVE.W (A1)+, $1234
000030B2  33D9 12345678           1841      MOVE.W (A1)+, $12345678
000030B8  2219                    1842      MOVE.L (A1)+, D1
000030BA  2499                    1843      MOVE.L (A1)+, (A2)
000030BC  24D9                    1844      MOVE.L (A1)+, (A2)+
000030BE  2519                    1845      MOVE.L (A1)+, -(A2)
000030C0  21D9 1234               1846      MOVE.L (A1)+, $1234
000030C4  23D9 12345678           1847      MOVE.L (A1)+, $12345678
000030CA                          1848      *MOVE SOURCE: ADDRESS REG IND PRE DECREMENT
000030CA  1221                    1849      MOVE.B -(A1), D1
000030CC  14A1                    1850      MOVE.B -(A1), (A2)
000030CE  14E1                    1851      MOVE.B -(A1), (A2)+
000030D0  1521                    1852      MOVE.B -(A1), -(A2)
000030D2  11E1 1234               1853      MOVE.B -(A1), $1234
000030D6  13E1 12345678           1854      MOVE.B -(A1), $12345678
000030DC  3221                    1855      MOVE.W -(A1), D1
000030DE  34A1                    1856      MOVE.W -(A1), (A2)
000030E0  34E1                    1857      MOVE.W -(A1), (A2)+
000030E2  3521                    1858      MOVE.W -(A1), -(A2)
000030E4  31E1 1234               1859      MOVE.W -(A1), $1234
000030E8  33E1 12345678           1860      MOVE.W -(A1), $12345678
000030EE  2221                    1861      MOVE.L -(A1), D1
000030F0  24A1                    1862      MOVE.L -(A1), (A2)
000030F2  24E1                    1863      MOVE.L -(A1), (A2)+
000030F4  2521                    1864      MOVE.L -(A1), -(A2)
000030F6  21E1 1234               1865      MOVE.L -(A1), $1234
000030FA  23E1 12345678           1866      MOVE.L -(A1), $12345678
00003100                          1867      *MOVE SOURCE: ABSOLUTE WORD -> (XXX).W
00003100  1238 1234               1868      MOVE.B $1234, D1
00003104  14B8 1235               1869      MOVE.B $1235, (A2)
00003108  14F9 00009987           1870      MOVE.B $9987, (A2)+
0000310E  1538 5543               1871      MOVE.B $5543, -(A2)
00003112  11F8 1123 1111          1872      MOVE.B $1123, $1111
00003118  13F9 00009980 AAA89999  1873      MOVE.B $9980, $AAA89999
00003122  3238 1234               1874      MOVE.W $1234, D1
00003126  34B8 1235               1875      MOVE.W $1235, (A2)
0000312A  34F9 00009987           1876      MOVE.W $9987, (A2)+
00003130  3538 5543               1877      MOVE.W $5543, -(A2)
00003134  31F8 1123 1111          1878      MOVE.W $1123, $1111
0000313A  33F9 00009980 AAA89999  1879      MOVE.W $9980, $AAA89999
00003144  2238 1234               1880      MOVE.L $1234, D1
00003148  24B8 1235               1881      MOVE.L $1235, (A2)
0000314C  24F9 00009987           1882      MOVE.L $9987, (A2)+
00003152  2538 5543               1883      MOVE.L $5543, -(A2)
00003156  21F8 1123 1111          1884      MOVE.L $1123, $1111
0000315C  23F9 00009980 AAA89999  1885      MOVE.L $9980, $AAA89999
00003166                          1886      *MOVE SOURCE: ABSOLUTE LONG -> (XXX).L
00003166  1239 0FFF8111           1887      MOVE.B $0FFF8111, D1
0000316C  12B9 0FFF8222           1888      MOVE.B $0FFF8222, (A1)
00003172  12F9 0FFF9999           1889      MOVE.B $0FFF9999, (A1)+
00003178  1339 0FFF1111           1890      MOVE.B $0FFF1111, -(A1)
0000317E  13F9 0FFF8799 00009879  1891      MOVE.B $0FFF8799, $9879
00003188  13F9 0FFF1222 0FFF8878  1892      MOVE.B $0FFF1222, $0FFF8878
00003192  3239 0FFF8111           1893      MOVE.W $0FFF8111, D1
00003198  32B9 0FFF8222           1894      MOVE.W $0FFF8222, (A1)
0000319E  32F9 0FFF9999           1895      MOVE.W $0FFF9999, (A1)+
000031A4  3339 0FFF1111           1896      MOVE.W $0FFF1111, -(A1)
000031AA  33F9 0FFF8799 00009879  1897      MOVE.W $0FFF8799, $9879
000031B4  33F9 0FFF1222 0FFF8878  1898      MOVE.W $0FFF1222, $0FFF8878
000031BE  2239 0FFF8111           1899      MOVE.L $0FFF8111, D1
000031C4  22B9 0FFF8222           1900      MOVE.L $0FFF8222, (A1)
000031CA  22F9 0FFF9999           1901      MOVE.L $0FFF9999, (A1)+
000031D0  2339 0FFF1111           1902      MOVE.L $0FFF1111, -(A1)
000031D6  23F9 0FFF8799 00009879  1903      MOVE.L $0FFF8799, $9879
000031E0  23F9 0FFF1222 0FFF8878  1904      MOVE.L $0FFF1222, $0FFF8878
000031EA                          1905      *MOVE SOURCE: IMMEDIATE DATA -> #<DATA>
000031EA  123C 0001               1906      MOVE.B #1, D1
000031EE  12BC 0002               1907      MOVE.B #2, (A1)
000031F2  12FC 0003               1908      MOVE.B #3, (A1)+
000031F6  133C 0004               1909      MOVE.B #4, -(A1)
000031FA  11FC 0005 1234          1910      MOVE.B #5, $1234
00003200  13FC 0006 0FFF1234      1911      MOVE.B #6, $0FFF1234
00003208  323C 0457               1912      MOVE.W #1111, D1
0000320C  32BC 08AE               1913      MOVE.W #2222, (A1)
00003210  32FC 0D05               1914      MOVE.W #3333, (A1)+
00003214  333C 115C               1915      MOVE.W #4444, -(A1)
00003218  31FC 15B3 1234          1916      MOVE.W #5555, $1234
0000321E  33FC 1A0A 0FFF1234      1917      MOVE.W #6666, $0FFF1234
00003226  223C 00A98B42           1918      MOVE.L #11111234, D1
0000322C  22BC 00BC53CE           1919      MOVE.L #12342222, (A1)
00003232  22FC 00BC5825           1920      MOVE.L #12343333, (A1)+
00003238  233C 00BC5C7C           1921      MOVE.L #12344444, -(A1)
0000323E  21FC 00BC60D3 1234      1922      MOVE.L #12345555, $1234
00003246  23FC 00BC652A 0FFF1234  1923      MOVE.L #12346666, $0FFF1234
00003250                          1924  
00003250                          1925      *MOVEA* (good) BYTES INVALID
00003250  3442                    1926      MOVEA.W D2, A2
00003252  344B                    1927      MOVEA.W A3, A2
00003254  3453                    1928      MOVEA.W (A3), A2
00003256  345B                    1929      MOVEA.W (A3)+, A2
00003258  3463                    1930      MOVEA.W -(A3), A2
0000325A  3478 1050               1931      MOVEA.W $1050, A2
0000325E  3479 000F1050           1932      MOVEA.W $000F1050, A2
00003264  347C 1050               1933      MOVEA.W #$1050, A2
00003268  2442                    1934      MOVEA.L D2, A2
0000326A  244B                    1935      MOVEA.L A3, A2
0000326C  2453                    1936      MOVEA.L (A3), A2
0000326E  245B                    1937      MOVEA.L (A3)+, A2
00003270  2463                    1938      MOVEA.L -(A3), A2
00003272  2478 1050               1939      MOVEA.L $1050, A2
00003276  2479 000F1050           1940      MOVEA.L $000F1050, A2
0000327C  247C 00001050           1941      MOVEA.L #$1050, A2
00003282                          1942      
00003282                          1943      *MOVEQ* (good) ONLY WORKS ON LONGS
00003282  74FF                    1944      MOVEQ.L #255, D2
00003284  7411                    1945      MOVEQ.L #$00000011, D2
00003286                          1946      
00003286                          1947      *MOVEM* move multiple registers... saving this for last i think
00003286                          1948      
00003286                          1949      *ADD* this one also weird with the whole effecive address thing...
00003286                          1950      
00003286                          1951      *ADDA* *good) ADDA CANT OPERATE ON BYTES
00003286  D4C2                    1952      ADDA.W D2, A2
00003288  D4CB                    1953      ADDA.W A3, A2
0000328A  D4D3                    1954      ADDA.W (A3), A2
0000328C  D4DB                    1955      ADDA.W (A3)+, A2
0000328E  D4E3                    1956      ADDA.W -(A3), A2
00003290  D4F8 1050               1957      ADDA.W $1050, A2
00003294  D4F9 000F1050           1958      ADDA.W $000F1050, A2
0000329A  D4FC 1050               1959      ADDA.W #$1050, A2
0000329E  D5C2                    1960      ADDA.L D2, A2
000032A0  D5CB                    1961      ADDA.L A3, A2
000032A2  D5D3                    1962      ADDA.L (A3), A2
000032A4  D5DB                    1963      ADDA.L (A3)+, A2
000032A6  D5E3                    1964      ADDA.L -(A3), A2
000032A8  D5F8 1050               1965      ADDA.L $1050, A2
000032AC  D5F9 000F1050           1966      ADDA.L $000F1050, A2
000032B2  D5FC 00001050           1967      ADDA.L #$1050, A2
000032B8                          1968      
000032B8                          1969      *ADDI*  (good) BYTE DONE
000032B8  0602 0012               1970      ADDI.B #$12, D2
000032BC  0612 0045               1971      ADDI.B #$45, (A2)
000032C0  061A 0056               1972      ADDI.B #$56, (A2)+
000032C4  0622 0067               1973      ADDI.B #$67, -(A2)
000032C8  0638 0056 1060          1974      ADDI.B #$56, $1060
000032CE  0639 0089 000F1060      1975      ADDI.B #$89, $000F1060
000032D6  0642 1234               1976      ADDI.W #$1234, D2
000032DA  0652 2345               1977      ADDI.W #$2345, (A2)
000032DE  065A 3456               1978      ADDI.W #$3456, (A2)+
000032E2  0662 4567               1979      ADDI.W #$4567, -(A2)
000032E6  0678 5678 1060          1980      ADDI.W #$5678, $1060
000032EC  0679 6789 000F1060      1981      ADDI.W #$6789, $000F1060
000032F4  0682 00001234           1982      ADDI.L #$1234, D2
000032FA  0692 00002345           1983      ADDI.L #$2345, (A2)
00003300  069A 00003456           1984      ADDI.L #$3456, (A2)+
00003306  06A2 00004567           1985      ADDI.L #$4567, -(A2)
0000330C  06B8 00005678 1060      1986      ADDI.L #$5678, $1060
00003314  06B9 00006789 000F1060  1987      ADDI.L #$6789, $000F1060
0000331E                          1988      
0000331E                          1989      *ADDQ* (good) BYTE DONE, cant move a byte into an address reg...
0000331E  5203                    1990      ADDQ.B  #1, D3
00003320  561B                    1991      ADDQ.B  #3, (A3)+
00003322  5823                    1992      ADDQ.B  #4, -(A3)
00003324  5A38 1234               1993      ADDQ.B  #5, $1234
00003328  5C39 000F1234           1994      ADDQ.B  #6, $000F1234
0000332E  5243                    1995      ADDQ.W  #1, D3
00003330  544B                    1996      ADDQ.W  #2, A3
00003332  565B                    1997      ADDQ.W  #3, (A3)+
00003334  5863                    1998      ADDQ.W  #4, -(A3)
00003336  5A78 1234               1999      ADDQ.W  #5, $1234
0000333A  5C79 000F1234           2000      ADDQ.W  #6, $000F1234
00003340  5283                    2001      ADDQ.L  #1, D3
00003342  548B                    2002      ADDQ.L  #2, A3
00003344  569B                    2003      ADDQ.L  #3, (A3)+
00003346  58A3                    2004      ADDQ.L  #4, -(A3)
00003348  5AB8 1234               2005      ADDQ.L  #5, $1234
0000334C  5CB9 000F1234           2006      ADDQ.L  #6, $000F1234
00003352                          2007      
00003352                          2008      *SUB*  same with the effective address thing
00003352                          2009      
00003352                          2010      *MULS*  same as sub and add
00003352                          2011      
00003352                          2012      *DIVU* same as sub add muls
00003352                          2013      
00003352                          2014      *LEA*   (good)
00003352  47D4                    2015      LEA (A4), A3
00003354  47F8 1234               2016      LEA $1234, A3
00003358  47F9 12345678           2017      LEA $12345678, A3
0000335E  47F9 000033D4           2018      LEA TEST_MESSAGE, A3
00003364                          2019      
00003364                          2020      *CLR*   (good) BYTE DONE
00003364  4201                    2021      CLR.B   D1
00003366  4211                    2022      CLR.B   (A1)
00003368  4219                    2023      CLR.B   (A1)+
0000336A  4221                    2024      CLR.B   -(A1)
0000336C  4238 1234               2025      CLR.B   $1234
00003370  4239 12345678           2026      CLR.B   $12345678
00003376  4241                    2027      CLR.W   D1
00003378  4251                    2028      CLR.W   (A1)
0000337A  4259                    2029      CLR.W   (A1)+
0000337C  4261                    2030      CLR.W   -(A1)
0000337E  4278 1234               2031      CLR.W   $1234
00003382  4279 12345678           2032      CLR.W   $12345678
00003388  4281                    2033      CLR.L   D1
0000338A  4291                    2034      CLR.L   (A1)
0000338C  4299                    2035      CLR.L   (A1)+
0000338E  42A1                    2036      CLR.L   -(A1)
00003390  42B8 1234               2037      CLR.L   $1234
00003394  42B9 12345678           2038      CLR.L   $12345678
0000339A                          2039      
0000339A                          2040      
0000339A                          2041      *AND*  damn it gonna have to look this up on github
0000339A                          2042      
0000339A                          2043      *OR*    and this
0000339A                          2044      
0000339A                          2045      *LSL* look up this
0000339A                          2046      
0000339A                          2047      *LSR*  and this
0000339A                          2048      
0000339A                          2049      *ASR*  and this
0000339A                          2050      
0000339A                          2051      *ASL*  and this
0000339A                          2052      
0000339A                          2053      *ROL*  and this
0000339A                          2054      
0000339A                          2055      *ROR*  and this
0000339A                          2056      
0000339A                          2057      *CMP*   (good) BYTE DONE.... cant do     CMP.B   A1, D2
0000339A  B401                    2058      CMP.B   D1, D2
0000339C  B411                    2059      CMP.B   (A1), D2
0000339E  B419                    2060      CMP.B   (A1)+, D2
000033A0  B421                    2061      CMP.B   -(A1), D2
000033A2  B438 1000               2062      CMP.B   $1000, D2
000033A6  B438 1002               2063      CMP.B   $00001002, D2
000033AA  B441                    2064      CMP.W   D1, D2
000033AC  B449                    2065      CMP.W   A1, D2
000033AE  B451                    2066      CMP.W   (A1), D2
000033B0  B459                    2067      CMP.W   (A1)+, D2
000033B2  B461                    2068      CMP.W   -(A1), D2
000033B4  B478 1000               2069      CMP.W   $1000, D2
000033B8  B478 1002               2070      CMP.W   $00001002, D2
000033BC  B481                    2071      CMP.L   D1, D2
000033BE  B489                    2072      CMP.L   A1, D2
000033C0  B491                    2073      CMP.L   (A1), D2
000033C2  B499                    2074      CMP.L   (A1)+, D2
000033C4  B4A1                    2075      CMP.L   -(A1), D2
000033C6  B4B8 1000               2076      CMP.L   $1000, D2
000033CA  B4B8 1002               2077      CMP.L   $00001002, D2
000033CE                          2078      
000033CE                          2079      *BCC*  look these up
000033CE                          2080      
000033CE                          2081      *BGT*   look these up 
000033CE                          2082      
000033CE                          2083      *BLE*   look these up
000033CE                          2084      
000033CE                          2085      *JSR*  (NOT SURE HOW TO TEST THIS CORRECTLY
000033CE                          2086      *JSR $1234
000033CE                          2087      *JSR $12345678
000033CE                          2088      *JSR (A4)
000033CE                          2089      
000033CE                          2090      *RTS* (good)
000033CE  4E75                    2091      RTS
000033D0                          2092      
000033D0                          2093      
000033D0                          2094      
000033D0  FFFF FFFF               2095      SIMHALT             ; halt simulator
000033D4                          2096  
000033D4= 49 20 4C 4F 56 45 ...   2097  TEST_MESSAGE    DC.B 'I LOVE APPLES',0
000033E2                          2098  
000033E2                          2099  
000033E2                          2100  
000033E2                          2101  
000033E2                          2102  
000033E2                          2103  
000033E2                          2104  
000033E2                          2105  -------------------- end include --------------------
000033E2                          2106  
000033E2  FFFF FFFF               2107      SIMHALT             ; halt simulator
000033E6                          2108  
000033E6  =0000000D               2109  CR          EQU     $0D
000033E6  =0000000A               2110  LF          EQU     $0A
000033E6                          2111  
000033E6= 50 6C 65 61 73 65 ...   2112  M_INPUT_START DC.B 'Please enter starting memory address in hexadecimal:',CR,LF,0
0000341D= 50 6C 65 61 73 65 ...   2113  M_INPUT_END   DC.B 'Please enter ending memory address in hexadecimal:',CR,LF,0
00003452= 49 6E 76 61 6C 69 ...   2114  M_INVALID     DC.B 'Invalid value. Please enter a valid value: ',CR,LF,0
00003480= 45 71 75 61 6C 20 ...   2115  M_EQUAL       DC.B 'Equal values. No memory read. Please enter new values',CR,LF,0
000034B8= 44 41 54 41 20 20 ...   2116  M_DATA        DC.B 'DATA    ',0
000034C1= 20 20 20 20 00          2117  M_TAB         DC.B '    ',0
000034C6= 50 72 65 73 73 20 ...   2118  M_PRESS_CONT  DC.B 'Press any key to continue',0
000034E0                          2119  
000034E0  =00000500               2120  STRING_START    EQU     $0500
000034E0  =00000400               2121  DATA_START      EQU     $0400
000034E0                          2122  
000034E0  =00000100               2123  MEM_START       EQU     $0100
000034E0  =00000200               2124  MEM_END         EQU     $0200
000034E0                          2125  
000034E0= 20 00                   2126  M_SPACE       DC.B  ' ',0
000034E2= 0D 0A 00                2127  M_NEW_LINE    DC.B  '',CR,LF,0
000034E5                          2128  
000034E5= 41 44 44 49 00          2129  ADDI    DC.B    'ADDI',0
000034EA= 4D 4F 56 45 00          2130  MOVE    DC.B    'MOVE',0
000034EF= 4D 4F 56 45 41 00       2131  MOVEA   DC.B    'MOVEA',0
000034F5= 43 4C 52 00             2132  OPCLR   DC.B    'CLR',0
000034F9= 4C 45 41 00             2133  OPLEA   DC.B    'LEA',0
000034FD= 4A 53 52 00             2134  OPJSR   DC.B    'JSR',0
00003501= 4E 4F 50 00             2135  OPNOP   DC.B    'NOP',0
00003505= 52 54 53 00             2136  OPRTS   DC.B    'RTS',0
00003509= 4D 4F 56 45 4D 00       2137  MOVEM   DC.B    'MOVEM',0
0000350F= 41 44 44 51 00          2138  ADDQ    DC.B    'ADDQ',0
00003514= 42 00                   2139  Bcc     DC.B    'B',0
00003516= 4D 4F 56 45 51 00       2140  MOVEQ   DC.B    'MOVEQ',0
0000351C= 44 49 56 55 00          2141  DIVU    DC.B    'DIVU',0
00003521= 4F 52 00                2142  OR      DC.B    'OR',0
00003524= 53 55 42 00             2143  OPSUB   DC.B    'SUB',0
00003528= 43 4D 50 00             2144  CMP     DC.B    'CMP',0
0000352C= 4D 55 4C 53 00          2145  MULS    DC.B    'MULS',0
00003531= 41 4E 44 00             2146  AND     DC.B    'AND',0
00003535= 41 44 44 00             2147  ADD     DC.B    'ADD',0
00003539= 41 44 44 41 00          2148  ADDA    DC.B    'ADDA',0
0000353E= 4C 53 4C 00             2149  LSL     DC.B    'LSL',0
00003542= 4C 53 52 00             2150  LSR     DC.B    'LSR',0
00003546= 41 53 4C 00             2151  ASL     DC.B    'ASL',0
0000354A= 41 53 52 00             2152  ASR     DC.B    'ASR',0
0000354E= 52 4F 4C 00             2153  ROL     DC.B    'ROL',0
00003552= 52 4F 52 00             2154  ROR     DC.B    'ROR',0
00003556= 49 4E 56 41 4C 49 ...   2155  M_INVAL DC.B 'INVALID',0
0000355E= 24 00                   2156  M_CASH  DC.B '$',0
00003560                          2157  *M_SPACE DC.B ' ',0
00003560= 2C 00                   2158  M_COMMA DC.B ',',0
00003562= 23 00                   2159  M_POUND DC.B '#',0
00003564= 2E 00                   2160  M_DOT   DC.B '.',0
00003566= 57 00                   2161  M_WORD  DC.B 'W',0
00003568= 42 00                   2162  M_BYTE  DC.B 'B',0
0000356A= 4C 00                   2163  M_LONG  DC.B 'L',0
0000356C= 28 00                   2164  M_OPEN  DC.B '(',0
0000356E= 29 00                   2165  M_CLOSE DC.B ')',0
00003570= 2B 00                   2166  M_PLUS  DC.B '+',0
00003572= 2D 00                   2167  M_SUB   DC.B '-',0
00003574= 44 00                   2168  M_DREG  DC.B 'D',0
00003576= 41 00                   2169  M_AREG  DC.B 'A',0
00003578= 43 43 00                2170  M_CC    DC.B 'CC',0
0000357B= 47 54 00                2171  M_GT    DC.B 'GT',0
0000357E= 4C 45 00                2172  M_LE    DC.B 'LE',0
00003581= 2F 00                   2173  M_SLASH DC.B '/',0
00003583                          2174  
00003583                          2175  
00003583                          2176  STOP:
00003583                          2177      END    MAIN

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSL_6              1D64
ABSW_5              1D54
ADD                 3535
ADDA                3539
ADDI                34E5
ADDI_2              1D2A
ADDI_ERROR_CHECK    1C78
ADDM_4              1D48
ADDP_3              1D3C
ADDQ                350F
ADDRESS_REGISTERS   1BF0
ADDR_1              1D1C
ADD_CHAR            1EF6
ADD_ERROR_CHECK     1C5E
ALPH_CHAR           128A
AND                 3531
ASL                 3546
ASR                 354A
BCC                 3514
BYEBYE              1C50
BYTE                1F20
CASH                1F64
CC                  1F6C
CHECK_TYPE          1C14
CLOSE               1F44
CMP                 3528
COMMA               1EFA
COMMA_SPACE         1C28
COMMA_SPACE2        1C38
CONVERT_TO_ASCII    1278
CR                  D
DATA                12C0
DATA_0              1D0E
DATA_START          400
DIVU                351C
DN_VERSION          176E
DONE                1A9A
DONE_PRINTING       1C48
DOT                 1F0A
EA2                 1BC4
EAP                 1B80
EAS                 1B88
EAT_INVALID         1CD6
EA_ADD              174E
EA_ADDA             18C4
EA_ADDI             1808
EA_ADDQ             186A
EA_BCC              1AFC
EA_CLR              19C8
EA_CMP              1AA2
EA_JSR              1B20
EA_LEA              1970
EA_LSD              1A0E
EA_MOVE             1648
EA_MOVEA            16BC
EA_MOVEM            1B5E
EA_MOVEQ            1714
EA_MULS             191E
EA_PRINT_ADDRESS    1C02
EA_SHIFT            1A62
EA_VERSION          17B8
EFFECTIVE_ADDRESSING  1196
END                 12CE
END_PRINT_DATA_LOOP  1216
EQUAL_ERROR         113E
FOR_2               1BF2
FOR_LOOP            1BCE
GET_DATA            1E0C
GET_NEXT_INPUT      1066
GET_OPMODE          1DBC
GET_OPMODE_MATH     1DD4
GET_REG             1DB2
GET_SIZE            1D92
GET_SIZE_ADDI       1E26
GT                  1F74
IMME_7              1D7C
IM_NEW_LINE         1298
IM_SPACE            12A6
INCREMENT_LINE      11B4
INPUT_END           103A
INPUT_START         100A
INVALID             1F8C
INVALID_CHAR_ERROR  10D2
INVALID_OPCODE      11BC
INVALID_OPCODE_CONT  11CA
JFF                 1BFE
JFZ                 1BDA
LE                  1F7C
LEA_ERROR_CHECK     1C8A
LF                  A
LONG                1F2E
LSL                 353E
LSR                 3542
MAIN                1000
MEM_END             200
MEM_START           100
MODE_CHOOSER        1E88
MODE_JUMP           1CDE
MOVE                34EA
MOVEA               34EF
MOVEM               3509
MOVEM_ERROR_CHECK   1CB4
MOVEQ               3516
MOVE_ERROR_CHECK    1C54
MULS                352C
M_AREG              3576
M_BYTE              3568
M_CASH              355E
M_CC                3578
M_CLOSE             356E
M_COMMA             3560
M_DATA              34B8
M_DOT               3564
M_DREG              3574
M_EQUAL             3480
M_GT                357B
M_INPUT_END         341D
M_INPUT_START       33E6
M_INVAL             3556
M_INVALID           3452
M_LE                357E
M_LONG              356A
M_NEW_LINE          34E2
M_OPEN              356C
M_PLUS              3570
M_POUND             3562
M_PRESS_CONT        34C6
M_SLASH             3581
M_SPACE             34E0
M_SUB               3572
M_TAB               34C1
M_WORD              3566
NEW_MODE            1E92
NUMERIC_CHAR        1284
OP0000              1348
OP0001              1358
OP0010              1368
OP0011              136C
OP0100              13A4
OP0101              144C
OP0110              145C
OP0111              1476
OP1000              1486
OP1001              14BC
OP1011              14CC
OP1100              14DC
OP1101              1514
OP1110              154C
OPCLR               34F5
OPEN                1F3C
OPJSR               34FD
OPLEA               34F9
OPNOP               3501
OPRTS               3505
OPSUB               3524
OP_JTAB             12E6
OR                  3521
OUTPUT_CHAR         1290
OUTPUT_D1B          1220
OUTPUT_HEX          1EAC
PASTE_3             1626
PASTE_4             162E
PASTE_5             1638
PLUS                1F4C
POUND               1F02
PRESS_TO_CONTINUE   1196
PRE_READ_MEMORY     116A
PRINT_8             1E20
PRINT_ADDRESS       11E8
PRINT_ADDRESS_LOOP  11EE
PRINT_BCC           1E56
PRINT_CURRENT       1BDE
PRINT_DATA          11D0
PRINT_DATA_LOOP     1202
PRINT_LIST          1BBC
PRINT_OPCODE        1262
PRINT_OPCODE_EA     1248
READ_CHAR           1068
READ_CHAR_LOOP      108A
READ_MEMORY         1120
READ_MEMORY_CONT    1184
READ_MEMORY_LOOP    116C
REG_SIZE            1E70
REMOVE_ZERO         1084
REMOVE_ZEROES       1072
RETURN_TO_SUBROUTINE  1276
ROL                 354E
ROR                 3552
SLASH               1F84
SPACE               1F5C
STOP                3583
STRING_START        500
SUB                 1F54
SWAP_VALUES         114E
TAB                 12B2
TEST                110C
TEST_MESSAGE        33D4
TO_FIVE             1EA8
TO_SIX              1EA4
TYPE_CHOOSER        1E46
VALIDATE_START_END  112C
VALID_CHAR          10FC
VALID_LETTER_LC     10F4
VALID_LETTER_UC     10EC
VALID_NUMBER        10E4
VALID_OPCODE        123C
VERIFY_OPCODE       12CE
WORD                1F12
_ADD                152C
_ADDA               153C
_AND                1504
_ASD                15B2
_ASL                15CC
_ASR                15DC
_CLR                13EC
_DIVU               149E
_JSR                140C
_LEA                13FC
_LSD                157A
_LSL                1592
_LSR                15A2
_MOVE               1384
_MOVEA              1394
_MOVEM              143C
_MULS               14F4
_NOP                141C
_OR                 14AE
_ROD                15EC
_ROL                1606
_ROR                1616
_RTS                142C
