00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/2/2016 1:45:44 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  MAIN:                  ; first instruction of program
00001000  1401                       9      MOVE.B          D1, D2
00001002  6000 0002                 10      BRA             INPUT_START
00001006                            11      
00001006                            12      INCLUDE         'Main.X68'
00001006                            13      
00001006                            14  
00001006                            15  INPUT_START
00001006  43F9 000070A0             16      LEA         M_INPUT_START,A1      *load message
0000100C  103C 000E                 17      MOVE.B      #14,D0          *display string
00001010  4E4F                      18      TRAP        #15             *output string
00001012  227C 00000300             19      MOVE.L      #$0300,A1       *set address of register A1 for string
00001018  103C 0002                 20      MOVE.B      #2,D0           *input string into A1 Trap
0000101C  4E4F                      21      TRAP        #15             *input string from user
0000101E  6100 0040                 22      BSR         READ_CHAR       *check for valid input
00001022  23C3 00000100             23      MOVE.L      D3,MEM_START    *put the starting address in memory
00001028  B87C 0000                 24      CMP         #0,D4           *check the result register (D4)
0000102C  6700 0004                 25      BEQ         INPUT_END       *valid value. read the ending value
00001030  60D4                      26      BRA         INPUT_START     *invalid value. try inputting start value again    
00001032                            27      
00001032                            28  INPUT_END
00001032  43F9 000070D7             29      LEA         M_INPUT_END,A1  *load message
00001038  103C 000E                 30      MOVE.B      #14,D0          *display string
0000103C  4E4F                      31      TRAP        #15             *output string
0000103E  227C 00000300             32      MOVE.L      #$0300,A1       *set address of register A1 for string
00001044  103C 0002                 33      MOVE.B      #2,D0           *input string into A1 Trap
00001048  4E4F                      34      TRAP        #15             *input string from user
0000104A  6100 0014                 35      BSR         READ_CHAR       *check for valid input
0000104E  23C3 00000200             36      MOVE.L      D3,MEM_END      *put ending address into memory
00001054  B87C 0000                 37      CMP         #0,D4           *check the result register (D4)
00001058  6700 00BE                 38      BEQ         READ_MEMORY     *valid value. read the ending value
0000105C  60D4                      39      BRA         INPUT_END       *invalid value. try inputting start value again    
0000105E                            40      
0000105E                            41  GET_NEXT_INPUT
0000105E  4E75                      42      RTS
00001060                            43  
00001060                            44  READ_CHAR                       *verify that string is valid (all hexadecimal digits)
00001060  4243                      45      CLR         D3              *D3 will act as the total result
00001062  2849                      46      MOVE.L      A1,A4           *the stop address
00001064  143C 0006                 47      MOVE.B      #6,D2           *put 6 in D2
00001068  D8C2                      48      ADD.W       D2,A4           *A4 is now the stop address(A4)
0000106A                            49      
0000106A                            50  REMOVE_ZEROES
0000106A  4281                      51      CLR.L       D1              *D1 will act as the temporary value
0000106C  1211                      52      MOVE.B      (A1),D1         *read the byte from string
0000106E  143C 0030                 53      MOVE.B      #$30,D2         *put ascii zero in D2
00001072  B202                      54      CMP.B       D2,D1           *compare ascii zero and value of D1
00001074  6700 0006                 55      BEQ         REMOVE_ZERO     *skip over that character   
00001078  6000 0008                 56      BRA         READ_CHAR_LOOP  *begin converting characters to numerical values
0000107C                            57  REMOVE_ZERO
0000107C  5289                      58      ADD.L       #1,A1           *increment string start address
0000107E  528C                      59      ADD.L       #1,A4           *increment string end address
00001080  60E8                      60      BRA         REMOVE_ZEROES   *loop back and keep removing zeroes
00001082                            61  READ_CHAR_LOOP     
00001082  4281                      62      CLR.L       D1              *D1 will act as the temporary value
00001084  1211                      63      MOVE.B      (A1),D1         *read the byte from string
00001086  B27C 0000                 64      CMP         #0,D1           *compare 00 (NULL) and the byte ascii value in D1
0000108A  67D2                      65      BEQ         GET_NEXT_INPUT    *if you reached the end of the string, end loop
0000108C                            66      
0000108C  143C 0030                 67      MOVE.B      #$30,D2         *put ascii zero in D2
00001090  B202                      68      CMP.B       D2,D1           *compare ascii zero and value of D1
00001092  6D00 0036                 69      BLT         INVALID_CHAR_ERROR *branch on invalid (too small) ascii value   
00001096  143C 0066                 70      MOVE.B      #$66,D2         *put ascii f in D2
0000109A  B202                      71      CMP.B       D2,D1           *compare ascii f and value of D1
0000109C  6E2C                      72      BGT.B       INVALID_CHAR_ERROR *branch on invalid ascii value
0000109E  143C 0061                 73      MOVE.B      #$61,D2         *put ascii a in D2
000010A2  B202                      74      CMP.B       D2,D1           *compare ascii a and value of D1
000010A4  6C00 0046                 75      BGE         VALID_LETTER_LC *value is between a and f. Loop back.
000010A8                            76      
000010A8  143C 0039                 77      MOVE.B      #$39,D2         *put ascii 9 in D2
000010AC  B202                      78      CMP.B       D2,D1           *compare ascii 9 and value of D1
000010AE  6F00 002C                 79      BLE         VALID_NUMBER    *value between 0 and 9. Loop back.
000010B2                            80  
000010B2  143C 0041                 81      MOVE.B      #$41,D2         *put ascii A into D2
000010B6  B202                      82      CMP.B       D2,D1           *compare ascii A and value of D1
000010B8  6D00 0010                 83      BLT         INVALID_CHAR_ERROR    *value between 9 and A (Invalid)
000010BC                            84      
000010BC  143C 0046                 85      MOVE.B      #$46,D2         *put ascii F into D2
000010C0  B202                      86      CMP.B       D2,D1           *compare ascii F and value of D1
000010C2  6E00 0006                 87      BGT         INVALID_CHAR_ERROR    *value between F and a (Invalid)
000010C6                            88           
000010C6  6000 001C                 89      BRA         VALID_LETTER_UC *value is between A and F        
000010CA                            90  INVALID_CHAR_ERROR   
000010CA  43F9 0000710C             91      LEA         M_INVALID,A1    *load error message
000010D0  103C 000E                 92      MOVE.B      #14,D0          *display string trap
000010D4  4E4F                      93      TRAP        #15             *output error message
000010D6  183C 0001                 94      MOVE.B      #1,D4           *put invalid output in result register
000010DA  4E75                      95      RTS
000010DC                            96  VALID_NUMBER
000010DC  0401 0030                 97      SUB.B       #$30,D1         *get actual value from ascii value
000010E0  6000 0012                 98      BRA         VALID_CHAR      *read the next char in string
000010E4                            99  VALID_LETTER_UC
000010E4  0401 0037                100      SUB.B       #$37,D1         *get actual value from ascii value
000010E8  6000 000A                101      BRA         VALID_CHAR      *read the next char in string    
000010EC                           102  VALID_LETTER_LC
000010EC  0401 0057                103      SUB.B       #$57,D1         *get actual value from ascii value
000010F0  6000 0002                104      BRA         VALID_CHAR      *read the next char in string   
000010F4                           105  VALID_CHAR
000010F4  183C 0000                106      MOVE.B      #0,D4           *return valid value entry in D4    
000010F8  E98B                     107      LSL.L       #4,D3           *put hex digit in proper place
000010FA  D681                     108      ADD.L       D1,D3           *put new total in D3
000010FC  5289                     109      ADD.L       #1,A1           *increment address
000010FE  B8C9                     110      CMP         A1,A4           *if A1 > A4
00001100  6E80                     111      BGT         READ_CHAR_LOOP  *begin converting to float    
00001102  4E75                     112      RTS                         *loop back to INPUT_START || INPUT_END   
00001104                           113     
00001104                           114  TEST
00001104  23FC 00003000 00000100   115      MOVE.L      #$3000,MEM_START
0000110E  23FC 00003300 00000200   116      MOVE.L      #$3300,MEM_END
00001118                           117  READ_MEMORY   
00001118  2479 00000100            118      MOVEA.L     MEM_START,A2    *A2 will be the starting/current address
0000111E  2679 00000200            119      MOVEA.L     MEM_END,A3      *A3 will act as the ending address
00001124                           120      
00001124                           121  VALIDATE_START_END
00001124  220A                     122      MOVE.L      A2,D1           *copy start address into D1
00001126  240B                     123      MOVE.L      A3,D2           *copy end address into D2
00001128  B441                     124      CMP         D1,D2           *compare start and end values
0000112A  6700 000A                125      BEQ         EQUAL_ERROR     *Start address is equal to end address
0000112E  6E00 0016                126      BGT         SWAP_VALUES     *Start address is larger than end address
00001132  6000 002E                127      BRA         PRE_READ_MEMORY *begin reading memory
00001136                           128      
00001136                           129  EQUAL_ERROR
00001136  43F9 0000713A            130      LEA         M_EQUAL,A1      *load error message
0000113C  103C 000E                131      MOVE.B      #14,D0          *display string trap
00001140  4E4F                     132      TRAP        #15             *output error message
00001142  6000 FEC2                133      BRA         INPUT_START     *restart program (request ui again)
00001146                           134      
00001146                           135  SWAP_VALUES
00001146  2239 00000100            136      MOVE.L      MEM_START,D1    *put starting address in D1
0000114C  2439 00000200            137      MOVE.L      MEM_END,D2      *put ending address in D2
00001152  23C2 00000100            138      MOVE.L      D2,MEM_START    *swap the two values in memory
00001158  23C1 00000200            139      MOVE.L      D1,MEM_END
0000115E  2442                     140      MOVEA.L     D2,A2           *A2 will be the starting/current address
00001160  2641                     141      MOVEA.L     D1,A3           *A3 will act as the ending address
00001162                           142  PRE_READ_MEMORY
00001162  2C4A                     143      MOVE.L      A2,A6           *A6 will act as the current address for Data               
00001164                           144  READ_MEMORY_LOOP
00001164  2679 00000200            145      MOVE.L      MEM_END,A3        *put ending address in A3
0000116A  B6CA                     146      CMP         A2,A3             *compare the incrementing address and the end address
0000116C  6D00 0020                147      BLT         CONTINUE_YN       *stop if the end address is reached
00001170                           148      
00001170  E05E                     149      ROR         #8,D6               *select correct byte
00001172  BC3C 001E                150      CMP.B       #30,D6              *see if maximum lines printed
00001176  6C00 0048                151      BGE         PRESS_TO_CONTINUE
0000117A  E15E                     152      ROL         #8,D6   
0000117C                           153  READ_MEMORY_CONT                    *continue reading memory (if branched)  
0000117C  101A                     154      MOVE.B      (A2)+,D0          *get the value from incrementing address 
0000117E  E148                     155      LSL.W       #8,D0             *make room for the next byte of A2
00001180  1012                     156      MOVE.B      (A2),D0          *copy the rest of A2 to D0  
00001182  538A                     157      SUB.L       #1, A2
00001184  47F9 00000500            158      LEA         STRING_START,A3   *A3 will act as the string address  
0000118A  6000 01A6                159      BRA         VERIFY_OPCODE
0000118E                           160      
0000118E                           161      
0000118E                           162          
0000118E                           163  
0000118E                           164  EFFECTIVE_ADDRESSING
0000118E                           165  
0000118E                           166  
0000118E                           167  CONTINUE_YN
0000118E  43F9 0000719A            168      LEA         M_FINISHED,A1       *print out finished reading address
00001194  103C 000E                169      MOVE.B      #14,D0
00001198  4E4F                     170      TRAP        #15
0000119A  43F9 000071B4            171      LEA         M_CONTINUE,A1        *ask the user if they want to read again
000011A0  103C 000E                172      MOVE.B      #14,D0
000011A4  4E4F                     173      TRAP        #15
000011A6  103C 0005                174      MOVE.B      #5,D0               *get user input
000011AA  4E4F                     175      TRAP        #15
000011AC  B23C 0059                176      CMP.B       #89,D1              *compare user input and ascii 'Y'
000011B0  6700 00F8                177      BEQ         RESTART             *
000011B4  B23C 0079                178      CMP.B       #121,D1             *compare user input with ascii 'y'
000011B8  6700 00F0                179      BEQ         RESTART
000011BC  6000 5ED2                180      BRA         END
000011C0                           181      
000011C0                           182  PRESS_TO_CONTINUE
000011C0  1C3C 0000                183      MOVE.B      #00,D6              *reset counter
000011C4  E19E                     184      ROL.L       #8,D6               *put byte back in place
000011C6  43F9 00007180            185      LEA         M_PRESS_CONT,A1     *load press key to continue messageu
000011CC  103C 000E                186      MOVE.B      #14,D0              *load into D0
000011D0  4E4F                     187      TRAP        #15                 *display message
000011D2  103C 0005                188      MOVE.B      #5,D0               *read single character from keyboard
000011D6  4E4F                     189      TRAP        #15    
000011D8  6100 0122                190      BSR         IM_NEW_LINE            *add new line
000011DC  609E                     191      BRA         READ_MEMORY_CONT    *continue reading loop
000011DE                           192      
000011DE                           193  INCREMENT_LINE
000011DE  E09E                     194      ROR.L       #8,D6               *select correct byte
000011E0  5206                     195      ADD.B       #1,D6               *increment counter
000011E2  E19E                     196      ROL.L       #8,D6               *put byte back in place
000011E4  4E75                     197      RTS 
000011E6                           198      
000011E6                           199  INVALID_OPCODE
000011E6  BC3C 0008                200      CMP.B       #8,D6               *check the loop increment counter
000011EA  6D00 000A                201      BLT         INVALID_OPCODE_CONT *less than long length. continue       
000011EE  6100 000E                202      BSR         PRINT_DATA          *long amount of data. print it.
000011F2  6000 FF70                203      BRA         READ_MEMORY_LOOP    *read the next byte
000011F6                           204  INVALID_OPCODE_CONT  
000011F6  528A                     205      ADD.L       #1,A2               *increment current address  
000011F8  5206                     206      ADD.B       #1,D6               *increment counter
000011FA  6000 FF68                207      BRA         READ_MEMORY_LOOP    *data cap not reached. read next byte.    
000011FE                           208      
000011FE                           209  PRINT_DATA
000011FE  1C3C 0000                210      MOVE.B      #00,D6              *reset the increment counter
00001202  6100 0012                211      BSR         PRINT_DATA_ADDRESS       *print the data address
00001206  6100 010E                212      BSR         TAB                 *insert a space
0000120A  6100 0118                213      BSR         DATA                *print 'DATA'       
0000120E  6100 0028                214      BSR         PRINT_DATA_LOOP     *print the data
00001212  61CA                     215      BSR         INCREMENT_LINE      *increment line counter (line was printed)
00001214  4E75                     216      RTS
00001216                           217  
00001216                           218  PRINT_DATA_ADDRESS
00001216  280E                     219      MOVE.L      A6,D4               *put the address in D4
00001218  4243                     220      CLR         D3                  *counter for long
0000121A  6000 0008                221      BRA         PRINT_ADDRESS_LOOP
0000121E                           222  PRINT_ADDRESS
0000121E  280E                     223      MOVE.L      A6,D4               *put the address in D4
00001220  4243                     224      CLR         D3                  *counter for long
00001222  2C4A                     225      MOVE.L      A2, A6
00001224                           226      
00001224                           227  PRINT_ADDRESS_LOOP
00001224  B67C 0004                228      CMP         #4,D3               *if long reached
00001228  6C00 00B0                229      BGE         RETURN_TO_SUBROUTINE *exit loop
0000122C  E19C                     230      ROL.L       #8,D4               *put ending byte at beginning
0000122E  1204                     231      MOVE.B      D4,D1               *put byte in D1 for printing
00001230  6100 0022                232      BSR         OUTPUT_D1B          *print the first byte of D1
00001234  5203                     233      ADD.B       #1,D3               *increment D3 (loop counter)
00001236  60EC                     234      BRA         PRINT_ADDRESS_LOOP  *repeat loop         
00001238                           235           
00001238                           236  PRINT_DATA_LOOP
00001238  121E                     237      MOVE.B      (A6)+,D1            *get the data
0000123A  1401                     238      MOVE.B      D1,D2               *copy the data to D2
0000123C  BDCA                     239      CMP.L       A2,A6               *if current address reached
0000123E  6E00 000C                240      BGT         END_PRINT_DATA_LOOP *continue reading addresses 
00001242                           241                                      *otherwise keep printing the data
00001242  6100 0010                242      BSR         OUTPUT_D1B          *print byte in D1 in hex
00001246                           243      *---print a space----*
00001246  6100 00C2                244      BSR         IM_SPACE               *print a space                                
0000124A  60EC                     245      BRA         PRINT_DATA_LOOP     *repeat loop
0000124C                           246  
0000124C                           247  END_PRINT_DATA_LOOP
0000124C  2C4A                     248      MOVE.L      A2,A6               *set new address for data/opcode
0000124E  6100 00AC                249      BSR         IM_NEW_LINE            *end line
00001252  4E75                     250      RTS                             *repeat loop   
00001254                           251   
00001254                           252  OUTPUT_D1B
00001254                           253      *print the left character
00001254  1401                     254      MOVE.B      D1,D2               *copy D1 to D2
00001256  E809                     255      LSR.B       #4,D1               *get rid of right nibble  
00001258  6100 0082                256      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
0000125C  6100 0096                257      BSR         OUTPUT_CHAR         *print the char in D1
00001260                           258      *print the right character
00001260  E90A                     259      LSL.B       #4,D2               *get rid of left nibble
00001262  E80A                     260      LSR.B       #4,D2               *put right nibble in place
00001264  1202                     261      MOVE.B      D2,D1               *put right nibble in D1
00001266  6100 0074                262      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
0000126A  6100 0088                263      BSR         OUTPUT_CHAR         *print the char in D1
0000126E  4E75                     264      RTS
00001270                           265  VALID_OPCODE
00001270  BC3C 0000                266      CMP.B       #00,D6              *if leftover data not printed
00001274  6700 0004                267      BEQ         PRINT_OPCODE_EA     *print just the opcode
00001278  6184                     268      BSR         PRINT_DATA          *print unreadable data
0000127A                           269                                      *and the opcode
0000127A                           270  PRINT_OPCODE_EA    
0000127A  548A                     271      ADD.L       #02,A2              *increment the current address because word is valid
0000127C                           272  
0000127C  1C3C 0000                273      MOVE.B      #00,D6              *reset the increment counter
00001280  619C                     274      BSR         PRINT_ADDRESS       *print the data address
00001282  6100 0092                275      BSR         TAB                 *insert a space
00001286  6100 000E                276      BSR         PRINT_OPCODE        *print out hte opcode and eA
0000128A  6100 FF52                277      BSR         INCREMENT_LINE      *increment line counter (line was printed)
0000128E  6100 006C                278      BSR         IM_NEW_LINE
00001292  6000 FED0                279      BRA         READ_MEMORY_LOOP    *read next byte.
00001296                           280      
00001296                           281  
00001296                           282  PRINT_OPCODE
00001296  43F9 00000500            283      LEA         STRING_START,A1     *put the starting address of the string into A1
0000129C  103C 000E                284      MOVE.B      #14,D0              *print null terminated string into A
000012A0  4E4F                     285      TRAP        #15                 *output to terminal
000012A2  47F9 00000500            286      LEA         STRING_START,A3     *reset the current string pointer
000012A8  4E75                     287      RTS
000012AA                           288      
000012AA                           289  RESTART
000012AA  43F9 000071F0            290      LEA         M_NEW_LINE,A1
000012B0  103C 000E                291      MOVE.B      #14,D0
000012B4  4E4F                     292      TRAP        #15
000012B6  4280                     293      CLR.L       D0
000012B8  4281                     294      CLR.L       D1
000012BA  4282                     295      CLR.L       D2
000012BC  4283                     296      CLR.L       D3
000012BE  4284                     297      CLR.L       D4
000012C0  4285                     298      CLR.L       D5
000012C2  4286                     299      CLR.L       D6
000012C4  4287                     300      CLR.L       D7
000012C6  2040                     301      MOVE.L      D0,A0
000012C8  2240                     302      MOVE.L      D0,A1
000012CA  2440                     303      MOVE.L      D0,A2
000012CC  2640                     304      MOVE.L      D0,A3
000012CE  2840                     305      MOVE.L      D0,A4
000012D0  2A40                     306      MOVE.L      D0,A5
000012D2  2C40                     307      MOVE.L      D0,A6
000012D4  2E40                     308      MOVE.L      D0,A7
000012D6  6000 FD2E                309      BRA         INPUT_START
000012DA                           310      
000012DA                           311  RETURN_TO_SUBROUTINE
000012DA  4E75                     312      RTS
000012DC                           313    
000012DC                           314  CONVERT_TO_ASCII
000012DC  B23C 0009                315      CMP.B       #9,D1           *compare value with 9
000012E0  6E00 000C                316      BGT         ALPH_CHAR       *convert to numeric ascii
000012E4  6000 0002                317      BRA         NUMERIC_CHAR    *convert to alphabetical ascii
000012E8                           318  NUMERIC_CHAR        
000012E8  0601 0030                319      ADD.B       #48,D1          *convert to ascii value
000012EC  4E75                     320      RTS                         *continue converting
000012EE                           321  ALPH_CHAR
000012EE  0601 0037                322      ADD.B       #55,D1          *convert to ascii value
000012F2  4E75                     323      RTS                         *continue converting            
000012F4                           324  OUTPUT_CHAR
000012F4  103C 0006                325      MOVE.B      #6,D0           *output whatever's in D1
000012F8  4E4F                     326      TRAP        #15
000012FA  4E75                     327      RTS
000012FC                           328  
000012FC                           329  
000012FC                           330  IM_NEW_LINE
000012FC  43F9 000071F0            331      LEA         M_NEW_LINE,A1      *load new line
00001302  103C 000E                332      MOVE.B      #14,D0          *load message
00001306  4E4F                     333      TRAP        #15             *display message
00001308  4E75                     334      RTS
0000130A                           335  IM_SPACE
0000130A  123C 0020                336      MOVE.B      #32,D1
0000130E  103C 0006                337      MOVE.B      #6,D0
00001312  4E4F                     338      TRAP        #15
00001314  4E75                     339      RTS
00001316                           340  TAB
00001316  43F9 0000717B            341      LEA         M_TAB,A1
0000131C  103C 000E                342      MOVE.B      #14,D0
00001320  4E4F                     343      TRAP        #15
00001322  4E75                     344      RTS
00001324                           345  DATA
00001324  43F9 00007172            346      LEA         M_DATA,A1
0000132A  103C 000E                347      MOVE.B      #14,D0
0000132E  4E4F                     348      TRAP        #15
00001330  4E75                     349      RTS
00001332                           350      
00001332                           351  
00001332                           352  
00001332                           353  
00001332                           354  
00001332                           355  
00001332                           356  
00001332                           357  
00001332                           358  
00001332                           359  
00001332                           360  
00001332                           361  
00001332                           362  
00001332                           363  
00001332                           364  
00001332                           365  
00001332                           366  
00001332                           367  
00001332                           368  
00001332                           369  
00001332                           370  
00001332                           371  
00001332                           372  
00001332                           373  
00001332                           374  
00001332                           375  
00001332                           376  
00001332                           377  
00001332                           378  
00001332                           379  
00001332                           380  
00001332                           381  -------------------- end include --------------------
00001332                           382      INCLUDE         'OP_jumpTable.X68'
00001332                           383  VERIFY_OPCODE
00001332  3200                     384      MOVE.W  D0,D1   *Copy instruction for modification
00001334                           385      
00001334                           386      **ISOLATE BITS F-C**                                             
00001334  E849                     387      LSR.W   #4,D1       *Shift right four bits
00001336  E049                     388      LSR.W   #8,D1       *Shift right again (12 shifts total)
00001338                           389      
00001338  4242                     390      CLR     D2
0000133A  1401                     391      MOVE.B  D1,D2       *Copy bits to jump table instruction register(D2)
0000133C                           392      
0000133C  41F9 0000134A            393      LEA     OP_JTAB,A0  *Load the jump table 
00001342  C5FC 0006                394      MULS    #6, D2      *Get the offset
00001346  4EB0 2000                395      JSR     0(A0,D2)    *Go to jump table address
0000134A                           396  
0000134A                           397  
0000134A                           398  
0000134A  4EF9 000013AC            399  OP_JTAB    JMP     OP0000       *ADDI
00001350  4EF9 000013BC            400      JMP     OP0001              *MOVE.B
00001356  4EF9 000013CC            401      JMP     OP0010              *MOVE.W, MOVEA(WORD)
0000135C  4EF9 000013D0            402      JMP     OP0011              *MOVE.L, MOVEA(LONG) 
00001362  4EF9 00001408            403      JMP     OP0100              *NOP, MOVEM, LEA, CLR, JSR, RTS
00001368  4EF9 000014B8            404      JMP     OP0101              *ADDQ
0000136E  4EF9 000014C8            405      JMP     OP0110              *Bcc
00001374  4EF9 000014E2            406      JMP     OP0111              *MOVEQ
0000137A  4EF9 000014F2            407      JMP     OP1000              *DIVU, OR
00001380  4EF9 00001528            408      JMP     OP1001              *SUB
00001386  4EF8 11E6                409      JMP     INVALID_OPCODE      *No required opcodes
0000138A  4EF9 00001538            410      JMP     OP1011              *CMP
00001390  4EF9 00001548            411      JMP     OP1100              *MULS, AND
00001396  4EF9 00001580            412      JMP     OP1101              *ADD, ADDA
0000139C  4EF9 000015B8            413      JMP     OP1110              *LSR, LSL, ASR, ASL, ROL, ROR
000013A2  4EF8 11E6                414      JMP     INVALID_OPCODE      *No required opcodes
000013A6                           415  
000013A6                           416  
000013A6  4EF8 11E6                417      JMP    INVALID_OPCODE     *If you're reading this line, it's invalid.
000013AA  4E75                     418      RTS
000013AC                           419  
000013AC                           420  OP0000
000013AC                           421      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000013AC                           422      *BEGIN OUTPUT
000013AC                           423      
000013AC                           424      *MOVE.W  ADDI,(A3)+     *Load 'ADDI' to Add Reg 1 and then increment
000013AC  49F9 000071F3            425      LEA     ADDI, A4        *Load output string to A4
000013B2  4EB9 0000169A            426      JSR     PASTE_4
000013B8  6000 04BA                427      BRA     EA_ADDI         *Branch to EA analysis of the command
000013BC                           428  
000013BC                           429  OP0001  *SINGLE CODE, DO NOT NEED FURTHER CHECKING 
000013BC                           430          *BEGIN OUTPUT
000013BC                           431      
000013BC                           432      *MOVE.L  MOVE,(A3)+     *Load 'MOVE.B' to Add Reg 1 and then increment
000013BC  49F9 000071F8            433      LEA     MOVE, A4        *Load output string to A4
000013C2  4EB9 0000169A            434      JSR     PASTE_4
000013C8  6000 02EA                435      BRA     EA_MOVE         *Branch to EA analysis of the command
000013CC                           436  
000013CC                           437  OP0010
000013CC                           438      *Identical to OP0011 for these purposes, branch there
000013CC  6000 0002                439      BRA OP0011
000013D0                           440  
000013D0                           441  OP0011
000013D0                           442      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000013D0                           443  
000013D0                           444      **ISOLATE NEXT BITS TO CHECK**
000013D0  3200                     445      MOVE.W  D0,D1           *Copy instruction for modification
000013D2  EF49                     446      LSL.W   #7,D1           *Shift left 7 bits 
000013D4  EA49                     447      LSR.W   #5,D1           *Rotate right 5 bits
000013D6  E049                     448      LSR.W   #8,D1           *Shift right again (13 shifts total)
000013D8  0241 000F                449      ANDI.W  #$00F,D1        *Keep 3 bits
000013DC                           450      
000013DC  B27C 0001                451      CMP     #%001,D1      *Check for 0010 to eliminate CLR
000013E0  6700 0016                452      BEQ     _MOVEA          *If equal, branch to CLR
000013E4                           453      
000013E4  6000 0002                454      BRA     _MOVE
000013E8                           455      
000013E8                           456  _MOVE
000013E8                           457      *MOVE.L  MOVE,(A3)+     *Load 'MOVE.L' to Add Reg 1 and then increment  
000013E8  49F9 000071F8            458      LEA     MOVE, A4        *Load output string to A4
000013EE  4EB9 0000169A            459      JSR     PASTE_4
000013F4  6000 02BE                460      BRA     EA_MOVE        *Branch to EA analysis of the command
000013F8                           461  
000013F8                           462  _MOVEA
000013F8                           463      *MOVE.L  MOVEA,(A3)+    *Load 'MOVEA.L' to Add Reg 1 and then increment
000013F8  49F9 000071FD            464      LEA     MOVEA, A4        *Load output string to A4
000013FE  4EB9 000016A4            465      JSR     PASTE_5
00001404  6000 0322                466      BRA     EA_MOVEA       *Branch to EA analysis of the command
00001408                           467  
00001408                           468  OP0100
00001408                           469      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
00001408  3200                     470       MOVE.W  D0,D1           *Copy instruction for modification
0000140A                           471      
0000140A  B27C 4E71                472      CMP     #%0100111001110001,D1   *Check to eliminate NOP
0000140E  6700 0070                473      BEQ     _NOP
00001412  B27C 4E75                474      CMP     #%0100111001110101,D1   *Check to eliminate RTS
00001416  6700 007C                475      BEQ     _RTS
0000141A                           476      
0000141A  EC49                     477      LSR.W   #6,D1                   *Shift right 6 bits
0000141C  B27C 013A                478      CMP     #%0000000100111010,D1   *Check to eliminate RTS
00001420  6700 004E                479      BEQ     _JSR
00001424                           480      
00001424                           481      **ISOLATE 4 BITS TO CHECK CLR**    
00001424  3200                     482      MOVE.W  D0,D1           *Copy instruction for modification
00001426  E949                     483      LSL.W   #4,D1           *Shift left 7 bits 
00001428  E849                     484      LSR.W   #4,D1           *Rotate right 5 bits
0000142A  E049                     485      LSR.W   #8,D1           *Shift right again (13 shifts total)
0000142C  0241 000F                486      ANDI.W  #$000F,D1       *Keep 4 bits
00001430                           487      
00001430  B27C 0002                488      CMP     #%0010,D1       *Check for 0010 to eliminate CLR
00001434  6700 001A                489      BEQ     _CLR            *If equal, branch to CLR
00001438                           490  
00001438                           491      **ISOLATE 3 BITS TO CHECK MOVEM**
00001438  3200                     492      MOVE.W  D0,D1           *Copy instruction for modification
0000143A  ED49                     493      LSL.W   #6,D1           *Shift left 6 bits 
0000143C  EA49                     494      LSR.W   #5,D1           *Shift right 5 bits
0000143E  E049                     495      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001440  0241 000F                496      ANDI.W  #$00F,D1        *Keep 3 bits
00001444                           497      
00001444  B27C 0001                498      CMP     #%001,D1
00001448  6700 005E                499      BEQ     _MOVEM
0000144C                           500      
0000144C  6000 0012                501      BRA     _LEA            *Else by process of elimination it must be LEA   
00001450                           502      
00001450                           503  _CLR
00001450                           504      *MOVE.W  OPCLR,(A3)+     *Load 'CLR' to Add Reg 1 and then increment
00001450  49F9 00007203            505      LEA     OPCLR, A4        *Load output string to A4
00001456  4EB9 00001692            506      JSR     PASTE_3
0000145C  6000 05D6                507      BRA     EA_CLR          *Branch to EA analysis of the command
00001460                           508  
00001460                           509  _LEA
00001460                           510      *MOVE.W  OPLEA,(A3)+     *Load 'LEA' to Add Reg 1 and then increment
00001460  49F9 00007207            511      LEA     OPLEA, A4        *Load output string to A4
00001466  4EB9 00001692            512      JSR     PASTE_3
0000146C  6000 056E                513      BRA     EA_LEA          *Branch to EA analysis of the command
00001470                           514  
00001470                           515  _JSR
00001470                           516      *MOVE.W  OPJSR,(A3)+     *Load 'JSR' to Add Reg 1 and then increment
00001470  49F9 0000720B            517      LEA     OPJSR, A4        *Load output string to A4
00001476  4EB9 00001692            518      JSR     PASTE_3
0000147C  6000 070E                519      BRA     EA_JSR          *Branch to EA analysis of the command
00001480                           520  
00001480                           521  _NOP
00001480                           522      *MOVE.W  OPNOP,(A3)+     *Load 'NOP' to Add Reg 1 and then increment
00001480  49F9 0000720F            523      LEA     OPNOP, A4        *Load output string to A4
00001486  4EB9 00001692            524      JSR     PASTE_3
0000148C  16FC 0000                525      MOVE.B  #00,(A3)+
00001490  6000 FDDE                526      BRA     VALID_OPCODE          *Branch to EA analysis of the command      
00001494                           527  
00001494                           528  _RTS
00001494                           529      *MOVE.W  OPRTS,(A3)+     *Load 'RTS' to Add Reg 1 and then increment
00001494  49F9 00007213            530      LEA     OPRTS, A4        *Load output string to A4
0000149A  4EB9 00001692            531      JSR     PASTE_3
000014A0  16FC 0000                532          MOVE.B  #00,(A3)+
000014A4  6000 FDCA                533      BRA     VALID_OPCODE          *Branch to EA analysis of the command      
000014A8                           534  
000014A8                           535  _MOVEM
000014A8                           536      *MOVE.W  MOVEM,(A3)+     *Load 'MOVEM' to Add Reg 1 and then increment
000014A8  49F9 00007217            537      LEA     MOVEM, A4        *Load output string to A4
000014AE  4EB9 000016A4            538      JSR     PASTE_5
000014B4  6000 0714                539      BRA     EA_MOVEM        *Branch to EA analysis of the command
000014B8                           540      
000014B8                           541  OP0101
000014B8                           542      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014B8                           543      *BEGIN OUTPUT
000014B8                           544      
000014B8                           545      *MOVE.W  ADDQ,(A3)+      *Load 'AddQ' to Add Reg 1 and then increment
000014B8  49F9 0000721D            546      LEA     ADDQ, A4        *Load output string to A4
000014BE  4EB9 0000169A            547      JSR     PASTE_4
000014C4  6000 0410                548      BRA     EA_ADDQ         *Branch to EA analysis of the command
000014C8                           549      
000014C8                           550  OP0110
000014C8                           551      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014C8                           552      *BEGIN OUTPUT
000014C8  3200                     553      MOVE.W  D0,D1
000014CA  E949                     554      LSL.W   #4,D1
000014CC  E849                     555      LSR.W   #4,D1
000014CE  E049                     556      LSR.W   #8,D1
000014D0  B23C 0000                557      CMP.B   #0,D1
000014D4  6700 FD10                558      BEQ     INVALID_OPCODE
000014D8                           559      
000014D8  16F9 00007222            560      MOVE.B  Bcc,(A3)+       *Load 'Bcc' to Add Reg 1 and then increment 
000014DE  6000 0688                561      BRA     EA_BCC          *Branch to EA analysis of the command
000014E2                           562  
000014E2                           563  OP0111
000014E2                           564      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
000014E2                           565      *BEGIN OUTPUT
000014E2                           566      
000014E2                           567      *MOVE.W  MOVEQ,(A3)+     *Load 'MOVEQ' to Add Reg 1 and then increment
000014E2  49F9 00007224            568      LEA     MOVEQ, A4        *Load output string to A4
000014E8  4EB9 000016A4            569      JSR     PASTE_5
000014EE  6000 0290                570      BRA     EA_MOVEQ        *Branch to EA analysis of the command
000014F2                           571      
000014F2                           572  OP1000
000014F2                           573      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000014F2                           574      
000014F2                           575      **ISOLATE NEXT BITS TO CHECK**
000014F2  3200                     576      MOVE.W  D0,D1           *Copy instruction for modification
000014F4  EF49                     577      LSL.W   #7,D1           *Shift left 7 bits 
000014F6  EA49                     578      LSR.W   #5,D1           *Rotate right 5 bits
000014F8  E049                     579      LSR.W   #8,D1           *Shift right again (13 shifts total)
000014FA  0241 000F                580      ANDI.W  #$00F,D1        *Keep 3 bits
000014FE                           581            
000014FE  B27C 0003                582      CMP     #%011,D1    *Check for 011 to eliminate DIVU
00001502  6700 0006                583      BEQ     _DIVU        *If equal, branch to DIVU
00001506  6000 0012                584      BRA     _OR          *Else must be OR, branch
0000150A                           585      
0000150A                           586  _DIVU
0000150A                           587      *MOVE.W  DIVU,(A3)+      *Load 'DIVU' to Add Reg 1 and then increment
0000150A  49F9 0000722A            588      LEA     DIVU, A4        *Load output string to A4
00001510  4EB9 0000169A            589      JSR     PASTE_4
00001516  6000 0472                590      BRA     EA_MULS         *Branch to EA analysis of the command
0000151A                           591  
0000151A                           592  _OR
0000151A                           593      *MOVE.W  OR,(A3)+        *Load 'OR' to Add Reg 1 and then increment
0000151A  49F9 0000722F            594      LEA     OR, A4        *Load output string to A4
00001520  16DC                     595      MOVE.B  (A4)+, (A3)+
00001522  16DC                     596      MOVE.B  (A4)+, (A3)+
00001524  6000 0294                597      BRA     EA_ADD           *Branch to EA analysis of the command
00001528                           598  
00001528                           599  OP1001
00001528                           600      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
00001528                           601      *BEGIN OUTPUT
00001528                           602      
00001528                           603      *MOVE.W  OPSUB,(A3)+     *Load 'SUB' to Add Reg 1 and then increment
00001528  49F9 00007232            604      LEA     OPSUB, A4        *Load output string to A4
0000152E  4EB9 00001692            605      JSR     PASTE_3
00001534  6000 0284                606      BRA     EA_ADD          *Branch to EA analysis of the command
00001538                           607  
00001538                           608  OP1011
00001538                           609      *SINGLE CODE, DO NOT NEED FURTHER CHECKING
00001538                           610      *BEGIN OUTPUT
00001538                           611      *MOVE.W  CMP,(A3)+     *Load 'CMP' to Add Reg 1 and then increment
00001538  49F9 00007236            612      LEA     CMP, A4        *Load output string to A4
0000153E  4EB9 00001692            613      JSR     PASTE_3
00001544  6000 05C8                614      BRA     EA_CMP          *Branch to EA analysis of the command
00001548                           615  
00001548                           616  OP1100
00001548                           617      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
00001548                           618  
00001548  3200                     619      MOVE.W  D0,D1           *Copy instruction for modification
0000154A  EF49                     620      LSL.W   #7,D1           *Shift left 7 bits 
0000154C  EA49                     621      LSR.W   #5,D1           *Rotate right 5 bits
0000154E  E049                     622      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001550  0241 000F                623      ANDI.W  #$00F,D1        *Keep 3 bits
00001554                           624           
00001554  B27C 0007                625      CMP     #%111,D1       *Check for 111 to eliminate MULS
00001558  6700 0006                626      BEQ     _MULS           *If equal, branch to MULS
0000155C  6000 0012                627      BRA     _AND            *Else must be AND, branch
00001560                           628      
00001560                           629  _MULS
00001560                           630      *MOVE.W  MULS,(A3)+      *Load 'MULS' to Add Reg 1 and then increment
00001560  49F9 0000723A            631      LEA     MULS, A4        *Load output string to A4
00001566  4EB9 0000169A            632      JSR     PASTE_4
0000156C  6000 041C                633      BRA     EA_MULS         *Branch to EA analysis of the command
00001570                           634  
00001570                           635  _AND
00001570                           636      *MOVE.W  AND,(A3)+       *Load 'AND' to Add Reg 1 and then increment
00001570  49F9 0000723F            637      LEA     AND, A4        *Load output string to A4
00001576  4EB9 00001692            638      JSR     PASTE_3
0000157C  6000 023C                639      BRA     EA_ADD          *Branch to EA analysis of the command
00001580                           640      
00001580                           641  OP1101
00001580                           642      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS  
00001580                           643  
00001580  3200                     644      MOVE.W  D0,D1           *Copy instruction for modification
00001582  E149                     645      LSL.W   #8,D1           *Shift left 7 bits 
00001584  EA49                     646      LSR.W   #5,D1           *Rotate left 5 bits
00001586  E049                     647      LSR.W   #8,D1           *Shift left again (13 shifts total)
00001588  0241 000F                648      ANDI.W  #$0F,D1         *Keep 3 bits
0000158C                           649                
0000158C  B27C 0003                650      CMP     #%11,D1         *Check for 011 to eliminate ADDA (Size dependant)
00001590  6700 0016                651      BEQ     _ADDA           *If equal, branch to ADDA
00001594  6000 0002                652      BRA     _ADD            *Else must be ADD, branch
00001598                           653      
00001598                           654  _ADD
00001598                           655      *MOVE.W  ADD,(A3)+       *Load 'ADD' to Add Reg 1 and then increment
00001598  49F9 00007243            656      LEA     ADD, A4        *Load output string to A4
0000159E  4EB9 00001692            657      JSR     PASTE_3
000015A4  6000 0214                658      BRA     EA_ADD          *Branch to EA analysis of the command
000015A8                           659  
000015A8                           660  _ADDA
000015A8                           661      *MOVE.W  ADDA,(A3)+      *Load 'ADDA' to Add Reg 1 and then increment
000015A8  49F9 00007247            662      LEA     ADDA, A4        *Load output string to A4
000015AE  4EB9 0000169A            663      JSR     PASTE_4
000015B4  6000 037A                664      BRA     EA_ADDA         *Branch to EA analysis of the command
000015B8                           665      
000015B8                           666  OP1110
000015B8                           667      *MULTIPLE CODE, CHECK AND GET NEXT 3 BITS
000015B8                           668        
000015B8  3200                     669      MOVE.W  D0,D1           *Copy instruction for modification
000015BA  EF49                     670      LSL.W   #7,D1           *Shift left 7 bits 
000015BC  EA49                     671      LSR.W   #5,D1           *Rotate right 5 bits
000015BE  E049                     672      LSR.W   #8,D1           *Shift right again (13 shifts total)
000015C0  0241 000F                673      ANDI.W  #$00F,D1        *Keep 3 bits
000015C4                           674                    
000015C4  B27C 0001                675      CMP     #%001,D1        *Check for 001 to eliminate LSd instructions
000015C8  6700 001C                676      BEQ     _LSd            *If equal, branch to LSd to determine LSR or LSL
000015CC                           677  
000015CC                           678      **ELSE CONTINUE CHECKING**
000015CC  3200                     679      MOVE.W  D0,D1           *Copy instruction for modification
000015CE  E149                     680      LSL.W   #8,D1          *Shift left 7 bits
000015D0  E749                     681      LSL.W   #3,D1 
000015D2  EA49                     682      LSR.W   #5,D1           *Rotate left 5 bits
000015D4  E049                     683      LSR.W   #8,D1           *Shift left again (13 shifts total)
000015D6  0241 000F                684      ANDI.W  #$0F,D1         *Keep 2 bits
000015DA                           685      
000015DA                           686      **BEGIN ELIMINATION 'IF/ELSE' STATEMENTS                   
000015DA  B27C 0000                687      CMP     #%00,D1         *Check for 00 to eliminate ASd
000015DE  6700 003E                688      BEQ     _ASd            *If equal, branch to ASd to determine ASR or ASL
000015E2  6000 0074                689      BRA     _ROd            *Else must be a ROd instruction, branch to determine
000015E6                           690      
000015E6                           691  _LSd   
000015E6                           692   
000015E6  3200                     693      MOVE.W  D0,D1           *Copy instruction for modification
000015E8  EF49                     694      LSL.W   #7,D1           *Shift left 7 bits 
000015EA  EE49                     695      LSR.W   #7,D1           *Rotate right 5 bits
000015EC  E049                     696      LSR.W   #8,D1           *Shift right again (13 shifts total)
000015EE  0241 000F                697      ANDI.W  #$F,D1          *Keep 1 bit
000015F2                           698  
000015F2  B27C 0000                699      CMP     #%0,D1        *Check for 011 to eliminate LSR
000015F6  6700 0016                700      BEQ     _LSR            *If equal, branch to LSR
000015FA  6000 0002                701      BRA     _LSL            *Else must be LSL, branch
000015FE                           702  
000015FE                           703  _LSL    
000015FE                           704      *MOVE.W  LSL,(A3)+       *Load 'LSL' to Add Reg 1 and then increment
000015FE  49F9 0000724C            705      LEA     LSL, A4        *Load output string to A4
00001604  4EB9 00001692            706      JSR     PASTE_3
0000160A  6000 046E                707      BRA     EA_LSD         *Branch to EA analysis of the command
0000160E                           708  
0000160E                           709  _LSR
0000160E                           710      *MOVE.W  LSR,(A3)+       *Load 'LSR' to Add Reg 1 and then increment
0000160E  49F9 00007250            711      LEA     LSR, A4        *Load output string to A4
00001614  4EB9 00001692            712      JSR     PASTE_3
0000161A  6000 045E                713      BRA     EA_LSD          *Branch to EA analysis of the command
0000161E                           714  
0000161E                           715  _ASd
0000161E                           716  
0000161E  3200                     717      MOVE.W  D0,D1           *Copy instruction for modification
00001620  E149                     718      LSL.W   #8,D1           *Shift left 7 bits 
00001622  E549                     719      LSL.W   #2,D1           *Shift left 7 bits
00001624  EA49                     720      LSR.W   #5,D1           *Rotate right 5 bits
00001626  E049                     721      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001628  0241 000F                722      ANDI.W  #$00F,D1        *Keep 3 bits
0000162C                           723     
0000162C  B27C 0000                724      CMP     #%000,D1        *Check for 000 to eliminate ASR
00001630  6700 0016                725      BEQ     _ASR            *If equal, branch to ASR
00001634  6000 0002                726      BRA     _ASL            *Else must be ASL, branch
00001638                           727  
00001638                           728  _ASL    
00001638                           729      *MOVE.W  ASL,(A3)+       *Load 'ASL' to Add Reg 1 and then increment
00001638  49F9 00007254            730      LEA     ASL, A4        *Load output string to A4
0000163E  4EB9 00001692            731      JSR     PASTE_3
00001644  6000 0434                732      BRA     EA_LSD          *Branch to EA analysis of the command
00001648                           733  
00001648                           734  _ASR
00001648                           735      *MOVE.W  ASR,(A3)+       *Load 'ASR' to Add Reg 1 and then increment
00001648  49F9 00007258            736      LEA     ASR, A4        *Load output string to A4
0000164E  4EB9 00001692            737      JSR     PASTE_3
00001654  6000 0424                738      BRA     EA_LSD          *Branch to EA analysis of the command
00001658                           739  
00001658                           740  _ROd
00001658                           741  
00001658  3200                     742      MOVE.W  D0,D1           *Copy instruction for modification
0000165A  E549                     743      LSL.W   #2,D1           *Shift left 7 bits
0000165C  E149                     744      LSL.W   #8,D1           *Shift left 7 bits 
0000165E  EA49                     745      LSR.W   #5,D1           *Rotate right 5 bits
00001660  E049                     746      LSR.W   #8,D1           *Shift right again (13 shifts total)
00001662  0241 000F                747      ANDI.W  #$00F,D1        *Keep 3 bits
00001666                           748  
00001666                           749      **BEGIN ELIMINATION 'IF/ELSE' STATEMENTS   
00001666  B27C 0003                750      CMP     #%011,D1        *Check for 011 to eliminate ROR
0000166A  6700 0016                751      BEQ     _ROR            *If equal, branch to ROR
0000166E  6000 0002                752      BRA     _ROL            *Else must be ROL, branch
00001672                           753      
00001672                           754  _ROL    
00001672                           755      *MOVE.W  ROL,(A3)+       *Load 'ROL' to Add Reg 1 and then increment
00001672  49F9 0000725C            756      LEA     ROL, A4        *Load output string to A4
00001678  4EB9 00001692            757      JSR     PASTE_3
0000167E  6000 03FA                758      BRA     EA_LSD          *Branch to EA analysis of the command
00001682                           759  
00001682                           760  _ROR
00001682                           761      *MOVE.W  ROR,(A3)+       *Load 'ROR' to Add Reg 1 and then increment
00001682  49F9 00007260            762      LEA     ROR, A4        *Load output string to A4
00001688  4EB9 00001692            763      JSR     PASTE_3
0000168E  6000 03EA                764      BRA     EA_LSD          *Branch to EA analysis of the command
00001692                           765      
00001692                           766  PASTE_3
00001692  16DC                     767      MOVE.B  (A4)+, (A3)+
00001694  16DC                     768      MOVE.B  (A4)+, (A3)+
00001696  16DC                     769      MOVE.B  (A4)+, (A3)+
00001698  4E75                     770      RTS
0000169A                           771  
0000169A                           772  PASTE_4
0000169A  16DC                     773      MOVE.B  (A4)+, (A3)+
0000169C  16DC                     774      MOVE.B  (A4)+, (A3)+
0000169E  16DC                     775      MOVE.B  (A4)+, (A3)+
000016A0  16DC                     776      MOVE.B  (A4)+, (A3)+
000016A2  4E75                     777      RTS
000016A4                           778  
000016A4                           779  PASTE_5
000016A4  16DC                     780      MOVE.B  (A4)+, (A3)+
000016A6  16DC                     781      MOVE.B  (A4)+, (A3)+
000016A8  16DC                     782      MOVE.B  (A4)+, (A3)+
000016AA  16DC                     783      MOVE.B  (A4)+, (A3)+
000016AC  16DC                     784      MOVE.B  (A4)+, (A3)+
000016AE  4E75                     785      RTS
000016B0                           786  
000016B0  FFFF FFFF                787      SIMHALT
000016B4                           788  
000016B4                           789  
000016B4                           790  
000016B4                           791  
000016B4                           792  
000016B4                           793  
000016B4                           794  
000016B4                           795  -------------------- end include --------------------
000016B4                           796      INCLUDE         'EFFECTIVE_ADDRESSES.X68'
000016B4                           797  
000016B4                           798      *EXAMPLE, MOVE A HEX CODE INTO D6
000016B4                           799      *CALL THE CORRESPONDING EA CODE
000016B4                           800      *MOVE.W     #$2E7C, D6
000016B4                           801      *BRA         EA_MOVE
000016B4                           802      *END EXAMPLE
000016B4                           803      
000016B4                           804  EA_MOVE      *1 invalid; done
000016B4  3E00                     805      MOVE.W      D0, D7 *DO THIS AT THE BEGGINING OF EVERY EA 
000016B6                           806      
000016B6  3807                     807      MOVE.W      D7, D4      *
000016B8  E04C                     808      LSR.W       #8, D4      *
000016BA  E84C                     809      LSR.W       #4, D4      *D4 = SIZE
000016BC  4EB9 00001E16            810      JSR GET_SIZE
000016C2                           811      
000016C2  3807                     812      MOVE.W      D7, D4      *
000016C4  E14C                     813      LSL.W       #8, D4      *
000016C6  E54C                     814      LSL.W       #2, D4
000016C8  E04C                     815      LSR.W       #8, D4      *
000016CA  EA4C                     816      LSR.W       #5, D4      *D4 = <0000 0000> D4 = SOURCE MODE
000016CC                           817      
000016CC  3A07                     818      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000016CE  E14D                     819      LSL.W       #8, D5  
000016D0  EB4D                     820      LSL.W       #5, D5      *
000016D2  E04D                     821      LSR.W       #8, D5
000016D4  EA4D                     822      LSR.W       #5, D5      *D5 = SOURCE REGISTER
000016D6                           823      
000016D6  4EB9 00001F0C            824      JSR         MODE_CHOOSER
000016DC  41F9 00001D4A            825      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000016E2  C9FC 0006                826      MULS        #6, D4          *GET JUMP
000016E6  4EB0 4000                827      JSR         0(A0, D4)       *JUMP
000016EA  4EB9 00001F88            828      JSR COMMA
000016F0  4EB9 00001FEA            829      JSR SPACE
000016F6  3807                     830      MOVE.W      D7, D4      *
000016F8  EF4C                     831      LSL.W       #7, D4      *
000016FA  EE4C                     832      LSR.W       #7, D4      *
000016FC  EC4C                     833      LSR.W       #6, D4      *D4 = DESTINATION MODE
000016FE  4EB9 00001CC0            834      JSR         MOVE_ERROR_CHECK 
00001704                           835      
00001704  3A07                     836      MOVE.W      D7, D5      *
00001706  E94D                     837      LSL.W       #4, D5      *
00001708  E04D                     838      LSR.W       #8, D5      *
0000170A  EA4D                     839      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
0000170C                           840      
0000170C  4EB9 00001F0C            841      JSR         MODE_CHOOSER
00001712  41F9 00001D4A            842      LEA         MODE_JUMP, A0   *LOAD MODE JUMP
00001718  C9FC 0006                843      MULS        #6, D4          *GET JUMP
0000171C  4EB0 4000                844      JSR         0(A0, D4)       *JUMP
00001720  16BC 0000                845      MOVE.B      #00, (A3) 
00001724  6000 FB4A                846      BRA         VALID_OPCODE
00001728                           847  EA_MOVEA        *0 invalid
00001728  3E00                     848      MOVE.W      D0, D7
0000172A                           849  
0000172A  3807                     850      MOVE.W      D7, D4      *GETTING SIZE
0000172C  E04C                     851      LSR.W       #8, D4      *
0000172E  E84C                     852      LSR.W       #4, D4      *SHIFT 12 BITS RIGHT
00001730  4EB9 00001E16            853      JSR         GET_SIZE    *D4 = SIZE
00001736                           854      
00001736  3807                     855      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001738  E14C                     856      LSL.W       #8, D4      *
0000173A  E54C                     857      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
0000173C  E04C                     858      LSR.W       #8, D4      *
0000173E  EA4C                     859      LSR.W       #5, D4      *D4 = SOURCE MODE
00001740                           860  
00001740  3A07                     861      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
00001742  E14D                     862      LSL.W       #8, D5      *
00001744  EB4D                     863      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001746  E04D                     864      LSR.W       #8, D5      *
00001748  EA4D                     865      LSR.W       #5, D5      *D5 = SOURCE REGISTER
0000174A                           866      
0000174A  4EB9 00001F0C            867      JSR         MODE_CHOOSER  *INCASE MODE IS $111
00001750  41F9 00001D4A            868      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001756  C9FC 0006                869      MULS        #6, D4        *GET JUMP
0000175A  4EB0 4000                870      JSR         0(A0, D4)     *JUMP
0000175E  4EB9 00001F88            871      JSR         COMMA
00001764  4EB9 00001FEA            872      JSR         SPACE
0000176A  3A07                     873      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
0000176C  E94D                     874      LSL.W       #4, D5      *
0000176E  E04D                     875      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
00001770  EA4D                     876      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
00001772                           877      
00001772  4EB9 00001D88            878      JSR         ADDR_1
00001778  16BC 0000                879      MOVE.B      #00, (A3)
0000177C  6000 FAF2                880      BRA         VALID_OPCODE
00001780                           881  EA_MOVEQ        *0 invalid
00001780  3E00                     882      MOVE.W      D0, D7
00001782                           883  
00001782  4EB9 00001FEA            884      JSR SPACE
00001788  4EB9 00001F90            885      JSR POUND
0000178E  4EB9 00001FF2            886      JSR CASH
00001794  6100 07A4                887      BSR OUTPUT_HEX    
00001798  4EB9 00001F88            888      JSR COMMA
0000179E  4EB9 00001FEA            889      JSR SPACE
000017A4  3A07                     890      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
000017A6  E94D                     891      LSL.W       #4, D5      *
000017A8  E04D                     892      LSR.W       #8, D5      *
000017AA  EA4D                     893      LSR.W       #5, D5      * D5 = DESTINATION REGISTER
000017AC                           894      
000017AC  4EB9 00001D7A            895      JSR         DATA_0
000017B2  16BC 0000                896      MOVE.B      #00, (A3)
000017B6  6000 FAB8                897      BRA         VALID_OPCODE
000017BA                           898  EA_ADD          *3 invalid; done
000017BA                           899  
000017BA  3E00                     900      MOVE.W      D0, D7
000017BC                           901  
000017BC  3807                     902      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
000017BE  EF4C                     903      LSL.W       #7, D4      * 
000017C0  EE4C                     904      LSR.W       #7, D4      *
000017C2  EC4C                     905      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
000017C4  4EB9 00001E58            906      JSR         GET_OPMODE_MATH *PRINTS THE SIZE
000017CA                           907  
000017CA  B83C 0003                908      CMP.B       #3, D4
000017CE  6D00 000A                909      BLT         DN_VERSION
000017D2  B83C 0003                910      CMP.B       #3, D4
000017D6  6E00 004C                911      BGT         EA_VERSION
000017DA                           912  DN_VERSION *EA IS SOURCE, REGISTER IS DESTINATION <EA> + DN -> DN
000017DA  3807                     913      MOVE.W      D7, D4      
000017DC  E14C                     914      LSL.W       #8, D4      *LEFT 10; RIGHT 13
000017DE  E54C                     915      LSL.W       #2, D4
000017E0  E04C                     916      LSR.W       #8, D4      *
000017E2  EA4C                     917      LSR.W       #5, D4      *D4 = EA MODE
000017E4                           918      
000017E4  3A07                     919      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000017E6  E14D                     920      LSL.W       #8, D5  
000017E8  EB4D                     921      LSL.W       #5, D5      *
000017EA  E04D                     922      LSR.W       #8, D5
000017EC  EA4D                     923      LSR.W       #5, D5      * D5 = EA REGISTER
000017EE                           924      
000017EE  4EB9 00001F0C            925      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
000017F4  41F9 00001D4A            926      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000017FA  C9FC 0006                927      MULS        #6, D4          *GET JUMP
000017FE  4EB0 4000                928      JSR         0(A0, D4)       *JUMP
00001802                           929          
00001802  4EB9 00001F88            930      JSR         COMMA
00001808  4EB9 00001FEA            931      JSR         SPACE
0000180E                           932      
0000180E  3A07                     933      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
00001810  E94D                     934      LSL.W       #4, D5      *
00001812  E04D                     935      LSR.W       #8, D5      *
00001814  EA4D                     936      LSR.W       #5, D5      *D5 DESTINATION REGISTER
00001816                           937      
00001816  4EB9 00001D7A            938      JSR         DATA_0
0000181C  16BC 0000                939      MOVE.B      #00, (A3)
00001820  6000 FA4E                940      BRA         VALID_OPCODE
00001824                           941  EA_VERSION
00001824  3A07                     942      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
00001826  E94D                     943      LSL.W       #4, D5      *
00001828  E04D                     944      LSR.W       #8, D5      *
0000182A  EA4D                     945      LSR.W       #5, D5      *D5 DESTINATION REGISTER
0000182C  4EB9 00001D7A            946      JSR         DATA_0
00001832                           947      
00001832  4EB9 00001F88            948      JSR         COMMA
00001838  4EB9 00001FEA            949      JSR         SPACE
0000183E                           950      
0000183E  3807                     951      MOVE.W      D7, D4      
00001840  E14C                     952      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001842  E54C                     953      LSL.W       #2, D4
00001844  E04C                     954      LSR.W       #8, D4      *
00001846  EA4C                     955      LSR.W       #5, D4      *D4 = EA MODE
00001848                           956      
00001848  3A07                     957      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
0000184A  E14D                     958      LSL.W       #8, D5  
0000184C  EB4D                     959      LSL.W       #5, D5      *
0000184E  E04D                     960      LSR.W       #8, D5
00001850  EA4D                     961      LSR.W       #5, D5      * D5 = EA REGISTER
00001852                           962      
00001852                           963      *the only way there could be an error is if 
00001852                           964      *we are in THIS addressing mo
00001852                           965      
00001852  4EB9 00001F0C            966      JSR         MODE_CHOOSER    *IF A WORD OR LONG 
00001858  4EB9 00001CCA            967      JSR         ADD_ERROR_CHECK
0000185E  41F9 00001D4A            968      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001864  C9FC 0006                969      MULS        #6, D4          *GET JUMP
00001868  4EB0 4000                970      JSR         0(A0, D4)       *JUMP
0000186C                           971      
0000186C  16BC 0000                972      MOVE.B      #00, (A3)
00001870  6000 F9FE                973      BRA         VALID_OPCODE
00001874                           974  EA_ADDI  *2 invalid; DONE
00001874  3E00                     975      MOVE.W      D0, D7
00001876                           976      
00001876  3807                     977      MOVE.W      D7, D4      *
00001878  E14C                     978      LSL.W       #8, D4      *
0000187A  E04C                     979      LSR.W       #8, D4      *
0000187C  EC4C                     980      LSR.W       #6, D4      *D4 = SIZE
0000187E  4EB9 00001EAA            981      JSR         GET_SIZE_ADDI
00001884  4EB9 00001F90            982      JSR         POUND
0000188A  4EB9 00001FF2            983      JSR         CASH
00001890  6100 06A8                984      BSR         OUTPUT_HEX
00001894  4EB9 00001F88            985      JSR         COMMA
0000189A  4EB9 00001FEA            986      JSR         SPACE
000018A0  3807                     987      MOVE.W      D7, D4      
000018A2  E14C                     988      LSL.W       #8, D4      *LEFT 10; RIGHT 13
000018A4  E54C                     989      LSL.W       #2, D4
000018A6  E04C                     990      LSR.W       #8, D4      *
000018A8  EA4C                     991      LSR.W       #5, D4      *D4 = EA MODE
000018AA                           992      
000018AA  3A07                     993      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
000018AC  E14D                     994      LSL.W       #8, D5  
000018AE  EB4D                     995      LSL.W       #5, D5      *
000018B0  E04D                     996      LSR.W       #8, D5
000018B2  EA4D                     997      LSR.W       #5, D5      * D5 = EA REGISTER
000018B4                           998      
000018B4  4EB9 00001F0C            999      JSR         MODE_CHOOSER    *IF A WORD OR LONG  
000018BA  4EB9 00001CE4           1000      JSR         ADDI_ERROR_CHECK
000018C0  41F9 00001D4A           1001      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000018C6  C9FC 0006               1002      MULS        #6, D4          *GET JUMP
000018CA  4EB0 4000               1003      JSR         0(A0, D4)       *JUMP'
000018CE                          1004      
000018CE  16BC 0000               1005      MOVE.B      #00, (A3)
000018D2  6000 F99C               1006      BRA         VALID_OPCODE
000018D6                          1007  EA_ADDQ     *0 INVALID
000018D6  3E00                    1008      MOVE.W      D0, D7
000018D8                          1009      
000018D8  3807                    1010      MOVE.W      D7, D4
000018DA  E14C                    1011      LSL.W       #8, D4
000018DC  E04C                    1012      LSR.W       #8, D4
000018DE  EC4C                    1013      LSR.W       #6, D4
000018E0  4EB9 00001EAA           1014      JSR         GET_SIZE_ADDI    *PRINT SIZE
000018E6                          1015      
000018E6  3A07                    1016      MOVE.W      D7, D5      *GETTING DATA
000018E8  E94D                    1017      LSL.W       #4, D5      *SHIFT LEFT 4; RIGHT 13
000018EA  E04D                    1018      LSR.W       #8, D5      *
000018EC  EA4D                    1019      LSR.W       #5, D5      *D5 = DATA
000018EE  4EB9 00001E90           1020      JSR         GET_DATA
000018F4  4EB9 00001F88           1021      JSR COMMA
000018FA  4EB9 00001FEA           1022      JSR SPACE
00001900  3807                    1023      MOVE.W      D7, D4      *GETTING EA MODE
00001902  E14C                    1024      LSL.W       #8, D4      *
00001904  E54C                    1025      LSL.W       #2, D4      *SHIFT 10 LEFT; 13 RIGHT
00001906  E04C                    1026      LSR.W       #8, D4      *
00001908  EA4C                    1027      LSR.W       #5, D4      *D4 = EA MODE
0000190A                          1028      
0000190A  3A07                    1029      MOVE.W      D7, D5      *GETTING EA REGISTER
0000190C  E14D                    1030      LSL.W       #8, D5      *
0000190E  EB4D                    1031      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001910  E04D                    1032      LSR.W       #8, D5      *
00001912  EA4D                    1033      LSR.W       #5, D5      *D5 = EA REGISTER
00001914                          1034      
00001914  4EB9 00001F0C           1035      JSR         MODE_CHOOSER
0000191A  41F9 00001D4A           1036      LEA         MODE_JUMP, A0   *LOAD MODE JUMP
00001920  C9FC 0006               1037      MULS        #6, D4          *GET JUMP
00001924  4EB0 4000               1038      JSR         0(A0, D4)       *JUMP
00001928                          1039      
00001928  16BC 0000               1040      MOVE.B      #00, (A3)
0000192C                          1041      
0000192C  6000 F942               1042      BRA         VALID_OPCODE
00001930                          1043  EA_ADDA         *0 INVALID
00001930  3E00                    1044      MOVE.W      D0, D7
00001932                          1045      
00001932  3807                    1046      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
00001934  EF4C                    1047      LSL.W       #7, D4      * 
00001936  EE4C                    1048      LSR.W       #7, D4      *
00001938  EC4C                    1049      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
0000193A  4EB9 00001E40           1050      JSR         GET_OPMODE
00001940                          1051      
00001940  3807                    1052      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001942  E14C                    1053      LSL.W       #8, D4      *
00001944  E54C                    1054      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
00001946  E04C                    1055      LSR.W       #8, D4      *
00001948  EA4C                    1056      LSR.W       #5, D4      *D4 = SOURCE MODE
0000194A                          1057      
0000194A  3A07                    1058      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
0000194C  E14D                    1059      LSL.W       #8, D5      *
0000194E  EB4D                    1060      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001950  E04D                    1061      LSR.W       #8, D5      *
00001952  EA4D                    1062      LSR.W       #5, D5      *D5 = SOURCE REGISTER
00001954                          1063      
00001954  4EB9 00001F0C           1064      JSR         MODE_CHOOSER  *INCASE MODE IS $111
0000195A  41F9 00001D4A           1065      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001960  C9FC 0006               1066      MULS        #6, D4        *GET JUMP
00001964  4EB0 4000               1067      JSR         0(A0, D4)     *JUMP
00001968  4EB9 00001F88           1068      JSR COMMA 
0000196E  4EB9 00001FEA           1069      JSR SPACE
00001974  3A07                    1070      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
00001976  E94D                    1071      LSL.W       #4, D5      *
00001978  E04D                    1072      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
0000197A  EA4D                    1073      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
0000197C                          1074      
0000197C  4EB9 00001D88           1075      JSR         ADDR_1
00001982  16BC 0000               1076      MOVE.B      #00, (A3)
00001986                          1077      
00001986  6000 F8E8               1078      BRA         VALID_OPCODE
0000198A                          1079  EA_MULS                *1 INVALID;
0000198A                          1080  
0000198A  3E00                    1081      MOVE.W      D0, D7
0000198C                          1082      
0000198C  4EB9 00001FEA           1083      JSR         SPACE
00001992  3807                    1084      MOVE.W      D7, D4      
00001994  E14C                    1085      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001996  E54C                    1086      LSL.W       #2, D4
00001998  E04C                    1087      LSR.W       #8, D4      *
0000199A  EA4C                    1088      LSR.W       #5, D4      *D4 = EA MODE
0000199C                          1089      
0000199C  3A07                    1090      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
0000199E  E14D                    1091      LSL.W       #8, D5  
000019A0  EB4D                    1092      LSL.W       #5, D5      *
000019A2  E04D                    1093      LSR.W       #8, D5
000019A4  EA4D                    1094      LSR.W       #5, D5      * D5 = EA REGISTER
000019A6                          1095      
000019A6  4EB9 00001F0C           1096      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
000019AC  41F9 00001D4A           1097      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
000019B2  C9FC 0006               1098      MULS        #6, D4          *GET JUMP
000019B6  4EB0 4000               1099      JSR         0(A0, D4)       *JUMP
000019BA  4EB9 00001F88           1100      JSR         COMMA
000019C0  4EB9 00001FEA           1101      JSR         SPACE
000019C6  3A07                    1102      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
000019C8  E94D                    1103      LSL.W       #4, D5      *
000019CA  E04D                    1104      LSR.W       #8, D5      *
000019CC  EA4D                    1105      LSR.W       #5, D5      *D5 DESTINATION REGISTER
000019CE                          1106      
000019CE  4EB9 00001D7A           1107      JSR         DATA_0
000019D4  16BC 0000               1108      MOVE.B      #00, (A3)
000019D8                          1109      
000019D8  6000 F896               1110      BRA         VALID_OPCODE
000019DC                          1111  EA_LEA          *5 INVALIDS; DONE
000019DC  3E00                    1112      MOVE.W      D0, D7
000019DE                          1113      
000019DE  4EB9 00001FEA           1114      JSR         SPACE
000019E4  3807                    1115      MOVE.W      D7, D4      *GETTING SOURCE MODE
000019E6  E14C                    1116      LSL.W       #8, D4      *
000019E8  E54C                    1117      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
000019EA  E04C                    1118      LSR.W       #8, D4      *
000019EC  EA4C                    1119      LSR.W       #5, D4      *D4 = SOURCE MODE
000019EE                          1120      
000019EE  3A07                    1121      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
000019F0  E14D                    1122      LSL.W       #8, D5      *
000019F2  EB4D                    1123      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
000019F4  E04D                    1124      LSR.W       #8, D5      *
000019F6  EA4D                    1125      LSR.W       #5, D5      *D5 = SOURCE REGISTER
000019F8                          1126      
000019F8  4EB9 00001F0C           1127      JSR         MODE_CHOOSER  *INCASE MODE IS $111
000019FE  4EB9 00001CF6           1128      JSR         LEA_ERROR_CHECK
00001A04  41F9 00001D4A           1129      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001A0A  C9FC 0006               1130      MULS        #6, D4        *GET JUMP
00001A0E  4EB0 4000               1131      JSR         0(A0, D4)     *JUMP
00001A12  4EB9 00001F88           1132      JSR COMMA
00001A18  4EB9 00001FEA           1133      JSR SPACE
00001A1E  3A07                    1134      MOVE.W      D7, D5      *GET THE DESTINATION REGISTER
00001A20  E94D                    1135      LSL.W       #4, D5      *
00001A22  E04D                    1136      LSR.W       #8, D5      *SHIFT 4 BITS LEFT; 13 RIGHT
00001A24  EA4D                    1137      LSR.W       #5, D5      *D5 = DESTINATION REGISTER
00001A26                          1138      
00001A26  4EB9 00001D88           1139      JSR         ADDR_1
00001A2C  16BC 0000               1140      MOVE.B      #00, (A3)
00001A30                          1141      
00001A30  6000 F83E               1142      BRA         VALID_OPCODE
00001A34                          1143  EA_CLR          *2 INVALID; DONE
00001A34  3E00                    1144      MOVE.W      D0, D7
00001A36                          1145      
00001A36  3807                    1146      MOVE.W      D7, D4
00001A38  E14C                    1147      LSL.W       #8, D4      *
00001A3A  E04C                    1148      LSR.W       #8, D4      *
00001A3C  EC4C                    1149      LSR.W       #6, D4      *D4 = SIZE
00001A3E  4EB9 00001EAA           1150      JSR         GET_SIZE_ADDI
00001A44  3807                    1151      MOVE.W      D7, D4      
00001A46  E14C                    1152      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001A48  E54C                    1153      LSL.W       #2, D4
00001A4A  E04C                    1154      LSR.W       #8, D4      *
00001A4C  EA4C                    1155      LSR.W       #5, D4      *D4 = EA MODE
00001A4E                          1156      
00001A4E  3A07                    1157      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001A50  E14D                    1158      LSL.W       #8, D5  
00001A52  EB4D                    1159      LSL.W       #5, D5      *
00001A54  E04D                    1160      LSR.W       #8, D5
00001A56  EA4D                    1161      LSR.W       #5, D5      * D5 = EA REGISTER
00001A58                          1162      
00001A58  4EB9 00001F0C           1163      JSR         MODE_CHOOSER    *IF A WORD OR LONG  
00001A5E  4EB9 00001CE4           1164      JSR         ADDI_ERROR_CHECK  
00001A64  41F9 00001D4A           1165      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001A6A  C9FC 0006               1166      MULS        #6, D4          *GET JUMP
00001A6E  4EB0 4000               1167      JSR         0(A0, D4)       *JUMP
00001A72                          1168      
00001A72  16BC 0000               1169      MOVE.B      #00, (A3)
00001A76                          1170      
00001A76  6000 F7F8               1171      BRA         VALID_OPCODE
00001A7A                          1172  EA_LSD          *3 INVALID; DONE
00001A7A  3E00                    1173      MOVE.W      D0, D7
00001A7C                          1174      
00001A7C  3807                    1175      MOVE.W      D7, D4
00001A7E  E14C                    1176      LSL.W       #8, D4
00001A80  E04C                    1177      LSR.W       #8, D4
00001A82  EC4C                    1178      LSR.W       #6, D4      *ISOLATE SIZE
00001A84  4EB9 00001EAA           1179      JSR         GET_SIZE_ADDI  *PRINT SIZE
00001A8A  B83C 0003               1180      CMP.B       #3, D4      *EA SHIFT
00001A8E  6700 003E               1181      BEQ         EA_SHIFT    *BRANCH TO EA SHIFT
00001A92  3807                    1182      MOVE.W      D7, D4
00001A94  E14C                    1183      LSL.W       #8, D4
00001A96  E54C                    1184      LSL.W       #2, D4
00001A98  E04C                    1185      LSR.W       #8, D4
00001A9A  EE4C                    1186      LSR.W       #7, D4      *D4 = TYPE
00001A9C                          1187      
00001A9C  3A07                    1188      MOVE.W      D7, D5      *GETTING DATA
00001A9E  E94D                    1189      LSL.W       #4, D5      *SHIFT LEFT 4; RIGHT 13
00001AA0  E04D                    1190      LSR.W       #8, D5      *
00001AA2  EA4D                    1191      LSR.W       #5, D5      *D5 = DATA / REGISTER
00001AA4                          1192      
00001AA4  4EB9 00001ECA           1193      JSR         TYPE_CHOOSER
00001AAA  4EB9 00001F88           1194      JSR         COMMA
00001AB0  4EB9 00001FEA           1195      JSR         SPACE
00001AB6  3A07                    1196      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001AB8  E14D                    1197      LSL.W       #8, D5  
00001ABA  EB4D                    1198      LSL.W       #5, D5      *
00001ABC  E04D                    1199      LSR.W       #8, D5
00001ABE  EA4D                    1200      LSR.W       #5, D5      * D5 = EA REGISTER
00001AC0  4EB9 00001D7A           1201      JSR         DATA_0
00001AC6                          1202      
00001AC6  16BC 0000               1203      MOVE.B      #00, (A3)
00001ACA                          1204      
00001ACA  6000 F7A4               1205      BRA         VALID_OPCODE
00001ACE                          1206  EA_SHIFT
00001ACE  4EB9 00001FEA           1207      JSR         SPACE
00001AD4  3807                    1208      MOVE.W      D7, D4      *
00001AD6  E14C                    1209      LSL.W       #8, D4      *
00001AD8  E54C                    1210      LSL.W       #2, D4
00001ADA  E04C                    1211      LSR.W       #8, D4      *
00001ADC  EA4C                    1212      LSR.W       #5, D4      *D4 = EA MODE
00001ADE                          1213      
00001ADE  3A07                    1214      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001AE0  E14D                    1215      LSL.W       #8, D5  
00001AE2  EB4D                    1216      LSL.W       #5, D5      *
00001AE4  E04D                    1217      LSR.W       #8, D5
00001AE6  EA4D                    1218      LSR.W       #5, D5      * D5 = EA REGISTER
00001AE8                          1219      
00001AE8  4EB9 00001F0C           1220      JSR         MODE_CHOOSER    *IF A WORD OR LONG   
00001AEE  4EB9 00001CCA           1221      JSR         ADD_ERROR_CHECK 
00001AF4  41F9 00001D4A           1222      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001AFA  C9FC 0006               1223      MULS        #6, D4          *GET JUMP
00001AFE  4EB0 4000               1224      JSR         0(A0, D4)       *JUMP
00001B02  6000 0002               1225      BRA         DONE
00001B06                          1226  DONE
00001B06  16BC 0000               1227      MOVE.B      #00, (A3)
00001B0A                          1228      
00001B0A  6000 F764               1229      BRA         VALID_OPCODE
00001B0E                          1230  
00001B0E                          1231  EA_CMP          *0 INVALID
00001B0E  3E00                    1232      MOVE.W      D0, D7
00001B10                          1233      
00001B10  3807                    1234      MOVE.W      D7, D4      *GETTING OPMODE AKA SIZE
00001B12  EF4C                    1235      LSL.W       #7, D4      * 
00001B14  EE4C                    1236      LSR.W       #7, D4      *
00001B16  EC4C                    1237      LSR.W       #6, D4      *D4 = OPMODE AKA SIZE
00001B18  4EB9 00001EAA           1238      JSR         GET_SIZE_ADDI
00001B1E  3807                    1239      MOVE.W      D7, D4      
00001B20  E14C                    1240      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001B22  E54C                    1241      LSL.W       #2, D4
00001B24  E04C                    1242      LSR.W       #8, D4      *
00001B26  EA4C                    1243      LSR.W       #5, D4      *D4 = EA MODE
00001B28                          1244      
00001B28  3A07                    1245      MOVE.W      D7, D5      *SHIFT LEFT 13; RIGHT 13
00001B2A  E14D                    1246      LSL.W       #8, D5  
00001B2C  EB4D                    1247      LSL.W       #5, D5      *
00001B2E  E04D                    1248      LSR.W       #8, D5
00001B30  EA4D                    1249      LSR.W       #5, D5      * D5 = EA REGISTER
00001B32                          1250      
00001B32  4EB9 00001F0C           1251      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001B38  41F9 00001D4A           1252      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001B3E  C9FC 0006               1253      MULS        #6, D4          *GET JUMP
00001B42  4EB0 4000               1254      JSR         0(A0, D4)       *JUMP
00001B46  4EB9 00001F88           1255      JSR         COMMA
00001B4C  4EB9 00001FEA           1256      JSR         SPACE
00001B52  3A07                    1257      MOVE.W      D7, D5      *LEFT 4; RIGHT 13
00001B54  E94D                    1258      LSL.W       #4, D5      *
00001B56  E04D                    1259      LSR.W       #8, D5      *
00001B58  EA4D                    1260      LSR.W       #5, D5      *D5 DESTINATION REGISTER
00001B5A                          1261      
00001B5A  4EB9 00001D7A           1262      JSR         DATA_0
00001B60  16BC 0000               1263      MOVE.B      #00, (A3)
00001B64                          1264      
00001B64  6000 F70A               1265      BRA         VALID_OPCODE
00001B68                          1266  EA_BCC          *0 INVALID (I THINK)
00001B68  3E00                    1267      MOVE.W      D0, D7
00001B6A                          1268      
00001B6A  3807                    1269      MOVE.W      D7, D4
00001B6C  E94C                    1270      LSL.W       #4, D4
00001B6E  E04C                    1271      LSR.W       #8, D4
00001B70  E84C                    1272      LSR.W       #4, D4   *D4 = BINARY CONDITION CODE
00001B72  4EB9 00001EDA           1273      JSR         PRINT_BCC
00001B78  4EB9 00001FEA           1274      JSR         SPACE
00001B7E  4EB9 00001F3A           1275      JSR         OUTPUT_HEX
00001B84  16BC 0000               1276      MOVE.B      #00, (A3)
00001B88                          1277      
00001B88  6000 F6E6               1278      BRA         VALID_OPCODE
00001B8C                          1279  EA_JSR   *5 INVALID; DONE
00001B8C                          1280  
00001B8C  3E00                    1281      MOVE.W      D0, D7
00001B8E                          1282      
00001B8E  4EB9 00001FEA           1283      JSR         SPACE
00001B94  3807                    1284      MOVE.W      D7, D4      *GETTING SOURCE MODE
00001B96  E14C                    1285      LSL.W       #8, D4      *
00001B98  E54C                    1286      LSL.W       #2, D4      *SHIFT 10 BITS LEFT; 13 RIGHT
00001B9A  E04C                    1287      LSR.W       #8, D4      *
00001B9C  EA4C                    1288      LSR.W       #5, D4      *D4 = SOURCE MODE
00001B9E                          1289      
00001B9E  3A07                    1290      MOVE.W      D7, D5      *GETTING SOURCE REGISTER
00001BA0  E14D                    1291      LSL.W       #8, D5      *
00001BA2  EB4D                    1292      LSL.W       #5, D5      *SHIFT LEFT 13; RIGHT 13
00001BA4  E04D                    1293      LSR.W       #8, D5      *
00001BA6  EA4D                    1294      LSR.W       #5, D5      *D5 = SOURCE REGISTER
00001BA8                          1295      
00001BA8  4EB9 00001F0C           1296      JSR         MODE_CHOOSER  *INCASE MODE IS $111
00001BAE  4EB9 00001CF6           1297      JSR         LEA_ERROR_CHECK
00001BB4  41F9 00001D4A           1298      LEA         MODE_JUMP, A0 *LOAD MODE JUMP TABLE
00001BBA  C9FC 0006               1299      MULS        #6, D4        *GET JUMP
00001BBE  4EB0 4000               1300      JSR         0(A0, D4)     *JUM
00001BC2                          1301      
00001BC2  16BC 0000               1302      MOVE.B      #00, (A3)
00001BC6                          1303      
00001BC6  6000 F6A8               1304      BRA         VALID_OPCODE
00001BCA                          1305  EA_MOVEM
00001BCA                          1306  
00001BCA  3C00                    1307      MOVE.W      D0, D6
00001BCC  3806                    1308      MOVE.W      D6, D4
00001BCE  EB4C                    1309      LSL.W       #5, D4
00001BD0  E94C                    1310      LSL.W       #4, D4
00001BD2  E04C                    1311      LSR.W       #8, D4
00001BD4  EE4C                    1312      LSR.W       #7, D4
00001BD6  4EB9 00001EF4           1313      JSR         REG_SIZE
00001BDC  3E06                    1314      MOVE.W      D6, D7
00001BDE  EB4F                    1315      LSL.W       #5, D7
00001BE0  E04F                    1316      LSR.W       #8, D7
00001BE2  EE4F                    1317      LSR.W       #7, D7
00001BE4  BE3C 0000               1318      CMP.B       #0, D7
00001BE8  6700 003E               1319      BEQ         PRINT_LIST
00001BEC  BE7C 0000               1320  EAP CMP.W       #0, D7      *IF ITS A ZERO, THAT MEANS WE JUST JUMPED HERE 
00001BF0  6700 00A2               1321      BEQ         COMMA_SPACE *FROM CHECK TYPE, ELSE MEANS ITS UNALTERED
00001BF4  3806                    1322  EAS MOVE.W      D6, D4      
00001BF6  E14C                    1323      LSL.W       #8, D4      *LEFT 10; RIGHT 13
00001BF8  E54C                    1324      LSL.W       #2, D4
00001BFA  E04C                    1325      LSR.W       #8, D4      *
00001BFC  EA4C                    1326      LSR.W       #5, D4      *D4 = EA MODE
00001BFE                          1327      
00001BFE  3A06                    1328      MOVE.W      D6, D5      *SHIFT LEFT 13; RIGHT 13
00001C00  E14D                    1329      LSL.W       #8, D5  
00001C02  EB4D                    1330      LSL.W       #5, D5      *
00001C04  E04D                    1331      LSR.W       #8, D5
00001C06  EA4D                    1332      LSR.W       #5, D5      * D5 = EA REGISTER
00001C08                          1333      
00001C08  4EB9 00001F0C           1334      JSR         MODE_CHOOSER    *IF A WORD OR LONG    
00001C0E  41F9 00001D4A           1335      LEA         MODE_JUMP, A0   *LOAD MODE JUMP TABLE
00001C14  C9FC 0006               1336      MULS        #6, D4          *GET JUMP
00001C18  4EB0 4000               1337      JSR         0(A0, D4)       *JUMP
00001C1C                          1338      
00001C1C  BE7C 0001               1339      CMP.W       #1, D7 *IF ONE THEN THIS WAS PRINTED FIRST
00001C20  6700 0006               1340      BEQ         PRINT_LIST
00001C24                          1341      
00001C24  6000 008E               1342      BRA         DONE_PRINTING
00001C28                          1343  PRINT_LIST
00001C28  BE3C 0001               1344      CMP.B       #1, D7 
00001C2C  6700 0076               1345      BEQ         COMMA_SPACE2
00001C30  2E0A                    1346  EA2 MOVE.L      A2, D7
00001C32  548A                    1347      ADD.L       #2, A2
00001C34  143C 0008               1348      MOVE.B      #$8, D2
00001C38  4244                    1349      CLR         D4
00001C3A                          1350  FOR_LOOP    
00001C3A  B404                    1351      CMP.B       D4, D2
00001C3C  6700 001E               1352      BEQ         ADDRESS_REGISTERS
00001C40  E25F                    1353      ROR.W       #1, D7
00001C42  6000 0006               1354      BRA         PRINT_CURRENT
00001C46  5244                    1355  JFZ ADDQ        #1, D4
00001C48  60F0                    1356      BRA         FOR_LOOP
00001C4A                          1357      
00001C4A                          1358  PRINT_CURRENT
00001C4A  64FA                    1359      BCC         JFZ
00001C4C  1A04                    1360      MOVE.B      D4, D5
00001C4E  4EB9 00001D7A           1361      JSR         DATA_0
00001C54  4EB9 00002012           1362      JSR         SLASH
00001C5A  60EA                    1363      BRA         JFZ
00001C5C                          1364      
00001C5C                          1365  ADDRESS_REGISTERS
00001C5C  4244                    1366      CLR         D4
00001C5E                          1367  FOR_2
00001C5E  B404                    1368      CMP.B       D4, D2
00001C60  6700 001E               1369      BEQ         CHECK_TYPE
00001C64  E25F                    1370      ROR.W       #1, D7
00001C66  6000 0006               1371      BRA         EA_PRINT_ADDRESS
00001C6A  5244                    1372  JFF ADDQ        #1, D4
00001C6C  60F0                    1373      BRA         FOR_2
00001C6E                          1374      
00001C6E                          1375  EA_PRINT_ADDRESS
00001C6E  64FA                    1376      BCC         JFF
00001C70  1A04                    1377      MOVE.B      D4, D5
00001C72  4EB9 00002012           1378      JSR         SLASH
00001C78  4EB9 00001D88           1379      JSR         ADDR_1
00001C7E  60EA                    1380      BRA         JFF  
00001C80                          1381  CHECK_TYPE
00001C80  3E06                    1382      MOVE.W      D6, D7
00001C82  EB4F                    1383      LSL.W       #5, D7  
00001C84  E04F                    1384      LSR.W       #8, D7
00001C86  EE4F                    1385      LSR.W       #7, D7
00001C88  BE3C 0000               1386      CMP.B       #0, D7   *IF TYPE IS 0 THE LIST HAS BEEN PRINTED FIRST  
00001C8C  6700 FF5E               1387      BEQ         EAP      *THEREFORE ITS TIME TO PRINT THE EAP
00001C90  6600 0022               1388      BNE         DONE_PRINTING
00001C94                          1389      
00001C94                          1390  COMMA_SPACE
00001C94  4EB9 00001F88           1391      JSR         COMMA
00001C9A  4EB9 00001FEA           1392      JSR         SPACE
00001CA0  6000 FF52               1393      BRA         EAS
00001CA4                          1394      
00001CA4                          1395  COMMA_SPACE2
00001CA4  4EB9 00001F88           1396      JSR         COMMA
00001CAA  4EB9 00001FEA           1397      JSR         SPACE
00001CB0  6000 FF7E               1398      BRA         EA2
00001CB4                          1399      
00001CB4                          1400  DONE_PRINTING
00001CB4  16BC 0000               1401      MOVE.B      #00, (A3)
00001CB8  6000 F5B6               1402      BRA         VALID_OPCODE
00001CBC                          1403  
00001CBC                          1404  
00001CBC                          1405  
00001CBC                          1406  
00001CBC                          1407  
00001CBC                          1408  
00001CBC                          1409  
00001CBC                          1410  
00001CBC                          1411  
00001CBC                          1412  
00001CBC                          1413  
00001CBC                          1414  
00001CBC                          1415  
00001CBC                          1416  
00001CBC                          1417  
00001CBC                          1418  
00001CBC                          1419  BYEBYE
00001CBC  FFFF FFFF               1420      SIMHALT
00001CC0                          1421  
00001CC0                          1422  
00001CC0                          1423  
00001CC0                          1424  
00001CC0                          1425  
00001CC0                          1426  
00001CC0                          1427  
00001CC0                          1428  
00001CC0                          1429  
00001CC0                          1430  
00001CC0                          1431  
00001CC0                          1432  
00001CC0                          1433  
00001CC0                          1434  
00001CC0                          1435  
00001CC0                          1436  MOVE_ERROR_CHECK       *only invalid move is desn addr reg
00001CC0  B83C 0001               1437      CMP.B       #1, D4 *if d4 is one, dest is addr reg
00001CC4  6700 0354               1438      BEQ         INVALID
00001CC8  4E75                    1439      RTS
00001CCA                          1440      
00001CCA                          1441  ADD_ERROR_CHECK  *COVERS ALL SHIFTS
00001CCA  B83C 0007               1442      CMP.B       #7, D4
00001CCE  6700 0072               1443      BEQ         EAT_INVALID
00001CD2  B83C 0001               1444      CMP.B       #1, D4
00001CD6  6700 0342               1445      BEQ         INVALID
00001CDA  B83C 0000               1446      CMP.B       #0, D4
00001CDE  6700 033A               1447      BEQ         INVALID
00001CE2  4E75                    1448      RTS 
00001CE4                          1449      
00001CE4                          1450  ADDI_ERROR_CHECK *COVERS CLR
00001CE4  B83C 0001               1451      CMP.B       #1, D4
00001CE8  6700 0330               1452      BEQ         INVALID
00001CEC  B83C 0007               1453      CMP.B       #7, D4
00001CF0  6700 0050               1454      BEQ         EAT_INVALID
00001CF4  4E75                    1455      RTS
00001CF6                          1456      
00001CF6                          1457  LEA_ERROR_CHECK *COVERS JSR
00001CF6  B83C 0000               1458      CMP.B       #0, D4
00001CFA  6700 031E               1459      BEQ         INVALID
00001CFE  B83C 0001               1460      CMP.B       #1, D4
00001D02  6700 0316               1461      BEQ         INVALID
00001D06  B83C 0003               1462      CMP.B       #3, D4
00001D0A  6700 030E               1463      BEQ         INVALID
00001D0E  B83C 0004               1464      CMP.B       #4, D4
00001D12  6700 0306               1465      BEQ         INVALID
00001D16  B83C 0007               1466      CMP.B       #7, D4
00001D1A  6700 0026               1467      BEQ         EAT_INVALID
00001D1E  4E75                    1468      RTS
00001D20                          1469      
00001D20                          1470  MOVEM_ERROR_CHECK *0, 1, 4, 7
00001D20  B83C 0000               1471      CMP.B       #0, D4
00001D24  6700 02F4               1472      BEQ         INVALID
00001D28  B83C 0001               1473      CMP.B       #1, D4
00001D2C  6700 02EC               1474      BEQ         INVALID
00001D30  B83C 0004               1475      CMP.B       #4, D4
00001D34  6700 02E4               1476      BEQ         INVALID
00001D38  B83C 0007               1477      CMP.B       #7, D4
00001D3C  6700 0004               1478      BEQ         EAT_INVALID
00001D40  4E75                    1479      RTS
00001D42                          1480      
00001D42                          1481      
00001D42                          1482      
00001D42                          1483      *assuming FOR NOW that it always eats a long
00001D42                          1484  EAT_INVALID *EATS THE NEXT TWO WORD VALUES... THEN CALLS INVALID
00001D42  548A                    1485      ADD.L       #2, A2      *EAT THE FIRST WORD
00001D44  548A                    1486      ADD.L       #2, A2      *EAT THE SECOND WORD
00001D46  6000 02D2               1487      BRA         INVALID
00001D4A                          1488  
00001D4A                          1489  
00001D4A                          1490  
00001D4A                          1491  
00001D4A                          1492  
00001D4A                          1493  
00001D4A                          1494  
00001D4A                          1495  
00001D4A                          1496  
00001D4A                          1497  
00001D4A                          1498  
00001D4A                          1499  
00001D4A                          1500  
00001D4A                          1501  
00001D4A                          1502  
00001D4A                          1503  
00001D4A                          1504  
00001D4A                          1505  
00001D4A  4EF9 00001D7A           1506  MODE_JUMP       JMP     DATA_0
00001D50  4EF9 00001D88           1507                  JMP     ADDR_1
00001D56  4EF9 00001D96           1508                  JMP     ADDI_2
00001D5C  4EF9 00001DA8           1509                  JMP     ADDP_3
00001D62  4EF9 00001DB4           1510                  JMP     ADDM_4
00001D68  4EF9 00001DC0           1511                  JMP     ABSW_5
00001D6E  4EF9 00001DD6           1512                  JMP     ABSL_6
00001D74  4EF9 00001DFA           1513                  JMP     IMME_7
00001D7A                          1514  
00001D7A                          1515  DATA_0 *DONE
00001D7A  16F9 00007282           1516      MOVE.B      M_DREG, (A3)+
00001D80  4EB9 00001E36           1517      JSR         GET_REG
00001D86  4E75                    1518      RTS
00001D88                          1519  
00001D88                          1520  ADDR_1 *ADD CONDITIONS FOR SOURCE ONLY, AND NEVER BYTES
00001D88  16F9 00007284           1521      MOVE.B      M_AREG, (A3)+
00001D8E  4EB9 00001E36           1522      JSR         GET_REG
00001D94  4E75                    1523      RTS
00001D96                          1524   
00001D96                          1525  ADDI_2 *DONE
00001D96  4EB9 00001FCA           1526      JSR         OPEN
00001D9C  4EB8 1D88               1527      JSR         ADDR_1
00001DA0  4EB9 00001FD2           1528      JSR         CLOSE
00001DA6  4E75                    1529      RTS
00001DA8                          1530      
00001DA8                          1531  ADDP_3 *DONE
00001DA8  4EB8 1D96               1532      JSR         ADDI_2
00001DAC  4EB9 00001FDA           1533      JSR         PLUS
00001DB2  4E75                    1534      RTS
00001DB4                          1535      
00001DB4                          1536  ADDM_4 *DONE
00001DB4  4EB9 00001FE2           1537      JSR         SUB
00001DBA  4EB8 1D96               1538      JSR         ADDI_2
00001DBE  4E75                    1539      RTS
00001DC0                          1540      
00001DC0                          1541  ABSW_5  *DONE
00001DC0  548A                    1542      ADD.L       #2, A2      *INCREMENT INTO WORD ADDRESS
00001DC2  141A                    1543      MOVE.B      (A2)+, D2
00001DC4  E15A                    1544      ROL         #8, D2
00001DC6  1412                    1545      MOVE.B      (A2), D2
00001DC8  534A                    1546      SUB         #1, A2  
00001DCA  4EB9 00001FF2           1547      JSR         CASH
00001DD0  6100 0168               1548      BSR         OUTPUT_HEX
00001DD4  4E75                    1549      RTS
00001DD6                          1550  
00001DD6                          1551   
00001DD6                          1552  ABSL_6 *
00001DD6  4EB9 00001FF2           1553      JSR         CASH
00001DDC  548A                    1554      ADD.L       #2, A2      *INCREMENT INTO WORD
00001DDE  141A                    1555      MOVE.B      (A2)+, D2
00001DE0  E15A                    1556      ROL         #8, D2
00001DE2  1412                    1557      MOVE.B      (A2), D2
00001DE4  534A                    1558      SUB         #1, A2
00001DE6  6100 0152               1559      BSR         OUTPUT_HEX
00001DEA                          1560      
00001DEA                          1561      
00001DEA  548A                    1562      ADD.L       #2, A2      *IDCREMENT INTO NEXT WORK
00001DEC  141A                    1563      MOVE.B      (A2)+, D2
00001DEE  E15A                    1564      ROL         #8, D2
00001DF0  1412                    1565      MOVE.B      (A2), D2
00001DF2  534A                    1566      SUB         #1, A2
00001DF4  6100 0144               1567      BSR         OUTPUT_HEX
00001DF8  4E75                    1568      RTS
00001DFA                          1569      
00001DFA                          1570  IMME_7  *FOR NOW ONLY WORKING WITH IMMEDIATE HEX VALUES
00001DFA  4EB9 00001F90           1571      JSR         POUND
00001E00  4EB9 00001FF2           1572      JSR         CASH
00001E06                          1573      
00001E06  548A                    1574      ADD.L       #2, A2
00001E08  141A                    1575      MOVE.B      (A2)+, D2
00001E0A  E15A                    1576      ROL         #8, D2
00001E0C  1412                    1577      MOVE.B      (A2), D2
00001E0E  534A                    1578      SUB         #1, A2
00001E10  6100 0128               1579      BSR         OUTPUT_HEX
00001E14                          1580      
00001E14                          1581      
00001E14                          1582      
00001E14                          1583      *IDEA IS TO HAVE A FLAG HERE TO SEE IF THE DATA IS GONNA BE A LONG
00001E14                          1584      *THEN BRANCH TO THE BELOW THREE COMMANDS IF THE IMMEDIATE DATA IS A LONG
00001E14                          1585      
00001E14  4E75                    1586      RTS
00001E16                          1587  
00001E16                          1588  GET_SIZE
00001E16  4EB9 00001F98           1589      JSR         DOT
00001E1C  B83C 0001               1590      CMP.B       #1, D4
00001E20  6700 018C               1591      BEQ         BYTE
00001E24  B83C 0003               1592      CMP.B       #3, D4
00001E28  6700 0176               1593      BEQ         WORD
00001E2C  B83C 0002               1594      CMP.B       #2, D4
00001E30  6700 018A               1595      BEQ         LONG  
00001E34  4E75                    1596      RTS
00001E36                          1597      
00001E36                          1598  GET_REG ******************
00001E36  2205                    1599      MOVE.L      D5, D1 
00001E38  4EB8 12DC               1600      JSR         CONVERT_TO_ASCII
00001E3C  16C1                    1601      MOVE.B      D1, (A3)+
00001E3E  4E75                    1602      RTS
00001E40                          1603      
00001E40                          1604  GET_OPMODE
00001E40  4EB9 00001F98           1605      JSR         DOT
00001E46  B83C 0003               1606      CMP.B       #3, D4
00001E4A  6700 0154               1607      BEQ         WORD
00001E4E  B83C 0007               1608      CMP.B       #7, D4
00001E52  6700 0168               1609      BEQ         LONG
00001E56  4E75                    1610      RTS
00001E58                          1611      
00001E58                          1612  GET_OPMODE_MATH
00001E58  4EB9 00001F98           1613      JSR         DOT
00001E5E  B83C 0000               1614      CMP.B       #0, D4
00001E62  6700 014A               1615      BEQ         BYTE
00001E66  B83C 0004               1616      CMP.B       #4, D4
00001E6A  6700 0142               1617      BEQ         BYTE
00001E6E  B83C 0001               1618      CMP.B       #1, D4
00001E72  6700 012C               1619      BEQ         WORD
00001E76  B83C 0005               1620      CMP.B       #5, D4
00001E7A  6700 0124               1621      BEQ         WORD
00001E7E  B83C 0002               1622      CMP.B       #2, D4
00001E82  6700 0138               1623      BEQ         LONG
00001E86  B83C 0006               1624      CMP.B       #6, D4
00001E8A  6700 0130               1625      BEQ         LONG
00001E8E  4E75                    1626      RTS
00001E90                          1627      
00001E90                          1628  GET_DATA ******************
00001E90  4EB9 00001F90           1629      JSR         POUND
00001E96  BA3C 0000               1630      CMP.B       #0, D5
00001E9A  6700 0008               1631      BEQ         PRINT_8
00001E9E  2205                    1632      MOVE.L      D5, D1
00001EA0  16C1                    1633      MOVE.B      D1, (A3)+
00001EA2  4E75                    1634      RTS
00001EA4                          1635      
00001EA4                          1636  PRINT_8 ********
00001EA4  7208                    1637      MOVE.L      #8, D1
00001EA6  16C1                    1638      MOVE.B      D1, (A3)+
00001EA8  4E75                    1639      RTS
00001EAA                          1640      
00001EAA                          1641  GET_SIZE_ADDI
00001EAA  4EB9 00001F98           1642      JSR         DOT
00001EB0  B83C 0000               1643      CMP.B       #0, D4
00001EB4  6700 00F8               1644      BEQ         BYTE
00001EB8  B83C 0001               1645      CMP.B       #1, D4
00001EBC  6700 00E2               1646      BEQ         WORD
00001EC0  B83C 0002               1647      CMP.B       #2, D4
00001EC4  6700 00F6               1648      BEQ         LONG  
00001EC8  4E75                    1649      RTS
00001ECA                          1650      
00001ECA                          1651  TYPE_CHOOSER
00001ECA  B83C 0000               1652      CMP.B       #0, D4      *IF IMMEDIATE
00001ECE  67C0                    1653      BEQ         GET_DATA    *IF BRANCHED  ->  #1 IS NOW PRINTED
00001ED0  B83C 0001               1654      CMP.B       #1, D4      *IF A DATA REG
00001ED4  6700 FEA4               1655      BEQ         DATA_0
00001ED8  4E75                    1656      RTS
00001EDA                          1657      
00001EDA                          1658  PRINT_BCC
00001EDA  B83C 0004               1659      CMP.B       #4, D4
00001EDE  6700 011A               1660      BEQ         CC
00001EE2  B83C 000E               1661      CMP.B       #14, D4
00001EE6  6700 011A               1662      BEQ         GT
00001EEA  B83C 000F               1663      CMP.B       #15, D4
00001EEE  6700 011A               1664      BEQ         LE
00001EF2  4E75                    1665      RTS
00001EF4                          1666      
00001EF4                          1667  REG_SIZE
00001EF4  4EB9 00001F98           1668      JSR         DOT
00001EFA  B83C 0000               1669      CMP.B       #0, D4
00001EFE  6700 00A0               1670      BEQ         WORD
00001F02  B83C 0001               1671      CMP.B       #1, D4
00001F06  6700 00B4               1672      BEQ         LONG
00001F0A  4E75                    1673      RTS
00001F0C                          1674  MODE_CHOOSER
00001F0C  B83C 0007               1675      CMP.B       #7, D4
00001F10  6700 0004               1676      BEQ         NEW_MODE
00001F14  4E75                    1677      RTS
00001F16                          1678      
00001F16                          1679  NEW_MODE
00001F16  BA3C 0000               1680      CMP.B       #0, D5 *CHECK REGISTER(D5), WORD ADDRESS?
00001F1A  6700 001A               1681      BEQ         TO_FIVE *CHANGE MODE (D4) TO 5
00001F1E  BA3C 0001               1682      CMP.B       #1, D5 *CHECK REGISTER(D5), LONG ADDRESS?
00001F22  6700 000E               1683      BEQ         TO_SIX *CHANGE MODE(D4) TO 6
00001F26                          1684      
00001F26  BA3C 0004               1685      CMP.B       #4, D5 *for immediate data
00001F2A  6700 0004               1686      BEQ         TO_EIGHT
00001F2E  4E75                    1687      RTS
00001F30                          1688      
00001F30                          1689  TO_EIGHT
00001F30  4E75                    1690      RTS
00001F32                          1691      
00001F32                          1692  TO_SIX  
00001F32  5304                    1693      SUB.B      #1, D4
00001F34  4E75                    1694      RTS
00001F36                          1695  
00001F36                          1696  TO_FIVE
00001F36  5504                    1697      SUB.B      #2, D4
00001F38  4E75                    1698      RTS
00001F3A                          1699  
00001F3A                          1700  OUTPUT_HEX
00001F3A                          1701      *OUTPUT 1ST
00001F3A  3802                    1702      MOVE.W      D2, D4              *D7 = <1010 1111 0101 0111>
00001F3C  E04C                    1703      LSR.W       #8, D4              *D7 = <0000 0000 1010 1111>
00001F3E  E84C                    1704      LSR.W       #4, D4              *D7 = <0000 0000 0000 1010>
00001F40  1204                    1705      MOVE.B      D4, D1
00001F42  6100 F398               1706      BSR         CONVERT_TO_ASCII    *convert value in D1, to ascii
00001F46  6100 003C               1707      BSR         ADD_CHAR         *print the char in D1  
00001F4A                          1708      *OUTPUT 2ND
00001F4A  3802                    1709      MOVE.W      D2, D4
00001F4C  E94C                    1710      LSL.W       #4, D4              *SHIFT OUT FURTHEST RIGHT BIT
00001F4E  E04C                    1711      LSR.W       #8, D4
00001F50  E84C                    1712      LSR.W       #4, D4  
00001F52  1204                    1713      MOVE.B      D4, D1
00001F54  6100 F386               1714      BSR         CONVERT_TO_ASCII
00001F58  6100 002A               1715      BSR         ADD_CHAR
00001F5C                          1716      *OUTPUT 3RD
00001F5C  3802                    1717      MOVE.W      D2, D4
00001F5E  E14C                    1718      LSL.W       #8, D4
00001F60  E04C                    1719      LSR.W       #8, D4
00001F62  E84C                    1720      LSR.W       #4, D4
00001F64  1204                    1721      MOVE.B      D4, D1
00001F66  6100 F374               1722      BSR         CONVERT_TO_ASCII
00001F6A  6100 0018               1723      BSR         ADD_CHAR
00001F6E                          1724      *OUTPUT 4TH
00001F6E  3802                    1725      MOVE.W      D2, D4  *D7 = <1010 1111 0101 0111>
00001F70  E14C                    1726      LSL.W       #8, D4  *     <0101 0111 0000 0000>
00001F72  E94C                    1727      LSL.W       #4, D4  *     <0111 0000 0000 0000>
00001F74  E04C                    1728      LSR.W       #8, D4  *     <
00001F76  E84C                    1729      LSR.W       #4, D4
00001F78  1204                    1730      MOVE.B      D4, D1
00001F7A  6100 F360               1731      BSR         CONVERT_TO_ASCII
00001F7E  6100 0004               1732      BSR         ADD_CHAR
00001F82  4E75                    1733      RTS
00001F84                          1734                                     *continue converting            
00001F84                          1735  ADD_CHAR ********
00001F84  16C1                    1736      MOVE.B      D1, (A3)+
00001F86  4E75                    1737      RTS
00001F88                          1738  
00001F88                          1739  COMMA
00001F88  16F9 0000726E           1740      MOVE.B      M_COMMA, (A3)+
00001F8E  4E75                    1741      RTS
00001F90                          1742      
00001F90                          1743  POUND
00001F90  16F9 00007270           1744      MOVE.B      M_POUND, (A3)+
00001F96  4E75                    1745      RTS
00001F98                          1746          
00001F98                          1747  DOT
00001F98  16F9 00007272           1748      MOVE.B      M_DOT, (A3)+
00001F9E  4E75                    1749      RTS   
00001FA0                          1750  
00001FA0                          1751  WORD
00001FA0  16F9 00007274           1752      MOVE.B      M_WORD, (A3)+
00001FA6  4EB9 00001FEA           1753      JSR         SPACE
00001FAC  4E75                    1754      RTS
00001FAE                          1755  
00001FAE                          1756  BYTE
00001FAE  16F9 00007276           1757      MOVE.B      M_BYTE, (A3)+
00001FB4  4EB9 00001FEA           1758      JSR         SPACE
00001FBA  4E75                    1759      RTS
00001FBC                          1760      
00001FBC                          1761  LONG
00001FBC  16F9 00007278           1762      MOVE.B      M_LONG, (A3)+
00001FC2                          1763      
00001FC2  4EB9 00001FEA           1764      JSR         SPACE
00001FC8  4E75                    1765      RTS
00001FCA                          1766      
00001FCA                          1767  OPEN
00001FCA  16F9 0000727A           1768      MOVE.B      M_OPEN, (A3)+
00001FD0  4E75                    1769      RTS
00001FD2                          1770  
00001FD2                          1771  CLOSE
00001FD2  16F9 0000727C           1772      MOVE.B      M_CLOSE, (A3)+
00001FD8  4E75                    1773      RTS
00001FDA                          1774      
00001FDA                          1775  PLUS
00001FDA  16F9 0000727E           1776      MOVE.B      M_PLUS, (A3)+
00001FE0  4E75                    1777      RTS
00001FE2                          1778      
00001FE2                          1779  SUB
00001FE2  16F9 00007280           1780      MOVE.B      M_SUB, (A3)+
00001FE8  4E75                    1781      RTS
00001FEA                          1782      
00001FEA                          1783  SPACE
00001FEA  16F9 000071EE           1784      MOVE.B      M_SPACE, (A3)+
00001FF0  4E75                    1785      RTS    
00001FF2                          1786      
00001FF2                          1787  CASH
00001FF2  16F9 0000726C           1788      MOVE.B      M_CASH, (A3)+
00001FF8  4E75                    1789      RTS
00001FFA                          1790  
00001FFA                          1791  CC
00001FFA  16F9 00007286           1792      MOVE.B      M_CC, (A3)+
00002000  4E75                    1793      RTS
00002002                          1794  GT
00002002  16F9 00007289           1795      MOVE.B      M_GT, (A3)+
00002008  4E75                    1796      RTS
0000200A                          1797  
0000200A                          1798  LE
0000200A  16F9 0000728C           1799      MOVE.B      M_LE, (A3)+
00002010  4E75                    1800      RTS
00002012                          1801      
00002012                          1802  SLASH
00002012  16F9 0000728F           1803      MOVE.B      M_SLASH, (A3)+
00002018  4E75                    1804      RTS
0000201A                          1805      
0000201A                          1806  INVALID
0000201A  16BC 0000               1807      MOVE.B      #00, (A3)
0000201E  6000 F1C6               1808      BRA         INVALID_OPCODE
00002022                          1809      
00002022                          1810  
00002022  =0000000D               1811  CR      EQU     $0D
00002022  =0000000A               1812  LF      EQU     $0A
00002022                          1813  
00002022                          1814  
00002022                          1815  
00002022                          1816  
00002022                          1817  
00002022                          1818  
00002022                          1819  
00002022                          1820  
00002022                          1821  
00002022                          1822  
00002022                          1823  
00002022                          1824  
00002022                          1825  
00002022                          1826  
00002022                          1827  
00002022                          1828  
00002022                          1829  
00002022                          1830  
00002022                          1831  -------------------- end include --------------------
00002022                          1832      INCLUDE         'demo_test.x68'
00002022                          1833  
00002022  =00007000               1834  start       EQU $00007000   * ORG and END address
00002022                          1835  
00002022                          1836  
00007000                          1837          ORG start
00007000                          1838  
00007000                          1839  
00007000  4E71                    1840          NOP         *Required
00007002  4E75                    1841          RTS         *Required
00007004                          1842  
00007004                          1843  
00007004  D441                    1844  add_start   ADD.W   D1,D2
00007006  0641 4E71               1845                  ADDI.W  #$4E71,D1
0000700A  5E87                    1846          ADDQ.L  #07,D7      
0000700C  D6DE                    1847          ADDA.W  (A6)+,A3
0000700E  DDFC 3000AAAA           1848          ADDA.L  #$3000AAAA,A6
00007014  0685 D50000AA           1849          ADDI.L  #$D50000AA,D5
0000701A  0646 5555               1850          ADDI.W  #$5555,D6
0000701E  0600 00FE               1851          ADDI.B  #$FE,D0
00007022  9441                    1852                  SUB.W   D1,D2
00007024                          1853  
00007024  1200                    1854  moves       MOVE.B  D0,D1
00007026  33CE F30045BB           1855          MOVE.W  A6,$F30045BB
0000702C  2000                    1856          MOVE.L  D0,D0
0000702E  2CC7                    1857          MOVE.L  D7,(A6)+
00007030  36BC FFD0               1858          MOVE.W  #$FFD0,(A3)
00007034  23F9 C00022AA 3000A0F8  1859          MOVE.L  $C00022AA,$3000A0F8
0000703E  2B08                    1860          MOVE.L  A0,-(A5)
00007040  3056                    1861          MOVEA.W (A6),A0
00007042  48A7 07E0               1862          MOVEM.W A0/A1/A2/D5/D6/D7,-(SP)
00007046  4CD8 1B07               1863          MOVEM.L (A0)+,D0/D1/D2/A4/A3/A0/A1
0000704A  7401                    1864          MOVEQ   #1,D2
0000704C                          1865          
0000704C  C6B9 8000A000           1866  ands        AND.L   $8000A000,D3
00007052  E128                    1867  shifts      LSL.B   D0,D0
00007054  E848                    1868          LSR.W   #4,D0
00007056  E3DA                    1869          LSL.W   (A2)+
00007058  EC27                    1870          ASR.B   D6,D7
0000705A  EB27                    1871          ASL.B   D5,D7
0000705C  E5BB                    1872  rolls       ROL.L   D2,D3
0000705E  E89E                    1873          ROR.L   #4,D6
00007060                          1874  
00007060  4204                    1875  clear       CLR.B   D4
00007062  45F9 DC00FF00           1876  load_addr   LEA $DC00FF00,A2
00007068  49D5                    1877          LEA (A5),A4
0000706A                          1878  
0000706A  BA13                    1879  compares    CMP.B   (A3),D5
0000706C  B4B9 ABC0FF00           1880          CMP.L   $ABC0FF00,D2
00007072  B8C2                    1881          CMPA.W  D2,A4
00007074                          1882          
00007074                          1883  
00007074                          1884  
00007074  4E93                    1885  jmplabel        JSR (A3)        * Address register indirect
00007076  64E8                    1886          BCC clear       
00007078  6EF0                    1887          BGT compares        
0000707A  6F00 0002               1888          BLE multiply
0000707E                          1889          
0000707E  C7C0                    1890  multiply    MULS    D0,D3       *Optional instruction
00007080  C1D6                    1891          MULS    (A6),D0     *Optional instruction
00007082  C3FC 4567               1892          MULS    #$4567,D1   *Optional instruction
00007086  8ADB                    1893          DIVU    (A3)+,D5    *Optional instruction
00007088  4E71                    1894          NOP
0000708A  4E71                    1895          NOP
0000708C  9882                    1896          SUB.L   D2,D4
0000708E  9E93                    1897          SUB.L   (A3),D7
00007090                          1898      
00007090                          1899  
00007090                          1900  
00007090                          1901  
00007090                          1902  
00007090                          1903  
00007090                          1904  
00007090                          1905  
00007090                          1906  
00007090                          1907  
00007090                          1908  
00007090                          1909  
00007090                          1910  
00007090                          1911  -------------------- end include --------------------
00007090                          1912  END
00007090  43F9 000071DF           1913      LEA             M_END,A1
00007096  103C 000E               1914      MOVE.B          #14,D0
0000709A  4E4F                    1915      TRAP            #15
0000709C  FFFF FFFF               1916      SIMHALT             ; halt simulator
000070A0                          1917  
000070A0  =0000000D               1918  CR          EQU     $0D
000070A0  =0000000A               1919  LF          EQU     $0A
000070A0                          1920  
000070A0= 50 6C 65 61 73 65 ...   1921  M_INPUT_START DC.B 'Please enter starting memory address in hexadecimal:',CR,LF,0
000070D7= 50 6C 65 61 73 65 ...   1922  M_INPUT_END   DC.B 'Please enter ending memory address in hexadecimal:',CR,LF,0
0000710C= 49 6E 76 61 6C 69 ...   1923  M_INVALID     DC.B 'Invalid value. Please enter a valid value: ',CR,LF,0
0000713A= 45 71 75 61 6C 20 ...   1924  M_EQUAL       DC.B 'Equal values. No memory read. Please enter new values',CR,LF,0
00007172= 44 41 54 41 20 20 ...   1925  M_DATA        DC.B 'DATA    ',0
0000717B= 20 20 20 20 00          1926  M_TAB         DC.B '    ',0
00007180= 50 72 65 73 73 20 ...   1927  M_PRESS_CONT  DC.B 'Press any key to continue',0
0000719A= 46 69 6E 69 73 68 ...   1928  M_FINISHED    DC.B 'Finished Reading Memory',CR,LF,0
000071B4= 57 6F 75 6C 64 20 ...   1929  M_CONTINUE    DC.B 'Would you like to read memory again? (Y/N)',0
000071DF= 50 72 6F 67 72 61 ...   1930  M_END         DC.B 'Program Exit',CR,LF,0
000071EE                          1931  
000071EE  =00000500               1932  STRING_START    EQU     $0500
000071EE  =00000400               1933  DATA_START      EQU     $0400
000071EE                          1934  
000071EE  =00000100               1935  MEM_START       EQU     $0100
000071EE  =00000200               1936  MEM_END         EQU     $0200
000071EE                          1937  
000071EE= 20 00                   1938  M_SPACE       DC.B  ' ',0
000071F0= 0D 0A 00                1939  M_NEW_LINE    DC.B  '',CR,LF,0
000071F3                          1940  
000071F3= 41 44 44 49 00          1941  ADDI    DC.B    'ADDI',0
000071F8= 4D 4F 56 45 00          1942  MOVE    DC.B    'MOVE',0
000071FD= 4D 4F 56 45 41 00       1943  MOVEA   DC.B    'MOVEA',0
00007203= 43 4C 52 00             1944  OPCLR   DC.B    'CLR',0
00007207= 4C 45 41 00             1945  OPLEA   DC.B    'LEA',0
0000720B= 4A 53 52 00             1946  OPJSR   DC.B    'JSR',0
0000720F= 4E 4F 50 00             1947  OPNOP   DC.B    'NOP',0
00007213= 52 54 53 00             1948  OPRTS   DC.B    'RTS',0
00007217= 4D 4F 56 45 4D 00       1949  MOVEM   DC.B    'MOVEM',0
0000721D= 41 44 44 51 00          1950  ADDQ    DC.B    'ADDQ',0
00007222= 42 00                   1951  Bcc     DC.B    'B',0
00007224= 4D 4F 56 45 51 00       1952  MOVEQ   DC.B    'MOVEQ',0
0000722A= 44 49 56 55 00          1953  DIVU    DC.B    'DIVU',0
0000722F= 4F 52 00                1954  OR      DC.B    'OR',0
00007232= 53 55 42 00             1955  OPSUB   DC.B    'SUB',0
00007236= 43 4D 50 00             1956  CMP     DC.B    'CMP',0
0000723A= 4D 55 4C 53 00          1957  MULS    DC.B    'MULS',0
0000723F= 41 4E 44 00             1958  AND     DC.B    'AND',0
00007243= 41 44 44 00             1959  ADD     DC.B    'ADD',0
00007247= 41 44 44 41 00          1960  ADDA    DC.B    'ADDA',0
0000724C= 4C 53 4C 00             1961  LSL     DC.B    'LSL',0
00007250= 4C 53 52 00             1962  LSR     DC.B    'LSR',0
00007254= 41 53 4C 00             1963  ASL     DC.B    'ASL',0
00007258= 41 53 52 00             1964  ASR     DC.B    'ASR',0
0000725C= 52 4F 4C 00             1965  ROL     DC.B    'ROL',0
00007260= 52 4F 52 00             1966  ROR     DC.B    'ROR',0
00007264= 49 4E 56 41 4C 49 ...   1967  M_INVAL DC.B 'INVALID',0
0000726C= 24 00                   1968  M_CASH  DC.B '$',0
0000726E                          1969  *M_SPACE DC.B ' ',0
0000726E= 2C 00                   1970  M_COMMA DC.B ',',0
00007270= 23 00                   1971  M_POUND DC.B '#',0
00007272= 2E 00                   1972  M_DOT   DC.B '.',0
00007274= 57 00                   1973  M_WORD  DC.B 'W',0
00007276= 42 00                   1974  M_BYTE  DC.B 'B',0
00007278= 4C 00                   1975  M_LONG  DC.B 'L',0
0000727A= 28 00                   1976  M_OPEN  DC.B '(',0
0000727C= 29 00                   1977  M_CLOSE DC.B ')',0
0000727E= 2B 00                   1978  M_PLUS  DC.B '+',0
00007280= 2D 00                   1979  M_SUB   DC.B '-',0
00007282= 44 00                   1980  M_DREG  DC.B 'D',0
00007284= 41 00                   1981  M_AREG  DC.B 'A',0
00007286= 43 43 00                1982  M_CC    DC.B 'CC',0
00007289= 47 54 00                1983  M_GT    DC.B 'GT',0
0000728C= 4C 45 00                1984  M_LE    DC.B 'LE',0
0000728F= 2F 00                   1985  M_SLASH DC.B '/',0
00007291                          1986  
00007291                          1987  
00007291                          1988  STOP:
00007291                          1989      END    MAIN

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSL_6              1DD6
ABSW_5              1DC0
ADD                 7243
ADDA                7247
ADDI                71F3
ADDI_2              1D96
ADDI_ERROR_CHECK    1CE4
ADDM_4              1DB4
ADDP_3              1DA8
ADDQ                721D
ADDRESS_REGISTERS   1C5C
ADDR_1              1D88
ADD_CHAR            1F84
ADD_ERROR_CHECK     1CCA
ADD_START           7004
ALPH_CHAR           12EE
AND                 723F
ANDS                704C
ASL                 7254
ASR                 7258
BCC                 7222
BYEBYE              1CBC
BYTE                1FAE
CASH                1FF2
CC                  1FFA
CHECK_TYPE          1C80
CLEAR               7060
CLOSE               1FD2
CMP                 7236
COMMA               1F88
COMMA_SPACE         1C94
COMMA_SPACE2        1CA4
COMPARES            706A
CONTINUE_YN         118E
CONVERT_TO_ASCII    12DC
CR                  D
DATA                1324
DATA_0              1D7A
DATA_START          400
DIVU                722A
DN_VERSION          17DA
DONE                1B06
DONE_PRINTING       1CB4
DOT                 1F98
EA2                 1C30
EAP                 1BEC
EAS                 1BF4
EAT_INVALID         1D42
EA_ADD              17BA
EA_ADDA             1930
EA_ADDI             1874
EA_ADDQ             18D6
EA_BCC              1B68
EA_CLR              1A34
EA_CMP              1B0E
EA_JSR              1B8C
EA_LEA              19DC
EA_LSD              1A7A
EA_MOVE             16B4
EA_MOVEA            1728
EA_MOVEM            1BCA
EA_MOVEQ            1780
EA_MULS             198A
EA_PRINT_ADDRESS    1C6E
EA_SHIFT            1ACE
EA_VERSION          1824
EFFECTIVE_ADDRESSING  118E
END                 7090
END_PRINT_DATA_LOOP  124C
EQUAL_ERROR         1136
FOR_2               1C5E
FOR_LOOP            1C3A
GET_DATA            1E90
GET_NEXT_INPUT      105E
GET_OPMODE          1E40
GET_OPMODE_MATH     1E58
GET_REG             1E36
GET_SIZE            1E16
GET_SIZE_ADDI       1EAA
GT                  2002
IMME_7              1DFA
IM_NEW_LINE         12FC
IM_SPACE            130A
INCREMENT_LINE      11DE
INPUT_END           1032
INPUT_START         1006
INVALID             201A
INVALID_CHAR_ERROR  10CA
INVALID_OPCODE      11E6
INVALID_OPCODE_CONT  11F6
JFF                 1C6A
JFZ                 1C46
JMPLABEL            7074
LE                  200A
LEA_ERROR_CHECK     1CF6
LF                  A
LOAD_ADDR           7062
LONG                1FBC
LSL                 724C
LSR                 7250
MAIN                1000
MEM_END             200
MEM_START           100
MODE_CHOOSER        1F0C
MODE_JUMP           1D4A
MOVE                71F8
MOVEA               71FD
MOVEM               7217
MOVEM_ERROR_CHECK   1D20
MOVEQ               7224
MOVES               7024
MOVE_ERROR_CHECK    1CC0
MULS                723A
MULTIPLY            707E
M_AREG              7284
M_BYTE              7276
M_CASH              726C
M_CC                7286
M_CLOSE             727C
M_COMMA             726E
M_CONTINUE          71B4
M_DATA              7172
M_DOT               7272
M_DREG              7282
M_END               71DF
M_EQUAL             713A
M_FINISHED          719A
M_GT                7289
M_INPUT_END         70D7
M_INPUT_START       70A0
M_INVAL             7264
M_INVALID           710C
M_LE                728C
M_LONG              7278
M_NEW_LINE          71F0
M_OPEN              727A
M_PLUS              727E
M_POUND             7270
M_PRESS_CONT        7180
M_SLASH             728F
M_SPACE             71EE
M_SUB               7280
M_TAB               717B
M_WORD              7274
NEW_MODE            1F16
NUMERIC_CHAR        12E8
OP0000              13AC
OP0001              13BC
OP0010              13CC
OP0011              13D0
OP0100              1408
OP0101              14B8
OP0110              14C8
OP0111              14E2
OP1000              14F2
OP1001              1528
OP1011              1538
OP1100              1548
OP1101              1580
OP1110              15B8
OPCLR               7203
OPEN                1FCA
OPJSR               720B
OPLEA               7207
OPNOP               720F
OPRTS               7213
OPSUB               7232
OP_JTAB             134A
OR                  722F
OUTPUT_CHAR         12F4
OUTPUT_D1B          1254
OUTPUT_HEX          1F3A
PASTE_3             1692
PASTE_4             169A
PASTE_5             16A4
PLUS                1FDA
POUND               1F90
PRESS_TO_CONTINUE   11C0
PRE_READ_MEMORY     1162
PRINT_8             1EA4
PRINT_ADDRESS       121E
PRINT_ADDRESS_LOOP  1224
PRINT_BCC           1EDA
PRINT_CURRENT       1C4A
PRINT_DATA          11FE
PRINT_DATA_ADDRESS  1216
PRINT_DATA_LOOP     1238
PRINT_LIST          1C28
PRINT_OPCODE        1296
PRINT_OPCODE_EA     127A
READ_CHAR           1060
READ_CHAR_LOOP      1082
READ_MEMORY         1118
READ_MEMORY_CONT    117C
READ_MEMORY_LOOP    1164
REG_SIZE            1EF4
REMOVE_ZERO         107C
REMOVE_ZEROES       106A
RESTART             12AA
RETURN_TO_SUBROUTINE  12DA
ROL                 725C
ROLLS               705C
ROR                 7260
SHIFTS              7052
SLASH               2012
SPACE               1FEA
START               7000
STOP                7291
STRING_START        500
SUB                 1FE2
SWAP_VALUES         1146
TAB                 1316
TEST                1104
TO_EIGHT            1F30
TO_FIVE             1F36
TO_SIX              1F32
TYPE_CHOOSER        1ECA
VALIDATE_START_END  1124
VALID_CHAR          10F4
VALID_LETTER_LC     10EC
VALID_LETTER_UC     10E4
VALID_NUMBER        10DC
VALID_OPCODE        1270
VERIFY_OPCODE       1332
WORD                1FA0
_ADD                1598
_ADDA               15A8
_AND                1570
_ASD                161E
_ASL                1638
_ASR                1648
_CLR                1450
_DIVU               150A
_JSR                1470
_LEA                1460
_LSD                15E6
_LSL                15FE
_LSR                160E
_MOVE               13E8
_MOVEA              13F8
_MOVEM              14A8
_MULS               1560
_NOP                1480
_OR                 151A
_ROD                1658
_ROL                1672
_ROR                1682
_RTS                1494
